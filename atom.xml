<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi, I’m Yang Peng]]></title>
  <link href="http://yeangpeng.tech/atom.xml" rel="self"/>
  <link href="http://yeangpeng.tech/"/>
  <updated>2016-02-18T15:57:57+08:00</updated>
  <id>http://yeangpeng.tech/</id>
  <author>
    <name><![CDATA[Yang Peng]]></name>
    <email><![CDATA[me@yangpeng.tech]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx的安装和配置]]></title>
    <link href="http://yeangpeng.tech/blog/2015/11/20/nginx/"/>
    <updated>2015-11-20T10:59:15+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/11/20/nginx</id>
    <content type="html"><![CDATA[<p>nginx在工作中已经有好几个环境在使用了，
今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。</p>

<p>负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考：<a href="http://seanlook.com/2015/06/02/nginx-cache-check/">http://seanlook.com/2015/06/02/nginx-cache-check/</a></p>

<p>ssl加密请参考：<a href="http://seanlook.com/2015/05/28/nginx-ssl/">http://seanlook.com/2015/05/28/nginx-ssl/</a></p>

<h2>1. 安装nginx</h2>

<p>操作系统：CentOS 6.5_x86_64</p>

<h3>1.1 选择稳定版本</h3>

<p>我们编译安装nginx来定制自己的模块，首先安装缺少的依赖包：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel
</span></code></pre></td></tr></table></div></figure>


<p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，
确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p>

<p>从 <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版nginx-1.8.0.tar.gz到/usr/local/src下解压。</p>

<p>为了后续准备我们另外下载2个插件模块：
<a href="https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz">https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz</a>
—— 检查后端服务器的状态，
<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/c78b7dd79d0d.zip">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/c78b7dd79d0d.zip</a>
（建议在/usr/local/src下解压后将目录重命名为nginx-sticky-module-ng-1.2.6） —— 后端做负载均衡解决session sticky问题。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@cachets nginx-1.8.0<span class="o">]</span><span class="c"># pwd</span>
</span><span class='line'>/usr/local/src/nginx-1.8.0
</span><span class='line'><span class="o">[</span>root@cachets nginx-1.8.0<span class="o">]</span><span class="c"># ./configure --prefix=/usr/local/nginx-1.8 --with-pcre \</span>
</span><span class='line'>&gt; --with-http_stub_status_module --with-http_ssl_module <span class="se">\</span>
</span><span class='line'>&gt; --with-http_gzip_static_module --with-http_realip_module <span class="se">\</span>
</span><span class='line'>&gt; --add-module<span class="o">=</span>../nginx-sticky-module-ng-1.2.6 <span class="se">\</span>
</span><span class='line'>&gt; --add-module<span class="o">=</span>../nginx_upstream_check_module-0.3.0
</span><span class='line'>
</span><span class='line'><span class="o">[</span>root@cachets nginx-1.8.0<span class="o">]</span><span class="c"># make &amp;&amp; make install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.2 常用编译选项说明</h3>

<p>nginx大部分常用模块，编译时查看帮助<code>./configure --help</code>，以<code>--without</code>开头的都默认安装。</p>

<ul>
<li>&ndash;prefix=PATH ： 指定nginx的安装目录。默认 /usr/local/nginx</li>
<li>&ndash;conf-path=PATH ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf</li>
<li>&ndash;user=name： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。&ndash;group=name类似</li>
<li>&ndash;with-pcre ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用&ndash;with-pcre自动找到库文件。
使用&ndash;with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，
剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。</li>
<li>&ndash;with-zlib=PATH ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。</li>
<li>&ndash;with-http_ssl_module ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li>
<li>&ndash;with-http_stub_status_module ： 用来监控 Nginx 的当前状态</li>
<li>&ndash;with-http_realip_module ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li>
<li>&ndash;add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）</li>
</ul>


<p>再提供一种编译方案：</p>

<pre><code>./configure \
&gt; --prefix=/usr \
&gt; --sbin-path=/usr/sbin/nginx \
&gt; --conf-path=/etc/nginx/nginx.conf \
&gt; --error-log-path=/var/log/nginx/error.log \
&gt; --http-log-path=/var/log/nginx/access.log \
&gt; --pid-path=/var/run/nginx/nginx.pid  \
&gt; --lock-path=/var/lock/nginx.lock \
&gt; --user=nginx \
&gt; --group=nginx \
&gt; --with-http_ssl_module \
&gt; --with-http_stub_status_module \
&gt; --with-http_gzip_static_module \
&gt; --http-client-body-temp-path=/var/tmp/nginx/client/ \
&gt; --http-proxy-temp-path=/var/tmp/nginx/proxy/ \
&gt; --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \
&gt; --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \
&gt; --with-pcre=../pcre-7.8
&gt; --with-zlib=../zlib-1.2.3
</code></pre>

<h3>1.3 启动关闭nginx</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## 检查配置文件是否正确</span>
</span><span class='line'><span class="c"># /usr/local/nginx-1.8/sbin/nginx -t</span>
</span><span class='line'><span class="c"># ./sbin/nginx -V     # 可以看到编译选项</span>
</span><span class='line'>
</span><span class='line'><span class="c">## 启动、关闭</span>
</span><span class='line'><span class="c"># ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定</span>
</span><span class='line'><span class="c"># ./sbin/nginx -s stop</span>
</span><span class='line'>或 pkill nginx
</span><span class='line'>
</span><span class='line'><span class="c">## 重启，不会改变启动时指定的配置文件</span>
</span><span class='line'><span class="c"># ./sbin/nginx -s reload</span>
</span><span class='line'>或 <span class="nb">kill</span> -HUP <span class="sb">`</span>cat /usr/local/nginx-1.6/logs/nginx.pid<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然也可以将 nginx 作为系统服务管理，下载<a href="http://sean-images.qiniudn.com/nginx">nginx</a>到/etc/init.d/，
修改里面的路径然后赋予可执行权限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># service nginx {start|stop|status|restart|reload|configtest}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.4 yum安装</h3>

<p>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># vi /etc/yum.repo.d/nginx.repo</span>
</span><span class='line'><span class="o">[</span>nginx<span class="o">]</span>
</span><span class='line'><span class="nv">name</span><span class="o">=</span>nginx repo
</span><span class='line'><span class="nv">baseurl</span><span class="o">=</span>http://nginx.org/packages/centos/<span class="nv">$releasever</span>/<span class="nv">$basearch</span>/
</span><span class='line'><span class="nv">gpgcheck</span><span class="o">=</span>0
</span><span class='line'><span class="nv">enabled</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>剩下的就yum install nginx搞定，也可以yum install nginx-1.8.0安装指定版本
（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p>

<h2>二. nginx.conf配置文件</h2>

<p>Nginx配置文件主要分成四部分：</p>

<ul>
<li>main（全局设置）</li>
<li>server（主机设置）、</li>
<li>upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）</li>
<li>location（URL匹配特定位置后的设置）</li>
</ul>


<p>每部分包含若干个指令。
main部分设置的指令将影响其它所有部分的设置；
server部分的指令主要用于指定虚拟主机域名、IP和端口；
upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；
location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>

<p>他们之间的关系式：location->server->main；
upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>

<p>当前nginx支持的几个指令上下文：</p>

<h3>2.1 通用</h3>

<p>下面的nginx.conf简单的实现nginx在前端做反向代理服务器的例子，
处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：</p>

<pre><code>#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    use epoll;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    gzip_min_length 1k;
    gzip_buffers    4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;

    # http_proxy 设置
    client_max_body_size   10m;
    client_body_buffer_size   128k;
    proxy_connect_timeout   75;
    proxy_send_timeout   75;
    proxy_read_timeout   75;
    proxy_buffer_size   4k;
    proxy_buffers   4 32k;
    proxy_busy_buffers_size   64k;
    proxy_temp_file_write_size  64k;
    proxy_temp_path   /usr/local/nginx-1.8/proxy_temp 1 2;

    # 设定负载均衡后台服务器列表
    upstream  backend  {
        #ip_hash;
        server   192.168.203.94:8080 max_fails=2 fail_timeout=30s;
        #server  192.168.203.95:8080 max_fails=2 fail_timeout=30s;
    }

    server {
        listen       80;
        server_name  yc.wingarden.net;
        charset utf-8;

        #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        #                  '$status $body_bytes_sent "$http_referer" '
        #                  '"$http_user_agent" "$http_x_forwarded_for"';
        #access_log  logs/host.access.log  main;

        location = / {
            #root   html;
            #index  index.html index.htm;
            proxy_pass http://192.168.203.94:8080/index.html;
            #proxy_pass http://backend;
            #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        location ^~ /staticf/ {
            root /home/orchard/work/file/;
            expires      7d;
        }

        location / {
            proxy_pass http://192.168.203.94:8080/;
            proxy_redirect off;
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        #静态文件，nginx自己处理，不去backend请求tomcat
        location  ~* /download/ {
            root /apps/oa/fs;
        }
        location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ {
            root /apps/oaapp;
            expires      7d;
        }
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 192.168.10.0/24;
            deny all;
        }

        location ~ ^/(WEB-INF)/ {
            deny all;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
</code></pre>

<p>备注：</p>

<pre><code>= 开头：表示精确匹配
^~ 开头：表示uri以某个常规字符串开头，不是正则匹配
~ 开头：表示区分大小写的正则匹配;
~* 开头：表示不区分大小写的正则匹配
/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到

顺序 no优先级：
(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)
</code></pre>

<p>实际使用建议</p>

<pre><code>所以实际使用中，个人觉得至少有三个匹配规则定义，如下：
#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。
#这里是直接转发给后端应用服务器了，也可以是一个静态首页
# 第一个必选规则
location = / {
    proxy_pass http://tomcat:8080/index.html
}
# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项
# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用
location ^~ /static/ {
    root /webroot/static/;
}
location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {
    root /webroot/static/;
}
# 第三个规则就是通用规则，用来转发动态请求到后端应用服务器
# 非静态文件请求就默认是动态请求，自己根据实际把握
# 毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了
location / {
    proxy_pass http://tomcat:8080/
}
</code></pre>

<h3>2.2 常用指令说明</h3>

<h4>2.2.1 main全局配置</h4>

<p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p>

<ul>
<li><p>woker_processes 2</p>

<p>在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。
这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，
如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</p></li>
<li><p>worker_cpu_affinity</p>

<p>也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。
如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</p></li>
<li><p>worker_connections 2048</p>

<p>写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。
nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，
所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。
当nginx作为http服务器时，计算公式里面是除以2。</p></li>
<li><p>worker_rlimit_nofile 10240</p>

<p>写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。</p></li>
<li><p>use epoll</p>

<p>写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。
同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</p></li>
</ul>


<h4>2.2.2 http服务器</h4>

<p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p>

<ul>
<li><p>sendfile on</p>

<p>开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。
对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</p></li>
<li><p>keepalive_timeout 65 :</p>

<p>长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，
可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。
如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</p></li>
<li><p>send_timeout : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，
如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</p></li>
<li><p>client_max_body_size 10m</p>

<p>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</p></li>
<li><p>client_body_buffer_size 128k</p>

<p>缓冲区代理缓冲用户端请求的最大字节数</p></li>
</ul>


<p>模块http_proxy：</p>

<p>这个模块实现的是nginx作为反向代理服务器的功能，
包括缓存功能（另见<a href="http://segmentfault.com/a/1190000002873747">文章</a>）</p>

<ul>
<li><p>proxy_connect_timeout 60</p>

<p>nginx跟后端服务器连接超时时间(代理连接超时)</p></li>
<li><p>proxy_read_timeout 60</p>

<p>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</p></li>
<li><p>proxy_buffer_size 4k</p>

<p>设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</p></li>
<li><p>proxy_buffers 4 32k</p>

<p>proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置</p></li>
<li><p>proxy_busy_buffers_size 64k</p>

<p>高负荷下缓冲大小（proxy_buffers*2）</p></li>
<li><p>proxy_max_temp_file_size</p>

<p>当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</p></li>
<li><p>proxy_temp_file_write_size 64k</p>

<p>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</p></li>
</ul>


<p>proxy_pass，proxy_redirect见 location 部分。</p>

<p>模块http_gzip：</p>

<ul>
<li>gzip on : 开启gzip压缩输出，减少网络传输。</li>
<li>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>
<li>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>
<li>gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>
<li>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>
<li>gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>
<li>gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>
<li>gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>
</ul>


<h4>2.2.3 server虚拟主机</h4>

<p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p>

<ul>
<li><p>listen</p>

<p>监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</p></li>
<li><p>server_name</p>

<p>服务器名，如localhost、www.example.com，可以通过正则匹配。</p></li>
</ul>


<p>模块http_stream</p>

<p>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，
后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p>

<h4>2.2.4 location</h4>

<p>http服务中，某些特定的URL对应的一系列配置项。</p>

<ul>
<li><p>root /var/www/html</p>

<p>定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</p></li>
<li><p>index index.jsp index.html index.htm</p>

<p>定义路径下默认访问的文件名，一般跟着root放</p></li>
<li><p>proxy_pass <a href="http://backend">http://backend</a></p>

<p>请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href="http://ip:port%E3%80%82">http://ip:port%E3%80%82</a></p></li>
<li><p>proxy_redirect off;</p></li>
<li><p>proxy_set_header Host $host;</p></li>
<li><p>proxy_set_header X-Real-IP $remote_addr;</p></li>
<li><p>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p></li>
</ul>


<p>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</p>

<p>关于location匹配规则的写法，可以说尤为关键且基础的，
参考文章<a href="http://segmentfault.com/a/1190000002797606">nginx配置location总结及rewrite规则写法</a>;</p>

<h3>2.3 其它</h3>

<h4>2.3.1 访问控制 allow/deny</h4>

<p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p>

<pre><code>location /nginx-status {
  stub_status on;
  access_log off;
#  auth_basic   "NginxStatus";
#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;

  allow 192.168.10.100;
  allow 172.29.73.0/24;
  deny all;
}
</code></pre>

<p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p>

<pre><code># htpasswd -c htpasswd admin
New passwd:
Re-type new password:
Adding password for user admin

# htpasswd htpasswd admin    //修改admin密码
# htpasswd htpasswd sean    //多添加一个认证用户
</code></pre>

<p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p>

<h4>2.3.2 列出目录 autoindex</h4>

<p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入autoindex on;，另外两个参数最好也加上去:</p>

<ul>
<li><p>autoindex_exact_size off; 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</p></li>
<li><p>autoindex_localtime on; 默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间</p>

<p>location /images {
  root   /var/www/nginx-default/images;
  autoindex on;
  autoindex_exact_size off;
  autoindex_localtime on;
}</p></li>
</ul>


<p>参考</p>

<ul>
<li><a href="http://liuqunying.blog.51cto.com/3984207/1420556">http://liuqunying.blog.51cto.com/3984207/1420556</a></li>
<li><a href="http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a></li>
<li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile">http://wiki.nginx.org/HttpCoreModule#sendfile</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用httpd对Tomcat进行负载均衡]]></title>
    <link href="http://yeangpeng.tech/blog/2015/10/13/httpd-tomcat/"/>
    <updated>2015-10-13T10:59:15+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/10/13/httpd-tomcat</id>
    <content type="html"><![CDATA[<h3>环境说明</h3>

<p>操作系统：CentOS 6.5_x86_64</p>

<p>前提：提前准备好编译环境，防火墙和selinux都关闭</p>

<p>主机IP：两台机器，192.168.203.103、192.168.203.104</p>

<p>安装软件：jdk-8u51-linux-x64, apache-tomcat-8.0.24, tomcat-connectors-1.2.41, httpd-2.2.15, httpd-devel-2.2.15</p>

<h4>一、两台机器都安装JAVA8</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rpm -qa <span class="p">|</span> grep jdk
</span><span class='line'>jdk-1.7.0_45-fcs.x86_64
</span><span class='line'>sudo rpm -e jdk-1.7.0_45
</span></code></pre></td></tr></table></div></figure>


<p>下载JDK8的包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget --no-cookies --no-check-certificate --header <span class="s2">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="s2">&quot;http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果上述链接失效，请去官网下载最新的源码包。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /opt/
</span><span class='line'>tar xzf jdk-8u51-linux-x64.tar.gz
</span><span class='line'><span class="nb">cd</span> /opt/jdk1.8.0_51/
</span><span class='line'>sudo chown -R root:root /opt/jdk1.8.0_51/
</span><span class='line'>sudo alternatives --install /usr/bin/java java /opt/jdk1.8.0_51/bin/java 2
</span><span class='line'>sudo alternatives --config java
</span></code></pre></td></tr></table></div></figure>


<p>得到以下输出，选择刚刚安装的jdk8即可：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>There are <span class="m">3</span> programs which provide <span class="s1">&#39;java&#39;</span>.
</span><span class='line'>
</span><span class='line'>  Selection    Command
</span><span class='line'>-----------------------------------------------
</span><span class='line'>*  <span class="m">1</span>           /opt/jdk1.7.0_71/bin/java
</span><span class='line'> + <span class="m">2</span>           /opt/jdk1.8.0_25/bin/java
</span><span class='line'>   <span class="m">3</span>           /opt/jdk1.8.0_51/bin/java
</span><span class='line'>
</span><span class='line'>Enter to keep the current selection<span class="o">[</span>+<span class="o">]</span>, or <span class="nb">type </span>selection number: 3
</span></code></pre></td></tr></table></div></figure>


<p>然后再配置下javac和jar</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_51/bin/jar 2
</span><span class='line'>sudo alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_51/bin/javac 2
</span><span class='line'>sudo alternatives --set jar /opt/jdk1.8.0_51/bin/jar
</span><span class='line'>sudo alternatives --set javac /opt/jdk1.8.0_51/bin/javac
</span></code></pre></td></tr></table></div></figure>


<p>查看下JDK版本 <code>java -version</code></p>

<p>修改环境变量 <code>sudo vim /etc/profile</code></p>

<p>输入以下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/opt/jdk1.8.0_51
</span><span class='line'><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span>/opt/jdk1.8.0_51/jre
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin
</span></code></pre></td></tr></table></div></figure>


<p>执行 <code>source /etc/profile</code></p>

<h3>二、两台机器安装tomcat</h3>

<p>1.下载安装tomcat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.0.24/bin/apache-tomcat-8.0.24.tar.gz
</span><span class='line'>tar xf apache-tomcat-8.0.24.tar.gz -C /usr/local/
</span><span class='line'><span class="nb">cd</span> /usr/local/
</span><span class='line'>ln -sv apache-tomcat-8.0.24 tomcat
</span></code></pre></td></tr></table></div></figure>


<p>2.配置环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim /etc/profile.d/tomcat.sh
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CATALINA_BASE</span><span class="o">=</span>/usr/local/tomcat
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CATALINA_BASE</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span>PATH CATALINA_BASE
</span></code></pre></td></tr></table></div></figure>


<p>执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>. /etc/profile.d/tomcat.sh
</span></code></pre></td></tr></table></div></figure>


<p>3.查看状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>catalina.sh version
</span></code></pre></td></tr></table></div></figure>


<p>4.提供启动脚本</p>

<p>sudo vim /etc/init.d/tomcat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># Tomcat init script for linux</span>
</span><span class='line'><span class="c"># chkconfig: 2345 96 14</span>
</span><span class='line'><span class="c"># description: The Apache Tomcat servlet/JSP container</span>
</span><span class='line'><span class="c"># JAVA_OPTS=&#39;-Xms64m -Xmx128m&#39;</span>
</span><span class='line'><span class="nv">JAVA_HOME</span><span class="o">=</span>/opt/jdk
</span><span class='line'><span class="nv">CATALINA_HOME</span><span class="o">=</span>/usr/local/tomcat
</span><span class='line'><span class="nb">export </span>JAVA_HOME CATALINA_HOME
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>start<span class="o">)</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh start <span class="p">;;</span>
</span><span class='line'>stop<span class="o">)</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh stop <span class="p">;;</span>
</span><span class='line'>restart<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;stoping tomcat ...&quot;</span>
</span><span class='line'>  ps aux <span class="p">|</span>grep tomcat/bin <span class="p">|</span>grep -v <span class="s2">&quot;grep tomcat/bin&quot;</span> <span class="p">|</span><span class="k">while</span> <span class="nb">read </span>line
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="nv">linewords</span><span class="o">=(</span><span class="nv">$line</span><span class="o">)</span>
</span><span class='line'>    <span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;${linewords[1]}&quot;</span>
</span><span class='line'>    <span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="c"># $CATALINA_HOME/bin/catalina.sh stop</span>
</span><span class='line'>  sleep 2
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;starting tomcat ...&quot;</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh start <span class="p">;;</span>
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 {start|stop|restart}&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /etc/init.d/tomcat
</span><span class='line'>sudo chkconfig --add tomcat
</span></code></pre></td></tr></table></div></figure>


<p>5.编辑tomcat配置文件，只添加jvmRoute参数：</p>

<p>在第一台机子上面：</p>

<p><code>sudo vim /usr/local/tomcat/conf/server.xml</code></p>

<p>修改下面这句：</p>

<pre><code>&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA"&gt;
</code></pre>

<p>在第二台机子上面：</p>

<p><code>sudo vim /usr/local/tomcat/conf/server.xml</code></p>

<p>修改下面这句：</p>

<pre><code>&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatB"&gt;
</code></pre>

<p>6.提供测试页面</p>

<p>第一台机器上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -pv /usr/local/tomcat/webapps/test/WEB-INF/<span class="o">{</span>classes,lib<span class="o">}</span>
</span><span class='line'>sudo vim /usr/local/tomcat/webapps/test/index.jsp
</span></code></pre></td></tr></table></div></figure>


<p>写一个简单的JSP页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ page language=&quot;java&quot; %&gt;
</span><span class='line'><span class="err">&lt;</span>%@ page import=&quot;java.util.*&quot; %&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%
</span><span class='line'>            out.println(&quot;This is TomcatA&quot;);
</span><span class='line'>        %&gt;
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后启动tomcat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo service tomcat start
</span></code></pre></td></tr></table></div></figure>


<p>这时候可以通过访问 <code>http://192.168.203.103:8080/test</code> 访问到这个页面</p>

<p>第二台机器上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -pv /usr/local/tomcat/webapps/test/WEB-INF/<span class="o">{</span>classes,lib<span class="o">}</span>
</span><span class='line'>sudo vim /usr/local/tomcat/webapps/test/index.jsp
</span></code></pre></td></tr></table></div></figure>


<p>写一个简单的JSP页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ page language=&quot;java&quot; %&gt;
</span><span class='line'><span class="err">&lt;</span>%@ page import=&quot;java.util.*&quot; %&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%
</span><span class='line'>            out.println(&quot;This is TomcatB&quot;);
</span><span class='line'>        %&gt;
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后启动tomcat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo service tomcat start
</span></code></pre></td></tr></table></div></figure>


<p>这时候可以通过访问<code>http://192.168.203.104:8080/test</code>访问到这个页面</p>

<h3>三、利用mod_jk模块对tomcat进行负载均衡</h3>

<p>利用httpd反向代理tomcat时有两种方法，分别要用到mod_proxy和mod_jk这两个模块。
mod_jk需要额外编译安装，不过它功能更强大，所以推荐mod_jk。
此模块只需要在一台机器上安装，我们这里在第一台机器（103）上安装。</p>

<p>1.安装httpd：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>yum -y install httpd httpd-devel
</span></code></pre></td></tr></table></div></figure>


<p>2.安装mod_jk.so模块：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://mirrors.cnnic.cn/apache/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.41-src.tar.gz
</span><span class='line'>tar xf tomcat-connectors-1.2.41-src.tar.gz
</span><span class='line'><span class="nb">cd </span>tomcat-connectors-1.2.41-src/native/
</span><span class='line'>./configure --with-apxs<span class="o">=</span>/usr/sbin/apxs
</span><span class='line'>sudo make <span class="o">&amp;&amp;</span> sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>3.提供额外的httpd模块配置文件：</p>

<p><code>vim /etc/httpd/conf.d/httpd-jk.conf</code></p>

<pre><code># Load the mod_jk
LoadModule  jk_module  modules/mod_jk.so
JkWorkersFile  /etc/httpd/conf.d/workers.properties
JkLogFile  logs/mod_jk.log
JkLogLevel  debug
JkMount  /*  lb1
JkMount  /status/  stat1
</code></pre>

<p>4.配置mod_jk模块的配置文件workers.properties：</p>

<p><code>vim /etc/httpd/conf.d/workers.properties</code></p>

<pre><code>worker.list = lb1,stat1
worker.TomcatA.type = ajp13
worker.TomcatA.host = 192.168.203.103
worker.TomcatA.port = 8009
worker.TomcatA.lbfactor = 1
worker.TomcatB.type = ajp13
worker.TomcatB.host = 192.168.203.104
worker.TomcatB.port = 8009
worker.TomcatB.lbfactor = 1
worker.lb1.type = lb
worker.lb1.sticky_session = 0
worker.lb1.balance_workers = TomcatA, TomcatB
worker.stat1.type = status
</code></pre>

<p>5.启动httpd测试：
我们先去修改下hostname，还有httpd的domainname，<code>sudo vim /etc/hosts</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1    localhost centos03
</span></code></pre></td></tr></table></div></figure>


<p>然后修改httpd的配置文件，<code>sudo vim /etc/httpd/conf/httpd.conf</code>
修改这一行：</p>

<pre><code>ServerName localhost:80
</code></pre>

<p>最后我们启动httpd服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service httpd start
</span></code></pre></td></tr></table></div></figure>


<p>用浏览器打开<code>http://192.168.203.103/test</code>，我们不断刷新，可以看到效果。</p>

<p>6.修改httpd默认端口号方法</p>

<p><code>sudo vim /etc/httpd/conf/httpd.conf</code></p>

<p>修改两个地方</p>

<pre><code>#Listen 12.34.56.78:80
Listen 80
#把80改为你设置的端口，我设置端口为8088

Listen 8088

NameVirtualHost *:80
#把80改为你设置的端口，我设置端口为8088
NameVirtualHost *:8088
</code></pre>

<p>保存修改，退出，重启httpd服务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedding PLplot in Gtk DrawingAreas]]></title>
    <link href="http://yeangpeng.tech/blog/2015/09/29/embedding-plplot-in-gtk-drawingareas/"/>
    <updated>2015-09-29T18:43:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/09/29/embedding-plplot-in-gtk-drawingareas</id>
    <content type="html"><![CDATA[<p><strong>Update: I have turned this post into a Github project called <a href="https://github.com/tschoonj/gtkmm-plplot">Gtkmm-PLplot</a>, under the GPLv3</strong></p>

<p>测试中文显示效果Scientific plotting and Gtk+ have never been good friends. Over the years there have been a number of efforts like <a href="http://gtkextra.sourceforge.net/cms/">GtkExtra</a>, <a href="http://sourceforge.net/projects/gtkdatabox/">GtkDataBox</a>, <a href="https://github.com/drahnr/goatplot">GoatPlot</a>, <a href="http://gtkgraph.sourceforge.net">GtkGraph</a>&hellip; Unfortunately these packages all appear to share a lack of active development (most are in fact abandoned), poor to non-existent documentation and in most cases lack of support for Gtk+3.</p>

<p>For about a year or two I have been a minor contributor to GtkExtra, and I had started migrating the plotting widgets to Gtk+3 but I had to abandon my effort due to lack of knowledge of Cairo and Gtk+ internals, and more importantly a lack of time. I still use it in the Gtk+2 based GUI of my <a href="https://github.com/tschoonj/xmimsim">XMI-MSIM</a> package though.</p>

<p>I have recently been looking into alternatives to GtkExtra as I switched to Gtk+3 (actually Gtkmm3, as I mostly code in C++ nowadays) for my new projects (e.g. <a href="https://github.com/tschoonj/bam-utils">BAM-utils</a>). I came across a package called <a href="http://plplot.sourceforge.net">PLplot</a>, which I used a long time ago for producing simple plots in PNG format in command-line utilities.</p>

<p>This package used to come with Gnome bindings that ensured easy integration into Gnome based GUIs but it looks like they have been removed some time ago (I am referring here to PLplot 5.11.0, the current stable release). Instead the documentation mentions support for a <a href="http://cairographics.org">cairo</a> driver, which can be embedded in Gtk based user interfaces. Currently the documentation that covers this feature is limited to a README file and a minimal cairo-only example that demonstrates how to use the PLplot cairo driver through the <code>extcairo</code> device by producing a PostScript file.</p>

<p>PLplot has the great advantage over the aforementioned Gtk+ based packages that it is very actively developed by several volunteers and comes with decent documentation, including a lot of examples written in the many languages supported by the toolkit. On the downside, the developers seem to have the unfortunate habit of regularly breaking backwards compatibility in their releases, as they did in their latest 5.11.0 release both at the API level as well as by changing the name of the pkg-config packages&hellip;</p>

<p>In this blogpost I will explain how I managed to embed PLplot into Gtkmm through the GtkDrawingArea widget class, and demonstrate it using a small program that allows one to zoom in on the data, save the plot in a file and print it.</p>

<!--more-->


<h1>Compiling PLplot on Windows 64-bit using TDM-GCC</h1>

<p>It would be remiss if I didn&rsquo;t share the problems I encountered compiling PLplot on my Windows 7 64-bit virtual machine using the TDM-GCC provided MinGW-w64 5.1.0 gcc and g++ compilers.
I used the following command to setup the <a href="http://www.cmake.org">CMake</a> based installation system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake -G <span class="s2">&quot;MSYS Makefiles&quot;</span> -DENABLE_DYNDRIVERS<span class="o">=</span>OFF -DPLD_wingcc<span class="o">=</span>OFF ..
</span></code></pre></td></tr></table></div></figure>


<p>The <code>DYNDRIVERS</code> option determines whether the drivers will be loaded at runtime using the libtool ltdl interface, or if they will be built into the main shared library. I chose the latter as this makes distribution easier (less files to copy and no need to set a environment variable or use the registry to get the locations of these drivers). Also I had a feeling PLplot has not been well-tested on Windows, so I prefer avoiding something potentially dangerous as loading dynamically loading modules using libltdl, a library I have no experience with.</p>

<p>I turned of the <code>wingcc</code> driver well simply because the linker consistently crashed when generating the dll. Again something that does not lead me to exude confidence regarding stability of PLplot on Windows 64-bit, but this could also have to do with the immature nature of MinGW-w64. Fortunately I don&rsquo;t need this driver so no great loss here&hellip;</p>

<p>The <code>cmake</code> invokation generated the necessary Makefiles, and I started the compilation using a good old fashioned <code>make</code>.</p>

<p>I noticed that a compilation error was generated in <code>drivers/cairo.c</code>, which I managed to fix after some work with the following patch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/drivers/cairo.c b/drivers/cairo.c</span>
</span><span class='line'><span class="gh">index 8d43ee9..91fbc7d 100644</span>
</span><span class='line'><span class="gd">--- a/drivers/cairo.c</span>
</span><span class='line'><span class="gi">+++ b/drivers/cairo.c</span>
</span><span class='line'><span class="gu">@@ -43,6 +43,7 @@</span>
</span><span class='line'> // Driver-dependent includes
</span><span class='line'> #if defined ( PLD_wincairo )
</span><span class='line'> #include &lt;windows.h&gt;
</span><span class='line'><span class="gi">+#include &lt;cairo-win32.h&gt;</span>
</span><span class='line'> #endif
</span><span class='line'> #if defined ( PLD_xcairo )
</span><span class='line'> #include &lt;cairo-xlib.h&gt;
</span><span class='line'><span class="gu">@@ -3289,7 +3290,7 @@ LRESULT CALLBACK PlplotCairoWndProc( HWND hwnd, UINT nMsg, WPARAM wParam, LPARAM</span>
</span><span class='line'>     }
</span><span class='line'>     else
</span><span class='line'>     {
</span><span class='line'><span class="gd">-        pls = (PLStream *) GetWindowLong( hwnd, GWL_USERDATA ); // Try to get the address to pls for this window</span>
</span><span class='line'><span class="gi">+        pls = (PLStream *) GetWindowLongPtr( hwnd, GWLP_USERDATA ); // Try to get the address to pls for this window</span>
</span><span class='line'>         if ( pls )                                              // If we got it, then we will initialise this windows plplot private data area
</span><span class='line'>         {
</span><span class='line'>             dev = (PLCairo *) pls-&gt;dev;
</span><span class='line'><span class="gu">@@ -3496,7 +3497,7 @@ void plD_init_wincairo( PLStream *pls )</span>
</span><span class='line'> // process this window
</span><span class='line'> //
</span><span class='line'>
</span><span class='line'><span class="gd">-    SetWindowLong( aStream-&gt;hwnd, GWL_USERDATA, (long) pls );</span>
</span><span class='line'><span class="gi">+    SetWindowLongPtr( aStream-&gt;hwnd, GWLP_USERDATA, (LONG_PTR) pls );</span>
</span><span class='line'>     aStream-&gt;SCRN_hdc = aStream-&gt;hdc = GetDC( aStream-&gt;hwnd );
</span><span class='line'>
</span><span class='line'> //
</span></code></pre></td></tr></table></div></figure>


<p>This patch clearly shows that the developers have never tried compiling PLplot with a 64-bit compiler on Windows, neither with gcc nor Visual Studio, as they would have run into the same issue: <code>GWL_USERDATA</code> is simply not defined for 64-bit compilations, and GetWindowLong/SetWindowLong have been <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633584.aspx">superseded</a> by GetWindowLongPtr/SetWindowLongPtr.</p>

<p>Either way, I submitted this patch <a href="https://sourceforge.net/p/plplot/patches/31/">upstream</a> and I hope that it will be included in the next release (already merged into the master branch).</p>

<p>Obviously no problems arised while compiling PLplot on my Mac and I expect the same for Linux.</p>

<h1>Setting up the build environment</h1>

<p>As usual in my projects, I chose to use the GNU buildtools for my build environment, which in this case consisted of a simple <code>configure.ac</code> and <code>Makefile.am</code>. The former checks that we have a suitable C++ compiler with C++11 standard support as well as the GNU extensions. For this I am using the latest version of the autoconf macro called <code>ax_cxx_compile_stdcxx_11.m4</code>, which I downloaded from the <a href="http://www.gnu.org/software/autoconf-archive/">autoconf archive</a>.</p>

<p>Next I check for the presence of Gtkmm (version 3!) and PLplot. I took care to provide support for both the old and new name of the PLplot C++ bindings, respectively called <code>plplotd-c++</code> and <code>plplot-c++</code>. Using the compilation test provided by the autoconf macro <code>AC_TRY_COMPILE</code> I test for the presence of the <code>extcairo</code> device that I will be using to connect a Cairo context with the PLplot plotting stream.</p>

<h1>The PLplotDrawingArea class</h1>

<p>Moving on to the interesting part: the definition of our class. Obviously we want it to be derived from Gtkmm&rsquo;s <code>DrawingArea</code> class. Instances of this class are basically blank widgets for which the user is required to override the default handler <code>on_draw</code> for the signal <code>signal_draw</code>, as is covered in the reference manual of both <a href="https://developer.gnome.org/gtk3/stable/GtkDrawingArea.html">Gtk</a> and <a href="https://developer.gnome.org/gtkmm/stable/classGtk_1_1DrawingArea.html">Gtkmm</a>.</p>

<p>The class definition follows in the following excerpt. I will discussing the different methods in the following sections.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef PLPLOTDRAWINGAREA_H</span>
</span><span class='line'><span class="cp">#define PLPLOTDRAWINGAREA_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gtkmm/drawingarea.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;plstream.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">sigc</span><span class="o">::</span><span class="n">signal</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span> <span class="o">&gt;</span> <span class="n">type_signal_select_region</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PLplotDrawingArea</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Gtk</span><span class="o">::</span><span class="n">DrawingArea</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">x_title</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">y_title</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">plot_title</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start_event</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">end_event</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">selecting</span><span class="p">;</span>
</span><span class='line'>  <span class="n">plstream</span> <span class="o">*</span><span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x_pl_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">//our handler for the on_draw signal</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">on_draw</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&lt;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;&amp;</span> <span class="n">cr</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// This is the default handler for the signal signal_select_region().</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">on_select_region</span><span class="p">(</span><span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_button_press_event</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_button_release_event</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_motion_notify_event</span> <span class="p">(</span><span class="n">GdkEventMotion</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="n">type_signal_select_region</span> <span class="n">_signal_select_region</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PLplotDrawingArea</span><span class="p">(</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">x_title</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">y_title</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">plot_title</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">convert_plplot_to_cairo_coordinates</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x_pl</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y_pl</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">double</span> <span class="o">&amp;</span><span class="n">x_cr</span><span class="p">,</span> <span class="kt">double</span> <span class="o">&amp;</span><span class="n">y_cr</span><span class="p">);</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="o">~</span><span class="n">PLplotDrawingArea</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pls</span><span class="p">)</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">type_signal_select_region</span> <span class="n">signal_select_region</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_signal_select_region</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">set_region</span><span class="p">(</span><span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">draw_plot</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&lt;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cr</span><span class="p">,</span> <span class="n">plstream</span> <span class="o">*</span><span class="n">_pls</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The constructor</h2>

<p>Let&rsquo;s start of with the constructor of the class. In this simple example I will assume that user wants to produce a simple two-dimensional plot defined by a vector of X-values and one of Y-values.Obviously our widget class has the potential of being used for far more complex plots after some re-writing and extending but is outside the scope of this blogpost. The code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">PLplotDrawingArea</span><span class="p">(</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">_x</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">_y</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">_x_title</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">_y_title</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">_plot_title</span>
</span><span class='line'><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">_x</span><span class="p">),</span>
</span><span class='line'>    <span class="n">y</span><span class="p">(</span><span class="n">_y</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x_title</span><span class="p">(</span><span class="n">_x_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">y_title</span><span class="p">(</span><span class="n">_y_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">plot_title</span><span class="p">(</span><span class="n">_plot_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">start_event</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">start_cairo</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">end_event</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">end_cairo</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">selecting</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span>
</span><span class='line'>    <span class="n">pls</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x_pl_range</span><span class="p">{</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">()),</span> <span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span>
</span><span class='line'>    <span class="n">y_pl_range</span><span class="p">{</span><span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span>
</span><span class='line'>               <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">max_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">())}</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>  <span class="n">add_events</span><span class="p">(</span><span class="n">Gdk</span><span class="o">::</span><span class="n">POINTER_MOTION_MASK</span> <span class="o">|</span>
</span><span class='line'>             <span class="n">Gdk</span><span class="o">::</span><span class="n">BUTTON_PRESS_MASK</span> <span class="o">|</span>
</span><span class='line'>             <span class="n">Gdk</span><span class="o">::</span><span class="n">BUTTON_RELEASE_MASK</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//connect our default signal handler</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">signal_select_region</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span><span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span>
</span><span class='line'>             <span class="o">&amp;</span><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">on_select_region</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our input vectors are referred to here as <code>_x</code> and <code>_y</code> in the argument list. Furthermore, the user is expected to provide axes titles and a general plot title. The initialization list shows that we will be using member variable copies of these 5 arguments. Note that I am using the PLplot <code>PLFLT</code> datatype here for the vectors, which is typedef'ed to the double datatype.
The rest of the list deals with private variables that deal with the selection box (<code>start_event</code>, <code>start_cairo</code>, <code>end_event</code>, <code>end_cairo</code> and <code>selecting</code>), our PLplot stream object <code>pls</code> and the plotting range determined by <code>x_pl_range</code> and <code>y_pl_range</code>, which are initially set to cover the entire area provided by the data.
The method body does only two things: it makes sure that the mouse events necessary to drag the selection box will be emitted as signals.
Our class defines one signal called <code>signal_on_select_region</code> (after the similarly named <code>GtkPlotCanvas</code> signal from GtkExtra). This signal will be emitted whenever a selection box has been dragged. Its default handler is the <code>on_select_region</code> virtual method, which does absolutely nothing!
So it is up to the user to either derive PLplotDrawing area with an overriding <code>on_select_region</code> method, or alternatively to connect to this signal as will be shown later on in this example. A perfect candidate (with the right function prototype) for this task is the <code>set_region</code> method, which will reduce the plot range to the selected box. This will be demonstrated further along this example when we will be discussing the Window that will hold our PLplotDrawingArea.</p>

<h2>The on_draw method</h2>

<p>The <code>on_draw</code> method will be the most important one of our class as it needs to call the PLplot routines to generate our plot. Let&rsquo;s have a closer look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">on_draw</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&lt;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;&amp;</span> <span class="n">cr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Gtk</span><span class="o">::</span><span class="n">Allocation</span> <span class="n">allocation</span> <span class="o">=</span> <span class="n">get_allocation</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">allocation</span><span class="p">.</span><span class="n">get_width</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">allocation</span><span class="p">.</span><span class="n">get_height</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pls</span><span class="p">)</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pls</span> <span class="o">=</span> <span class="k">new</span> <span class="n">plstream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">draw_plot</span><span class="p">(</span><span class="n">cr</span><span class="p">,</span> <span class="n">pls</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">selecting</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">set_line_width</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">rectangle</span><span class="p">(</span><span class="n">MIN</span><span class="p">(</span><span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">MIN</span><span class="p">(</span><span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">fabs</span><span class="p">(</span><span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">fabs</span><span class="p">(</span><span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">stroke</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">convert_plplot_to_cairo_coordinates</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                                      <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">convert_plplot_to_cairo_coordinates</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                                      <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method provides as input argument a pointer to the Cairo context that we will draw to.
We start by querying the dimensions of the widget, followed by allocating memory for our PLplot stream <code>pls</code>, which will next be provided to a method called <code>draw_plot</code> that will take care of the actual PLplot commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">draw_plot</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&lt;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cr</span><span class="p">,</span> <span class="n">plstream</span> <span class="o">*</span><span class="n">_pls</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">sdev</span><span class="p">(</span><span class="s">&quot;extcairo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">spage</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Gdk</span><span class="o">::</span><span class="n">RGBA</span> <span class="n">color</span> <span class="o">=</span> <span class="n">get_style_context</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_color</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Gdk</span><span class="o">::</span><span class="n">Cairo</span><span class="o">::</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="n">cr</span><span class="p">,</span> <span class="n">color</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">(</span><span class="n">PLESC_DEVINIT</span><span class="p">,</span> <span class="n">cr</span><span class="o">-&gt;</span><span class="n">cobj</span><span class="p">());</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">col0</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">env</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>            <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>            <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">lab</span><span class="p">(</span><span class="n">x_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">y_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">plot_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">col0</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main reason I am not including this code in <code>on_draw</code> is that gives me the possibility to apply it to Cairo contexts that are not connected to Gtk widgets, but instead to Cairo surfaces for PostScript, PNG and PDF backends as I will demonstrate later on.</p>

<p>Let&rsquo;s go through the different PLplot commands. Their calling order is <em>very</em> important.</p>

<ol>
<li><code>_pls-&gt;sdev("extcairo")</code>: ensures that our stream will be using the <code>extcairo</code> device. This entire class hinges on the availability of this device.</li>
<li><code>_pls-&gt;spage(0.0, 0.0, width, height, 0, 0)</code>: sets the dimensions of the total plotting area (including axes titles etc.!) available to PLplot equal to the widget dimensions.</li>
<li><code>_pls-&gt;init()</code>: initialize the plstream. PLplot internal housekeeping.</li>
<li><code>_pls-&gt;cmd(PLESC_DEVINIT, cr-&gt;cobj())</code>: connects the PLplot internals to our Cairo context. Note the call to <code>cobj()</code>: <code>cr</code> is a Cairomm object and <code>cmd</code> expects a plain Cairo context pointer.</li>
<li><code>_pls-&gt;col0(0)</code>: sets the current color to the first entry in the default colortable: black</li>
<li><code>_pls-&gt;env(...)</code>: defines the range of our X- and Y-data that will be plotted. By default equal to the entire data-range but may be changed when properly handled with <code>signal_select_region</code> and <code>set_region</code>. The last argument determines the axes types.</li>
<li><code>_pls-&gt;lab(...)</code>: sets the axes and plot labels.</li>
<li><code>_pls-&gt;col0(1)</code>: switch to the second color of the colortable: red.</li>
<li><code>_pls-&gt;line(x.size(), &amp;x[0], &amp;y[0])</code>: plot the graph</li>
</ol>


<p>That&rsquo;s it! For more information about the commands, check the extensive PLplot documentation.</p>

<p>Back to <code>on_draw</code>: after the call to <code>draw_plot</code> we find some code that will draw the selection box (if necessary) using some basic Cairo commands. The last two lines are calls to <code>convert_plplot_to_cairo_coordinates</code>, which provide the box selection code with the Cairo coordinates of the plot grid, and will be used to constrain the selection box to the plot grid. These function needs to be called in every call to <code>on_draw</code> as it is the only way to take into account window resizing.</p>

<h2>Dragging the selection box</h2>

<p>An important feature typically found in plotting toolkits is the ability to drag selection boxes. This could be used for example for zooming in on a particular range of the data or for selecting items such as labels that could then be moved around or deleted. To implement this feature one needs to connect signal handlers to signals emitted when a mouse button is pressed and released, as well as when the mouse pointer is moved around. This is why the class contains the three methods <code>on_button_press_event</code>, <code>on_button_release_event</code> and <code>on_motion_notify_event</code>. In order to ensure that the corresponding signals are emitted, the events were added to newly created instances of our class in the constructor.</p>

<p>The hardest part when writing these methods is dealing with the different coordinate systems involved, which can be explained as follows:</p>

<ol>
<li>The Gdk events provide widget coordinates with a coordinate system with an origin in the top left corner of the widget.</li>
<li>Cairo on the other hand works with a coordinate system that has an origin in the lower left corner.</li>
<li>Using the widget height and width, these can be easily translated to normalized coordinates.</li>
<li>To determine the corresponding PLplot coordinates inside our data grid, we feed the normalized Cairo coordinates to PLplot&rsquo;s <code>calc_world</code> function.</li>
</ol>


<p>Using this information we can then properly set up our methods that deal with the mouse events.
Basically, while the mouse button is pressed in and the cursor is moved around, a selection box will be shown (look at the call to <code>rectangle</code> in <code>on_draw</code>), that will be constrained to the data grid, by setting appropriate limits to the drawing starting point and dimensions of our box. Furthermore, we do not allow the box to be drawn when the the button press event is outside of this box.
When the mouse button is released, the box is removed from the widget but the <code>signal_select_region</code> is emitted with the PLplot coordinates of the press and release events, resulting in a call to <code>on_select_region</code>.</p>

<h1>Testing our PLplotDrawingArea widget</h1>

<p>In order to demonstrate the capabilities of this widget, I have written a very basic program that tries to emulate my example from my <a href="http://tschoonj.github.io/blog/2013/07/22/exporting-and-printing-a-gtkextra-plot-canvas/">previous post on GtkExtra printing and exporting</a>. However, I have added two extra capabilities: the possibility to zoom in with the selection box and window resizing.</p>

<p>The test program is an instance of my class called PLplotWindow, which in turn derives from Gtk::Window, and contains only a few member variables corresponding to the buttons and our PLplot drawing area, as well as a Gtk::Grid instance to organize them into the window.</p>

<p>Several methods were added to handle the button click signals that allow to export and print the plot, as well as to quit the app. The code to print and export the plot is basically a literal translation of the corresponding functions in my GtkExtra post from C to C++ and will not be covered here.</p>

<p>More interestingly is the <code>on_plplot_drawing_area_double_click</code> method, which deals with a problem we have not addressed so far: after zooming in on the plot, what if we want to see to the full data range again? I had not added a method for this to our PLplotDrawingArea class (though I could have), so we have to address this issue here. This simple method consists of the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">PLplotWindow</span><span class="o">::</span><span class="n">on_plplot_drawing_area_double_click</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">*</span><span class="n">event</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">GDK_2BUTTON_PRESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_region</span><span class="p">(</span><span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">,</span> <span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the libsigc++ slot prototype for <code>signal_button_press_event</code> does not provide these 4 double variables, we have to provide them when we connect the signal to our handler using <code>sigc::bind</code> in the constructor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">signal_button_press_event</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span>
</span><span class='line'>      <span class="n">sigc</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PLplotWindow</span><span class="o">::</span><span class="n">on_plplot_drawing_area_double_click</span><span class="p">),</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">()),</span> <span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">max_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">())));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The constructor also contains our signal handler for PLplotDrawingArea&rsquo;s <code>signal_select_region</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">signal_select_region</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span>
</span><span class='line'>     <span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="n">plplot_drawing_area</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">set_region</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>As stated before, we simply make use of our <code>set_region</code> method here which takes care of everything.</p>

<p>One last thing I feel is worth showing here is the following excerpt from the constructor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">set_default_size</span><span class="p">(</span><span class="mi">720</span><span class="p">,</span> <span class="mi">580</span><span class="p">);</span>
</span><span class='line'><span class="n">Gdk</span><span class="o">::</span><span class="n">Geometry</span> <span class="n">geometry</span><span class="p">;</span>
</span><span class='line'><span class="n">geometry</span><span class="p">.</span><span class="n">min_aspect</span> <span class="o">=</span> <span class="n">geometry</span><span class="p">.</span><span class="n">max_aspect</span> <span class="o">=</span> <span class="kt">double</span><span class="p">(</span><span class="mi">720</span><span class="p">)</span><span class="o">/</span><span class="kt">double</span><span class="p">(</span><span class="mi">580</span><span class="p">);</span>
</span><span class='line'><span class="n">set_geometry_hints</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="n">geometry</span><span class="p">,</span> <span class="n">Gdk</span><span class="o">::</span><span class="n">HINT_ASPECT</span><span class="p">);</span>
</span><span class='line'><span class="n">set_title</span><span class="p">(</span><span class="s">&quot;PLplot Gtkmm DrawingArea example&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_hexpand</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_vexpand</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part ensures that no matter how the window is resized, the aspect ratio is set to 720/580.
For this to work properly it is crucial that the drawing area is allowed to expand in both directions. Upon a resize, the plot will then be updated accordingly by the <code>on_draw</code> method.</p>

<p>I will conclude this section with a screenshot of the graphical user interface:</p>

<p><img class="center" src="http://yeangpeng.tech/images/plplot-test.png"></p>

<p>Feel free to try it for yourself using the following steps:</p>

<ol>
<li>git clone git@gist.github.com:/c40bb9cca6719478f000.git plplot-test</li>
<li>cd plplot-test</li>
<li>autoreconf -i</li>
<li>./configure</li>
<li>make</li>
<li>./plplot-test</li>
<li>That&rsquo;s it! Start fooling around with the selection box and resizing&hellip;</li>
</ol>


<p>The full gist follows after the conclusions.</p>

<h1>Conclusions</h1>

<p>Based on the work I have put into this for the last couple of days I would say it is a very promising method of bringing high quality scientific plotting into Gtk/Gtkmm. Obviously the code I shared is very simple and needs a lot more functionality in order to become truly useful for a large audience. However the main problem is finding the time to write all the required methods that wrap the functions of PLplot that are needed, which is not necessarily a hard thing to do. Ideally, this would be done in Gtk+ instead of Gtkmm as it would open the code to usage from all languages that have bindings to Gtk+ through introspection. Extending classes in Gtk+ is really hard though (which is why almost no one does it), but trivial in Gtkmm&hellip;</p>

<p>Anyway, if I ever decide to turn this into a real library, you will read about it here.</p>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotDrawingArea.h'></script>
<noscript><pre><code>#ifndef PLPLOTDRAWINGAREA_H
#define PLPLOTDRAWINGAREA_H

#include &lt;gtkmm/drawingarea.h&gt;
#include &lt;plstream.h&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

typedef sigc::signal&lt;void, double, double, double, double &gt; type_signal_select_region;

class PLplotDrawingArea : public Gtk::DrawingArea {
private:
  std::vector&lt;PLFLT&gt; x;
  std::vector&lt;PLFLT&gt; y;
  std::string x_title;
  std::string y_title;
  std::string plot_title;
  double start_event[2];
  double start_cairo[2];
  double end_event[2];
  double end_cairo[2];
  bool selecting;
  plstream *pls;
  double x_pl_range[2];
  double y_pl_range[2];
  double x_cr_range[2];
  double y_cr_range[2];
protected:
  //our handler for the on_draw signal
  virtual bool on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr);
  // This is the default handler for the signal signal_select_region().
  virtual void on_select_region(double xmin, double xmax, double ymin, double ymax);
  bool on_button_press_event(GdkEventButton *event);
  bool on_button_release_event(GdkEventButton *event);
  bool on_motion_notify_event (GdkEventMotion *event);
  type_signal_select_region _signal_select_region;

public:
  PLplotDrawingArea(
    const std::vector&lt;PLFLT&gt; &amp;x,
    const std::vector&lt;PLFLT&gt; &amp;y,
    const std::string &amp;x_title,
    const std::string &amp;y_title,
    const std::string &amp;plot_title
  );
  void convert_plplot_to_cairo_coordinates(
    double x_pl, double y_pl,
    double &amp;x_cr, double &amp;y_cr);
  virtual ~PLplotDrawingArea() {
    if (pls)
      delete pls;
  }

  type_signal_select_region signal_select_region() {
    return _signal_select_region;
  }

  void set_region(double xmin, double xmax, double ymin, double ymax);

  void draw_plot(const Cairo::RefPtr&lt;Cairo::Context&gt; &amp;cr, plstream *_pls, int width, int height);
};
#endif
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotDrawingArea.cpp'></script>
<noscript><pre><code>#include &quot;PLplotDrawingArea.h&quot;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;gdkmm/general.h&gt;
#include &lt;cmath&gt;

PLplotDrawingArea::PLplotDrawingArea(
  const std::vector&lt;PLFLT&gt; &amp;_x,
  const std::vector&lt;PLFLT&gt; &amp;_y,
  const std::string &amp;_x_title,
  const std::string &amp;_y_title,
  const std::string &amp;_plot_title
) : x(_x),
    y(_y),
    x_title(_x_title),
    y_title(_y_title),
    plot_title(_plot_title),
    start_event{-1.0, -1.0},
    start_cairo{-1.0, -1.0},
    end_event{-1.0, -1.0},
    end_cairo{-1.0, -1.0},
    selecting(false),
    pls(0),
    x_pl_range{*(x.begin()), *(x.end()-1)},
    y_pl_range{*std::min_element(y.begin(), y.end()),
               *std::max_element(y.begin(), y.end())}
     {
  add_events(Gdk::POINTER_MOTION_MASK |
             Gdk::BUTTON_PRESS_MASK |
             Gdk::BUTTON_RELEASE_MASK);

  //connect our default signal handler
  this-&gt;signal_select_region().connect(sigc::mem_fun(*this,
             &amp;PLplotDrawingArea::on_select_region));
}

void PLplotDrawingArea::on_select_region(double xmin, double xmax, double ymin, double ymax) {
  //this function does nothing
  //it is designed to be overridden by a derived class
}


void PLplotDrawingArea::set_region(double xmin, double xmax, double ymin, double ymax) {
  if (xmin == xmax &amp;&amp; ymin == ymax) {
    //due to signal propagation, this function will actually be called twice on a double-click event,
    //the second time after the plot has already been resized to its normal geometry
    //this condition avoids the warning message...
    return;
  }
  if (xmin &gt;= xmax || ymin &gt;= ymax ||
      xmin &lt; *(x.begin()) || xmax &gt; *(x.end()-1) ||
      ymin &lt; *std::min_element(y.begin(), y.end()) ||
      ymax &gt; *std::max_element(y.begin(), y.end())) {
    g_warning(&quot;PLplotDrawingArea::set_region(): Invalid arguments&quot;);
    return;
  }
  x_pl_range[0] = xmin;
  x_pl_range[1] = xmax;
  y_pl_range[0] = ymin;
  y_pl_range[1] = ymax;

  this-&gt;get_window()-&gt;invalidate(true);
}

bool PLplotDrawingArea::on_button_press_event(GdkEventButton *event) {
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  start_event[0] = event-&gt;x;
  start_event[1] = event-&gt;y;
  start_cairo[0] = event-&gt;x;
  start_cairo[1] = height - 1.0 * event-&gt;y;
  end_event[0] = -1.0;
  end_event[1] = -1.0;
  end_cairo[0] = -1.0;
  end_cairo[1] = -1.0;

  //check if the starting coordinates are valid
  if (start_cairo[0] &lt; x_cr_range[0] ||
      start_cairo[0] &gt; x_cr_range[1] ||
      start_cairo[1] &lt; y_cr_range[0] ||
      start_cairo[1] &gt; y_cr_range[1]) {
    g_warning(&quot;PLplotDrawingArea::on_button_press_event(): Invalid starting position in on_button_press_event&quot;);
    selecting = false;
    return true;
  }

  this-&gt;get_window()-&gt;invalidate(true);

  selecting = true;

  return false;
}

bool PLplotDrawingArea::on_button_release_event(GdkEventButton *event) {
  if (!selecting)
    return true;

  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  end_event[0] = event-&gt;x;
  end_event[1] = event-&gt;y;
  end_cairo[0] = event-&gt;x;
  end_cairo[1] = height - 1.0 * event-&gt;y;

  //make sure we stay within the plot while selecting
  if (end_cairo[0] &gt; start_cairo[0]) {
    //this 1E-10 subtraction is necessary to ensure calc_world works properly
    //when dragging a box that touches the right axis.
    end_cairo[0] = MIN(end_cairo[0], x_cr_range[1] - 1E-10);
  }
  else if (end_cairo[0] &lt; start_cairo[0]) {
    end_cairo[0] = MAX(end_cairo[0], x_cr_range[0]);
  }

  if (end_cairo[1] &gt; start_cairo[1]) {
    end_cairo[1] = MIN(end_cairo[1], y_cr_range[1]);
  }
  else if (end_cairo[1] &lt; start_cairo[1]) {
    end_cairo[1] = MAX(end_cairo[1], y_cr_range[0]);
  }

  selecting = false;

  //emit signal!
  //prepare plplot coordinates
  //inspired by https://www.mail-archive.com/plplot-devel@lists.sourceforge.net/msg03079.html
  double start_cairo_norm[2] = {start_cairo[0]/width, start_cairo[1]/height};
  double end_cairo_norm[2] = {end_cairo[0]/width, end_cairo[1]/height};

  double start_plplot[2];
  double end_plplot[2];
  int index;

  //get the plot coordinates corresponding to the cairo coordinates
  pls-&gt;calc_world(start_cairo_norm[0], start_cairo_norm[1],
                  start_plplot[0], start_plplot[1], index);
  pls-&gt;calc_world(end_cairo_norm[0], end_cairo_norm[1],
                  end_plplot[0], end_plplot[1], index);

  double start_plplot_def[2];
  double end_plplot_def[2];

  //ensure that the coordinates are within the extremes based on the x and y vectors
  //in case of the full view, due to precision errors, the extremes calculated based on calc_world
  //are actually slightly outside of these data extremes, meaning that it&#39;s not possible to drag the selection
  //along the plot grid
  start_plplot_def[0] = MAX(MIN(start_plplot[0], end_plplot[0]), *(x.begin()));
  start_plplot_def[1] = MAX(MIN(start_plplot[1], end_plplot[1]), *std::min_element(y.begin(), y.end()));
  end_plplot_def[0] = MIN(MAX(start_plplot[0], end_plplot[0]), *(x.end()-1));
  end_plplot_def[1] = MIN(MAX(start_plplot[1], end_plplot[1]), *std::max_element(y.begin(), y.end()));

  this-&gt;get_window()-&gt;invalidate(true);

  _signal_select_region.emit(start_plplot_def[0], end_plplot_def[0], start_plplot_def[1], end_plplot_def[1]);

  return true;
}

bool PLplotDrawingArea::on_motion_notify_event (GdkEventMotion *event) {
  if (!selecting)
    return true;

  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  end_event[0] = event-&gt;x;
  end_event[1] = event-&gt;y;
  end_cairo[0] = event-&gt;x;
  end_cairo[1] = height - 1.0 * event-&gt;y;

  //make sure we stay within the plot while selecting
  if (end_cairo[0] &gt; start_cairo[0]) {
    end_cairo[0] = MIN(end_cairo[0], x_cr_range[1]);
  }
  else if (end_cairo[0] &lt; start_cairo[0]) {
    end_cairo[0] = MAX(end_cairo[0], x_cr_range[0]);
  }

  if (end_cairo[1] &gt; start_cairo[1]) {
    end_cairo[1] = MIN(end_cairo[1], y_cr_range[1]);
  }
  else if (end_cairo[1] &lt; start_cairo[1]) {
    end_cairo[1] = MAX(end_cairo[1], y_cr_range[0]);
  }

  this-&gt;get_window()-&gt;invalidate(true);

  return true;
}

void PLplotDrawingArea::draw_plot(const Cairo::RefPtr&lt;Cairo::Context&gt; &amp;cr, plstream *_pls, int width, int height) {
  _pls-&gt;sdev(&quot;extcairo&quot;);
  _pls-&gt;spage(0.0, 0.0, width, height, 0, 0);
  _pls-&gt;init();

  Gdk::RGBA color = get_style_context()-&gt;get_color();
  Gdk::Cairo::set_source_rgba(cr, color);
  _pls-&gt;cmd(PLESC_DEVINIT, cr-&gt;cobj());
  _pls-&gt;col0(0);

  _pls-&gt;env(x_pl_range[0], x_pl_range[1],
            y_pl_range[0], y_pl_range[1],
            0, 0);

  _pls-&gt;lab(x_title.c_str(), y_title.c_str(), plot_title.c_str());
  _pls-&gt;col0(1);
  _pls-&gt;line(x.size(), &amp;x[0], &amp;y[0]);

  return;
}

bool PLplotDrawingArea::on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr) {
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  if (pls)
    delete pls;
  pls = new plstream;

  draw_plot(cr, pls, width, height);

  if (selecting &amp;&amp;
      start_cairo[0] &gt;= 0.0 &amp;&amp;
      start_cairo[1] &gt;= 0.0 &amp;&amp;
      end_cairo[0] &gt;= 0.0 &amp;&amp;
      end_cairo[1] &gt;= 0.0) {
    cr-&gt;set_line_width(2);
    cr-&gt;set_source_rgb(0, 0, 0);
    cr-&gt;rectangle(MIN(start_cairo[0], end_cairo[0]),
                  MIN(start_cairo[1], end_cairo[1]),
                  fabs(end_cairo[0] - start_cairo[0]),
                  fabs(end_cairo[1] - start_cairo[1]));
    cr-&gt;stroke();
  }

  convert_plplot_to_cairo_coordinates(x_pl_range[0], y_pl_range[0],
                                      x_cr_range[0], y_cr_range[0]);
  convert_plplot_to_cairo_coordinates(x_pl_range[1], y_pl_range[1],
                                      x_cr_range[1], y_cr_range[1]);
  return true;
}

void PLplotDrawingArea::convert_plplot_to_cairo_coordinates(
     double x_pl, double y_pl,
     double &amp;x_cr, double &amp;y_cr) {
  //inspired by http://www.mail-archive.com/plplot-devel@lists.sourceforge.net/msg02383.html
  //but the last equation was incorrect and is fixed here
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();
  double nxmin, nxmax, nymin, nymax;
  double wxmin, wxmax, wymin, wymax;

  pls-&gt;gvpd(nxmin, nxmax, nymin, nymax);
  pls-&gt;gvpw(wxmin, wxmax, wymin, wymax);

  double xmin = width * nxmin;
  double xmax = width * nxmax;
  double ymin = height * nymin;
  double ymax = height * nymax;

  x_cr = xmin + ((xmax - xmin) * ((x_pl - wxmin) / (wxmax - wxmin)));
  y_cr = ymin + ((ymax - ymin) * ((y_pl - wymin) / (wymax - wymin)));
}
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotWindow.h'></script>
<noscript><pre><code>#ifndef PLPLOTWINDOW_H
#define PLPLOTWINDOW_H

#include &lt;gtkmm/window.h&gt;
#include &lt;gtkmm/grid.h&gt;
#include &lt;gtkmm/buttonbox.h&gt;
#include &lt;gtkmm/button.h&gt;
#include &quot;PLplotDrawingArea.h&quot;
#include &lt;plstream.h&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;gtkmm/printcontext.h&gt;


class PLplotWindow : public Gtk::Window {
private:
  PLplotDrawingArea plplot_drawing_area;
  bool on_plplot_drawing_area_double_click(GdkEventButton *event,
    double xmin, double xmax, double ymin, double ymax);
  Gtk::Grid grid;
  Gtk::Button print_button;
  Gtk::Button saveas_button;
  Gtk::Button quit_button;
  Gtk::ButtonBox buttons;
  void on_quit_button_clicked() {
    get_application()-&gt;remove_window(*this);
    return;
  }
  void on_saveas_button_clicked();
  void on_print_button_clicked();
  void on_draw_page(const Glib::RefPtr&lt;Gtk::PrintContext&gt;&amp; context, int page_nr);

public:
  PLplotWindow(std::vector&lt;PLFLT&gt; &amp;x, std::vector&lt;PLFLT&gt; &amp;y,
    std::string x_title = &quot;X-axis&quot;, std::string y_title = &quot;Y-axis&quot;,
    std::string plot_title = &quot;&quot;);
  virtual ~PLplotWindow() {}


};



#endif
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotWindow.cpp'></script>
<noscript><pre><code>#include &quot;PLplotWindow.h&quot;
#include &lt;gtkmm/printsettings.h&gt;
#include &lt;gtkmm/pagesetup.h&gt;
#include &lt;gtkmm/printoperation.h&gt;
#include &lt;gtkmm/filechooserdialog.h&gt;

bool PLplotWindow::on_plplot_drawing_area_double_click(GdkEventButton *event,
  double xmin, double xmax, double ymin, double ymax) {
  if (event-&gt;type == GDK_2BUTTON_PRESS) {
    plplot_drawing_area.set_region(xmin, xmax, ymin, ymax);
  }
  return false;
}

PLplotWindow::PLplotWindow(std::vector&lt;PLFLT&gt; &amp;x, std::vector&lt;PLFLT&gt; &amp;y,
    std::string x_title, std::string y_title,
    std::string plot_title) : plplot_drawing_area(x, y, x_title,
      y_title, plot_title), print_button(&quot;Print&quot;), saveas_button(&quot;Save as&quot;),
      quit_button(&quot;Quit&quot;), buttons(Gtk::ORIENTATION_HORIZONTAL) {

  set_default_size(720, 580);
  //sadly the fixed aspect ratio does not work properly on OS X
  //see https://bugzilla.gnome.org/show_bug.cgi?id=723859
  //I submitted a patch for this...
  Gdk::Geometry geometry;
  geometry.min_aspect = geometry.max_aspect = double(720)/double(580);
  set_geometry_hints(*this, geometry, Gdk::HINT_ASPECT);
  set_title(&quot;PLplot Gtkmm DrawingArea example&quot;);
  //resize on select
  //signal_select_region&#39;s default handler doesnt do anything so
  //in order for the selection box to do something at all, two options are available:
  //1) derive PLplotDrawingArea and define your own on_select_region method
  //2) if using an instance of PLplotDrawingArea, connect a signal to signal_select_region, this is done here
  //both options are encouraged to use PLplotDrawingArea::set_region, possibly combined with further calls...
  plplot_drawing_area.signal_select_region().connect(sigc::mem_fun(plplot_drawing_area, &amp;PLplotDrawingArea::set_region));

  //the double click event is not handled at all by PLplotDrawingArea (although I could...)
  plplot_drawing_area.signal_button_press_event().connect(sigc::bind(sigc::mem_fun(*this, &amp;PLplotWindow::on_plplot_drawing_area_double_click), *(x.begin()), *(x.end()-1), *std::min_element(y.begin(), y.end()), *std::max_element(y.begin(), y.end())));

  quit_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_quit_button_clicked));
  print_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_print_button_clicked));
  saveas_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_saveas_button_clicked));

  buttons.pack_start(print_button);
  buttons.pack_start(saveas_button);
  buttons.pack_start(quit_button);
  buttons.set_layout(Gtk::BUTTONBOX_CENTER);
  buttons.set_spacing(10);
  buttons.set_vexpand(false);
  buttons.set_hexpand(true);

  plplot_drawing_area.set_hexpand(true);
  plplot_drawing_area.set_vexpand(true);

  grid.attach(buttons, 0, 0, 1, 1);
  grid.attach(plplot_drawing_area, 0, 1, 1, 1);
  grid.set_column_spacing(5);
    grid.set_row_spacing(5);
    grid.set_row_homogeneous(false);
    grid.set_column_homogeneous(false);

  add(grid);
  set_border_width(10);
  grid.show_all();
  //plplot_drawing_area.show();

}


void PLplotWindow::on_draw_page(const Glib::RefPtr&lt;Gtk::PrintContext&gt;&amp; context, int page_nr) {
  ::Cairo::RefPtr&lt; ::Cairo::Context&gt; cr = context-&gt;get_cairo_context();

  plstream pls;
  plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);
}

void PLplotWindow::on_print_button_clicked() {
  //print settings
  Glib::RefPtr&lt;Gtk::PrintSettings&gt; print_settings = Gtk::PrintSettings::create();
  print_settings-&gt;set_orientation(Gtk::PAGE_ORIENTATION_LANDSCAPE);
  print_settings-&gt;set_paper_size(Gtk::PaperSize(Gtk::PAPER_NAME_A4));

  Glib::RefPtr&lt;Gtk::PageSetup&gt; page_setup = Gtk::PageSetup::create();
  page_setup-&gt;set_orientation(Gtk::PAGE_ORIENTATION_LANDSCAPE);
  page_setup-&gt;set_paper_size_and_default_margins(Gtk::PaperSize(Gtk::PAPER_NAME_A4));

  Glib::RefPtr&lt;Gtk::PrintOperation&gt; operation = Gtk::PrintOperation::create();
  operation-&gt;set_print_settings(print_settings);
  operation-&gt;set_default_page_setup(page_setup);
  operation-&gt;set_show_progress(true);
  operation-&gt;set_track_print_status(true);
  operation-&gt;set_use_full_page(true);
  operation-&gt;signal_draw_page().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_draw_page));
  operation-&gt;set_n_pages(1);

  if (Gtk::PRINT_OPERATION_RESULT_APPLY != operation-&gt;run(Gtk::PRINT_OPERATION_ACTION_PRINT_DIALOG, *this)) {
    //error handling
  }

  return;
}

void PLplotWindow::on_saveas_button_clicked() {
  Gtk::FileChooserDialog dialog(*this, &quot;Save as&quot;, Gtk::FILE_CHOOSER_ACTION_SAVE);
  dialog.add_button(&quot;_Cancel&quot;, Gtk::RESPONSE_CANCEL);
    dialog.add_button(&quot;Select&quot;, Gtk::RESPONSE_OK);
  dialog.set_do_overwrite_confirmation(true);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_eps = Gtk::FileFilter::create();
  filter_eps-&gt;add_pattern(&quot;*.eps&quot;);
  filter_eps-&gt;set_name(&quot;EPS&quot;);
  dialog.add_filter(filter_eps);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_png = Gtk::FileFilter::create();
  filter_png-&gt;add_pattern(&quot;*.png&quot;);
  filter_png-&gt;set_name(&quot;PNG&quot;);
  dialog.add_filter(filter_png);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_pdf = Gtk::FileFilter::create();
  filter_pdf-&gt;add_pattern(&quot;*.pdf&quot;);
  filter_pdf-&gt;set_name(&quot;PDF&quot;);
  dialog.add_filter(filter_pdf);

  if (dialog.run() == Gtk::RESPONSE_OK) {
    std::string filename = dialog.get_filename();
    Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_selected = dialog.get_filter();
    if (filter_selected-&gt;get_name() == &quot;EPS&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.eps&quot;) != 0)
                filename += &quot;.eps&quot;;

      Cairo::RefPtr&lt;Cairo::PsSurface&gt; surface = Cairo::PsSurface::create(filename, 842, 595);
      surface-&gt;set_eps(true);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      cr-&gt;show_page();
    }
    else if (filter_selected-&gt;get_name() == &quot;PNG&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.png&quot;) != 0)
                filename += &quot;.png&quot;;

      Cairo::RefPtr&lt;Cairo::ImageSurface&gt; surface = Cairo::ImageSurface::create(Cairo::FORMAT_ARGB32, 842, 595);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      surface-&gt;write_to_png(filename);
    }
    else if (filter_selected-&gt;get_name() == &quot;PDF&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.pdf&quot;) != 0)
                filename += &quot;.pdf&quot;;

      Cairo::RefPtr&lt;Cairo::PdfSurface&gt; surface = Cairo::PdfSurface::create(filename, 842, 595);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      cr-&gt;show_page();
    }
  }
  return;
}
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=main.cpp'></script>
<noscript><pre><code>#include &lt;gtkmm/application.h&gt;
#include &lt;glibmm/miscutils.h&gt;
#include &lt;glib.h&gt;
#include &quot;PLplotWindow.h&quot;
#include &lt;valarray&gt;



int main(int argc, char **argv) {
    Glib::set_application_name(&quot;plplot-test&quot;);
#if defined(G_OS_WIN32)
  //windows requires a bit more work. This example sets the PLPLOT_LIB environment variable
  //to ensure the PLplot data files are found at runtime
    gchar *installation_dir = g_win32_get_package_installation_directory_of_module(NULL);
    std::string path_to_plplot(Glib::build_filename(installation_dir, &quot;Share&quot;, &quot;plplot&quot;));
    std::cout &lt;&lt; &quot;path to plplot: &quot; &lt;&lt; path_to_plplot &lt;&lt; std::endl;
    Glib::setenv(&quot;PLPLOT_LIB&quot;, path_to_plplot, true);
    g_free(installation_dir);
#endif
    Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, &quot;eu.tomschoonjans.plplot&quot;);

  //valarrays are underestimated IMHO
  std::valarray&lt;PLFLT&gt; x_va(1000), y_va(1000);
  for (unsigned int i = 0 ; i &lt; 1000 ; i++) {
    x_va[i] = 4*M_PI*i/999;
  }
  y_va = sin(x_va);

  std::vector&lt;PLFLT&gt; x(std::begin(x_va), std::end(x_va)),
    y(std::begin(y_va), std::end(y_va));
  std::string x_title(&quot;x&quot;), y_title(&quot;y = sinx(x)&quot;);

    PLplotWindow window(x, y, x_title, y_title, &quot;PLplotDrawingArea demonstration&quot;);

    return app-&gt;run(window);
}
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=Makefile.am'></script>
<noscript><pre><code>bin_PROGRAMS = plplot-test
plplot_test_SOURCES = main.cpp \
                      PLplotWindow.h \
                      PLplotWindow.cpp \
                      PLplotDrawingArea.h \
                      PLplotDrawingArea.cpp
plplot_test_CPPFLAGS= $(plplotcxx_CFLAGS) $(gtkmm_CFLAGS)
plplot_test_LDADD = $(plplotcxx_LIBS) $(gtkmm_LIBS)
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=configure.ac'></script>
<noscript><pre><code>AC_INIT([plplot-blog],[0.1],[tom.schoonjans@me.com],,[https://tschoonj.github.io])
AC_PREREQ([2.60])
AC_CONFIG_SRCDIR([main.cpp])
AC_CONFIG_AUX_DIR([build-aux])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_CANONICAL_HOST


#m4_pattern_allow([AS_TR_SH])
AC_CONFIG_MACRO_DIR([.])

AC_USE_SYSTEM_EXTENSIONS
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])


AC_PROG_CC
if test `AS_BASENAME([$CC])` = $CC ; then
  AC_CHECK_PROG(CC_FULL, [$CC], $CC, [none])
  #this next line may never be reached...
  if test x$CC_FULL = &quot;xnone&quot; ; then
          AC_MSG_ERROR([no C compiler was found on the system.])
  fi
fi
AM_PROG_CC_C_O


AC_PROG_CXX
if test `AS_BASENAME([$CXX])` = $CXX ; then
  AC_CHECK_PROG(CXX_FULL, [$CXX], $CXX, [none])
  #this next line may never be reached...
  if test x$CXX_FULL = &quot;xnone&quot; ; then
          AC_MSG_ERROR([no C++ compiler was found on the system.])
  fi
fi

AX_CXX_COMPILE_STDCXX_11(ext, mandatory)

LDFLAGS_EXTRA=&quot;&quot;
OS_WINDOWS=0
OS_WINDOWS_32=0
OS_WINDOWS_64=0

case &quot;$host&quot; in
    i686-*mingw*)
        OS_WINDOWS_32=1
        OS_WINDOWS=1
        ;;
    x86_64-*mingw*)
        OS_WINDOWS_64=1
        OS_WINDOWS=1
        ;;
esac

AC_SUBST(WINDRES_ARCH)

AC_SUBST(OS_WINDOWS)
AM_CONDITIONAL([OS_WINDOWS],[test x$OS_WINDOWS = x1])
AC_SUBST(OS_WINDOWS_32)
AM_CONDITIONAL([OS_WINDOWS_32],[test x$OS_WINDOWS_32 = x1])
AC_SUBST(OS_WINDOWS_64)
AM_CONDITIONAL([OS_WINDOWS_64],[test x$OS_WINDOWS_64 = x1])

#look for xraylib
#initialize pkg-config
PKG_PROG_PKG_CONFIG


#search for xraylib and other modules
PKG_CHECK_MODULES([gtkmm],gtkmm-3.0 &gt;= 3.12.0)
PKG_CHECK_MODULES([plplotcxx], [plplot-c++], ,
 [PKG_CHECK_MODULES([plplotcxx], [plplotd-c++])])

#check for the extcairo device
result=
AC_MSG_CHECKING([for plplot extcairo device])
ac_save_CFLAGS=&quot;$CFLAGS&quot;
CFLAGS=$plplotcxx_CFLAGS
AC_LANG_PUSH([C])
AC_TRY_COMPILE([
        #include &lt;plDevs.h&gt;
],[
#ifndef PLD_extcairo
  #error
#endif
],[
  result=yes
  AC_DEFINE([HAVE_EXTCAIRO], [], [extcairo found])
],[result=no])
AC_MSG_RESULT([$result])
if test x$result = xno ; then
  AC_MSG_ERROR([plplot must be built with the extcairo device!])
fi
AC_LANG_POP
CFLAGS=&quot;$ac_save_CFLAGS&quot;





AC_CONFIG_FILES([Makefile])
AC_CONFIG_HEADERS([config.h])



AC_OUTPUT
</code></pre></noscript></div>




<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=ax_cxx_compile_stdcxx_11.m4'></script>
<noscript><pre><code># ============================================================================
#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html
# ============================================================================
#
# SYNOPSIS
#
#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])
#
# DESCRIPTION
#
#   Check for baseline language coverage in the compiler for the C++11
#   standard; if necessary, add switches to CXXFLAGS to enable support.
#
#   The first argument, if specified, indicates whether you insist on an
#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
#   -std=c++11).  If neither is specified, you get whatever works, with
#   preference for an extended mode.
#
#   The second argument, if specified &#39;mandatory&#39; or if left unspecified,
#   indicates that baseline C++11 support is required and that the macro
#   should error out if no mode with that support is found.  If specified
#   &#39;optional&#39;, then configuration proceeds regardless, after defining
#   HAVE_CXX11 if and only if a supporting mode is found.
#
# LICENSE
#
#   Copyright (c) 2008 Benjamin Kosnik &lt;bkoz@redhat.com&gt;
#   Copyright (c) 2012 Zack Weinberg &lt;zackw@panix.com&gt;
#   Copyright (c) 2013 Roy Stogner &lt;roystgnr@ices.utexas.edu&gt;
#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov &lt;sokolov@google.com&gt;
#
#   Copying and distribution of this file, with or without modification, are
#   permitted in any medium without royalty provided the copyright notice
#   and this notice are preserved. This file is offered as-is, without any
#   warranty.

#serial 11

m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [[
  template &lt;typename T&gt;
    struct check
    {
      static_assert(sizeof(int) &lt;= sizeof(T), &quot;not big enough&quot;);
    };

    struct Base {
    virtual void f() {}
    };
    struct Child : public Base {
    virtual void f() override {}
    };

    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;

    int a;
    decltype(a) b;

    typedef check&lt;int&gt; check_type;
    check_type c;
    check_type&amp;&amp; cr = static_cast&lt;check_type&amp;&amp;&gt;(c);

    auto d = a;
    auto l = [](){};
    // Prevent Clang error: unused variable &#39;l&#39; [-Werror,-Wunused-variable]
    struct use_l { use_l() { l(); } };

    // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
    // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function because of this
    namespace test_template_alias_sfinae {
        struct foo {};

        template&lt;typename T&gt;
        using member = typename T::member_type;

        template&lt;typename T&gt;
        void func(...) {}

        template&lt;typename T&gt;
        void func(member&lt;T&gt;*) {}

        void test();

        void test() {
            func&lt;foo&gt;(0);
        }
    }
]])

AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl
  m4_if([$1], [], [],
        [$1], [ext], [],
        [$1], [noext], [],
        [m4_fatal([invalid argument `$1&#39; to AX_CXX_COMPILE_STDCXX_11])])dnl
  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],
        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],
        [$2], [optional], [ax_cxx_compile_cxx11_required=false],
        [m4_fatal([invalid second argument `$2&#39; to AX_CXX_COMPILE_STDCXX_11])])
  AC_LANG_PUSH([C++])dnl
  ac_success=no
  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,
  ax_cv_cxx_compile_cxx11,
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
    [ax_cv_cxx_compile_cxx11=yes],
    [ax_cv_cxx_compile_cxx11=no])])
  if test x$ax_cv_cxx_compile_cxx11 = xyes; then
    ac_success=yes
  fi

  m4_if([$1], [noext], [], [dnl
  if test x$ac_success = xno; then
    for switch in -std=gnu++11 -std=gnu++0x; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS=&quot;$CXXFLAGS&quot;
         CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS=&quot;$ac_save_CXXFLAGS&quot;])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
        ac_success=yes
        break
      fi
    done
  fi])

  m4_if([$1], [ext], [], [dnl
  if test x$ac_success = xno; then
    dnl HP&#39;s aCC needs +std=c++11 according to:
    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
    for switch in -std=c++11 -std=c++0x +std=c++11; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS=&quot;$CXXFLAGS&quot;
         CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS=&quot;$ac_save_CXXFLAGS&quot;])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
        ac_success=yes
        break
      fi
    done
  fi])
  AC_LANG_POP([C++])
  if test x$ax_cxx_compile_cxx11_required = xtrue; then
    if test x$ac_success = xno; then
      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])
    fi
  else
    if test x$ac_success = xno; then
      HAVE_CXX11=0
      AC_MSG_NOTICE([No compiler with C++11 support was found])
    else
      HAVE_CXX11=1
      AC_DEFINE(HAVE_CXX11,1,
                [define if the compiler supports basic C++11 syntax])
    fi

    AC_SUBST(HAVE_CXX11)
  fi
])
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python函数装饰器详解]]></title>
    <link href="http://yeangpeng.tech/blog/2015/06/01/python-decorator/"/>
    <updated>2015-06-01T10:06:22+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/06/01/python-decorator</id>
    <content type="html"><![CDATA[<h3>装饰器简介</h3>

<p>python有着强大的表达式语法和函数特性，其中一个我的最爱便是装饰器。
在设计模式中，装饰器能够在不使用子类的情况下动态的修改函数、方法或类的功能。</p>

<p>当你需要扩展某个函数的功能却不想直接修改这个函数的时候，装饰器就可以派上用场了。
实现装饰器模式有很多种方法，但是python通过强大的语法支持来让这个变得相当容易。</p>

<p>在这篇文章中我将深入讲解Python的函数装饰器，并通过一系列的源码示例来彻底讲清楚这个东西。
所有例子都在Python2.7下运行通过，不过只需要稍作改变就可以运行在Python3上了，
甚至我猜测什么都不用改变都可以的，读者可以自己去试试。</p>

<p>本质上来讲，装饰器是以包装器形式工作的，其实就是在执行目标函数之前或之后加入自己的逻辑，
而不需要改变目标函数本身就可以增强它的功能，也就是说装饰了它。<!--more--></p>

<h3>你需要知道的函数</h3>

<p>在深入讨论之前，有一些基本的概念需要讲明清楚。
在Python中，函数是一等公民，它们就是对象，因此我们可以使用它来做很多事。</p>

<p>1.把函数赋值给某个变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="n">greet_someone</span> <span class="o">=</span> <span class="n">greet</span>
</span><span class='line'><span class="k">print</span> <span class="n">greet_someone</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs: hello John</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.在某个函数内部定义另外一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello &quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">get_message</span><span class="p">()</span><span class="o">+</span><span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">greet</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.函数可以被当做参数传递给另外一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">call_func</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="n">other_name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">other_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">call_func</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.函数返回值可以是其他函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello there!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">get_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs: Hello there!</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.内部函数可以访问包含它的函数的局部变量：</p>

<p>其实就是我们所说的闭包，在构建装饰器的时候这是一个非常有用的模式。
另外还要注意，Python只允许读取外部变量而不允许修改。</p>

<p>观察一下下面的代码，
注意我们是如何通过修改上面实例代码来读取外部函数中的name参数值并返回一个新的函数的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello there &quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">get_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs: Hello there John!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>构造装饰器</h3>

<p>函数装饰器就是已存在函数的一个包装器。我们把上面的这些结合起来就能构建一个装饰器了。</p>

<p>下面例子中我们先构造一个函数来用p标签包装其他函数返回的一个字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">my_get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># &lt;p&gt;Outputs lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是我们的第一个装饰器——一个增强其他函数功能并返回新函数的函数。
为了让get_text函数被p_decorate装饰，我们只需要将get_text作为参数传给后者，
并将结果赋值给一个变量，然后就可以对这个变量函数调用就能实现效果了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs lorem ipsum, John dolor sit amet</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要原来的函数有一个name参数，那么我们调用的时候将这个参数传递给装饰器函数就行了。</p>

<h3>Python的装饰器语法</h3>

<p>Python通过一些语法糖让创建和使用装饰器变得相当简单。
我们并不需要使用语句<code>get_text = p_decorator(get_text)</code>来装饰get_text。
有一个快捷方式可以做到，它会在被装饰函数前面加一层装饰函数。装饰器的名字需要使用@前缀。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@p_decorate</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs &lt;p&gt;lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们再考虑下利用2个其他的函数来装饰我们的get_text函数，在其输出结果上添加一个div和strong标签。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strong_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;strong&gt;{0}&lt;/strong&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">div_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">func_wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们使用原来的语法，那么就得这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">get_text</span> <span class="o">=</span> <span class="n">div_decorate</span><span class="p">(</span><span class="n">p_decorate</span><span class="p">(</span><span class="n">strong_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在python中，你就可以这样来定义了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@div_decorate</span>
</span><span class='line'><span class="nd">@p_decorate</span>
</span><span class='line'><span class="nd">@strong_decorate</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs &lt;div&gt;&lt;p&gt;&lt;strong&gt;lorem ipsum, John dolor sit amet&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面需要注意的是装饰器的顺序，如果顺序不同，输出结果也会不一样。</p>

<h3>装饰方法</h3>

<p>在python中，其实方法就是第一个参数为当前对象的引用的函数而已。
我们同样能够给方法构造装饰器，只需要将self参数放到包装函数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@p_decorate</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个更好的做法是改造我们的装饰器使他们可以作用于函数以及类方法。
可以将*args和**kwargs作为包装器的参数，然后它就能接受任意数量的位置参数和关键字参数了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@p_decorate</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>给装饰器传递参数</h3>

<p>回顾下上面的例子，你会发现例子中的装饰器太过冗余了。
3个装饰器(div_decorate,p_decorate, strong_decorate)拥有相同功能，只是使用了不同的标签包装而已。</p>

<p>我们可以做得更好，为什么不使用一种更加通用的方式，将标签作为参数传递进来呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Outputs &lt;p&gt;Hello John&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>调试被装饰函数</h3>

<p>最后当我们调试被装饰函数时会发现它的名字、模块和文档字符串都发生了改变。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span>
</span><span class='line'><span class="c"># Outputs func_wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们期望的输出应该是get_text，get_text的<strong>name</strong>、<strong>doc</strong> 和 <strong>module</strong>已经被包装函数覆盖了。</p>

<h3>使用functools来解决</h3>

<p>幸运的是python2.5版本以上有了一个functools包可以来解决这个问题。
只需要简单在包装函数上标注@wrap标签即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;returns some text&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span> <span class="c"># get_text</span>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__doc__</span> <span class="c"># returns some text</span>
</span><span class='line'><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__module__</span> <span class="c"># __main__</span>
</span></code></pre></td></tr></table></div></figure>


<p>从结果可以看出get_text函数的属性都恢复正常了。</p>

<h3>哪里使用装饰器</h3>

<p>这篇文章中的例子相对来讲是比较简单的。它能给你的程序带来很大的方便。
一般来讲，装饰器用在需要扩展某个函数行为而又不想改变这个函数本身内容的时候。</p>

<p>我建议你查阅一下Python Decorator库来获取更多非常有用的装饰器。</p>

<h3>更多阅读资源</h3>

<p>下面是一个值得去查看的关于装饰器的其他资源列表：</p>

<ul>
<li><a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator">什么是装饰器?</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">Decorators I: Python装饰器入门</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845">Python Decorators II: 装饰器参数</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=241209">Python Decorators III: 一个基于装饰器的构建系统</a></li>
<li><a href="http://www.amazon.com/gp/product/B006ZHJSIM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006ZHJSIM&amp;linkCode=as2&amp;tag=thcosh00-20">Python装饰器指南 Matt Harrison</a></li>
</ul>


<p>到此为止Python装饰器概率已经介绍完了。我希望你能从中受益，
如果你哈有任何的建议或问题，可以在评论中提出来。祝您编程快乐！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos6上安装Hadoop和HBase]]></title>
    <link href="http://yeangpeng.tech/blog/2015/05/27/hadoop-hbase/"/>
    <updated>2015-05-27T14:01:57+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/05/27/hadoop-hbase</id>
    <content type="html"><![CDATA[<h3>安装前的准备</h3>

<p>操作系统：CentOS 6.5 64位</p>

<p>在linux环境安装Hadoop之前，我们需要使用到ssh，所以要先安装ssh，并且创建一个hadoop用户</p>

<p><strong>备注：</strong> 下面所有的命令中，以#开头的表示是root用户，以$开头的是普通用户</p>

<h4>安装SSH</h4>

<p>先切换到root用户，执行下列步骤</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -qa |grep ssh  #检查是否装了SSH包
</span><span class='line'>yum install openssh-server  #安装ssh
</span><span class='line'>chkconfig --list sshd #检查SSHD是否设置为开机启动
</span><span class='line'>chkconfig --level 2345 sshd on  #如果没设置启动就设置下.
</span><span class='line'>service sshd restart  #重新启动</span></code></pre></td></tr></table></div></figure>


<h4>创建hadoop用户<!--more--></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ su
</span><span class='line'>password:
</span><span class='line'># useradd hadoop
</span><span class='line'># passwd hadoop
</span><span class='line'>New passwd:
</span><span class='line'>Retype new passwd</span></code></pre></td></tr></table></div></figure>


<h4>生成pub-key</h4>

<p>切换到hadoop用户后，执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa
</span><span class='line'>$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'>$ chmod 0600 ~/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>然后确认下是否能正常使用ssh连接</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh localhost</span></code></pre></td></tr></table></div></figure>


<h3>安装JDK1.7</h3>

<p>进入oracle官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>

<p>下载jdk-7u79-linux-x64.gz，然后执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar zxf jdk-7u79-linux-x64.gz
</span><span class='line'>$ ls
</span><span class='line'>jdk1.7.0_79 jdk-7u79-linux-x64.gz
</span><span class='line'>$ su
</span><span class='line'>password:
</span><span class='line'># mv jdk1.7.0_79 /usr/local/
</span><span class='line'># exit</span></code></pre></td></tr></table></div></figure>


<p>打开~/.bashrc文件，写入JAVA_HOME环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export JAVA_HOME=/usr/local/jdk1.7.0_79
</span><span class='line'>export PATH= $PATH:$JAVA_HOME/bin</span></code></pre></td></tr></table></div></figure>


<p>保存刷新下：<code>$ source ~/.bashrc</code></p>

<p>切换到root用户，然后执行下面的语句确保JDK版本更改完成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># alternatives --install /usr/bin/java java /usr/local/jdk1.7.0_79/bin/java 2
</span><span class='line'># alternatives --install /usr/bin/javac javac /usr/local/jdk1.7.0_79/bin/javac 2
</span><span class='line'># alternatives --install /usr/bin/jar jar /usr/local/jdk1.7.0_79/bin/jar 2
</span><span class='line'># alternatives --set java /usr/local/jdk1.7.0_79/bin/java
</span><span class='line'># alternatives --set javac /usr/local/jdk1.7.0_79/bin/javac
</span><span class='line'># alternatives --set jar /usr/local/jdk1.7.0_79/bin/jar</span></code></pre></td></tr></table></div></figure>


<p>最后执行下：<code>java -version</code>看看是不是已经成功安装了JDK7</p>

<h3>安装配置Hadoop</h3>

<h4>下载Hadoophadoop2.6.0下载地址：<a href="http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz">http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz</a></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ su
</span><span class='line'>password:
</span><span class='line'># cd /usr/local
</span><span class='line'># wget http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz
</span><span class='line'># tar xzf hadoop-2.6.0.tar.gz
</span><span class='line'># mv hadoop-2.6.0 hadoop
</span><span class='line'># exit</span></code></pre></td></tr></table></div></figure>


<p>hadoop有很多种模式，本篇我们演示的是伪分布式模式，包括后面的HBase也选择这种模式。</p>

<h4>配置Hadoop环境</h4>

<p>第一步，配置环境变量</p>

<p>打开~/.bashrc文件，写入如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export HADOOP_HOME=/usr/local/hadoop
</span><span class='line'>export HADOOP_MAPRED_HOME=$HADOOP_HOME
</span><span class='line'>export HADOOP_COMMON_HOME=$HADOOP_HOME
</span><span class='line'>export HADOOP_HDFS_HOME=$HADOOP_HOME
</span><span class='line'>export YARN_HOME=$HADOOP_HOME
</span><span class='line'>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
</span><span class='line'>export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
</span><span class='line'>export HADOOP_INSTALL=$HADOOP_HOME</span></code></pre></td></tr></table></div></figure>


<p>然后应用设置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>第二步，hadoop配置文件</p>

<p>hadoop的配置文件都放在"$HADOOP_HOME/etc/hadoop"目录中，
你可以根据自己的需要来修改它们。</p>

<p>在此之前，还需要修改下hadoop-env.sh，更改其中的JAVA_HOME变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/local/hadoop/etc/hadoop/hadoop-env.sh</span></code></pre></td></tr></table></div></figure>


<p>然后修改JAVA_HOME为真实的目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export JAVA_HOME=/usr/local/jdk1.7.0_79</span></code></pre></td></tr></table></div></figure>


<p>接下来我们去到hadoop的配置文件目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd $HADOOP_HOME/etc/hadoop</span></code></pre></td></tr></table></div></figure>


<p>1. 首先打开core-site.xml，写入如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>/usr/local/hadoop/tmp<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2. 然后打开hdfs-site.xml，写入如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.name.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/namenode<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.data.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/datanode<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.permissions<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的文件夹需要我们手动来创建，那么我们创建下就行了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ mkdir -p /home/hadoop/hadoopinfra/hdfs/namenode
</span><span class='line'>$ mkdir -p /home/hadoop/hadoopinfra/hdfs/datanode
</span></code></pre></td></tr></table></div></figure>


<p>3. 然后打开yarn-site.xml文件，写入如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.scheduler.address<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>localhost:54313<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>4. 配置mapred-site.xml，先重命名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ cp mapred-site.xml.template mapred-site.xml
</span></code></pre></td></tr></table></div></figure>


<p>打开mapred-site.xml文件，写入如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>确认Hadoop的安装</h4>

<p>1. NameNode确认</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ cd ~
</span><span class='line'>$ hdfs namenode -format
</span></code></pre></td></tr></table></div></figure>


<p>结果应该类似下面</p>

<pre><code>STARTUP_MSG: Starting NameNode
STARTUP_MSG:   host = centos00/127.0.0.1
STARTUP_MSG:   args = [-format]
STARTUP_MSG:   version = 2.6.0
...
/************************************************************
SHUTDOWN_MSG: Shutting down NameNode at centos00/127.0.0.1
************************************************************/
</code></pre>

<p>2. Hadoop dfs确认</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ start-dfs.sh
</span></code></pre></td></tr></table></div></figure>


<p>结果应该类似下面</p>

<pre><code>Starting namenodes on [localhost]
localhost: starting namenode, logging to ....out
localhost: starting datanode, logging to ....out
Starting secondary namenodes [0.0.0.0]
The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.
RSA key fingerprint is fd:01:fc:f2:53:a0:58:8e:96:9c:5f:f2:6e:5b:69:1a.
Are you sure you want to continue connecting (yes/no)? yes
0.0.0.0: Warning: Permanently added '0.0.0.0' (RSA) to the list of known hosts.
0.0.0.0: starting secondarynamenode, logging to ...
</code></pre>

<p>3. Yarn Srcipt确认</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ start-yarn.sh
</span></code></pre></td></tr></table></div></figure>


<p>结果应该类似下面这样</p>

<pre><code>starting yarn daemons
starting resourcemanager, logging to ....out
localhost: starting nodemanager, logging to ....out
</code></pre>

<p>4. 浏览器访问Hadoop</p>

<p>默认访问Hadoop的端口是50070，在浏览器中打开链接<a href="http://localhost:50070">http://localhost:50070</a>来访问Hadoop服务。</p>

<p>5. 浏览器确认应用集群</p>

<p>默认访问应用集群的端口号是8088，在浏览器中打开链接<a href="http://localhost:8088">http://localhost:8088</a>来确认下。</p>

<h3>安装HBase</h3>

<p>你可以在三种模式下安装HBase：单机模式、伪分布式模式、全分布式模式。
下面我们演示在伪分布式模式下HBase的安装和配置。</p>

<h4>下载HBase</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ su
</span><span class='line'># cd /usr/local/
</span><span class='line'># wget http://apache.fayea.com/hbase/hbase-0.98.12/hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class='line'># tar -zxvf hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class='line'># mv hbase-0.98.12-hadoop2 hbase
</span><span class='line'># chown -R hadoop:hadoop /usr/local/hbase
</span></code></pre></td></tr></table></div></figure>


<h4>配置hbase-site.xml</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>su hadoop
</span><span class='line'>$ cd /usr/local/hbase/conf
</span></code></pre></td></tr></table></div></figure>


<p>然后打开hbase-env.sh文件，修改如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>export JAVA_HOME=/usr/local/jdk1.7.0_79
</span></code></pre></td></tr></table></div></figure>


<p>修改hbase-site.xml文件，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>/home/hadoop/zookeeper<span class="nt">&lt;/value&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>hbase.cluster.distributed<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>编辑/etc/profile，增加HBASE_HOME环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>export HBASE_HOME=/usr/local/hbase
</span><span class='line'>export PATH=$PATH:$HBASE_HOME/bin
</span></code></pre></td></tr></table></div></figure>


<p>应用更改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>source /etc/profile
</span></code></pre></td></tr></table></div></figure>


<p>OK，现在为止，HBase的安装和配置都已经完成了。</p>

<p>现在你可以通过执行start-hbase.sh来启动HBase</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ cd /usr/local/hbase/bin
</span><span class='line'>$ ./start-hbase.sh
</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>jps</code>命令应该可以看到HMaster和HRegionServer这两个进程。类似下面</p>

<pre><code>10941 DataNode
13744 HQuorumPeer
14207 Jps
11126 SecondaryNameNode
11276 ResourceManager
10840 NameNode
13843 HMaster
10016 HRegionServer
11378 NodeManager
</code></pre>

<p>如果没有看到，可以查看日志<code>/usr/local/hbase/logs/hbase-hadoop-master-xx.log</code></p>

<h4>在HDFS中检查HBase目录</h4>

<p>HBase会在HDFS中创建自己的目录，在hadoop目录下面执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ ./bin/hadoop fs -ls /hbase
</span></code></pre></td></tr></table></div></figure>


<p>显示如下</p>

<pre><code>drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/.tmp
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/WALs
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/data
-rw-r--r--   1 hadoop supergroup         42 2015-04-24 16:06 /hbase/hbase.id
-rw-r--r--   1 hadoop supergroup          7 2015-04-24 16:06 /hbase/hbase.version
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/oldWALs
</code></pre>

<p>那么恭喜你，配置成功了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yaml入门笔记]]></title>
    <link href="http://yeangpeng.tech/blog/2015/05/22/yaml-introduce/"/>
    <updated>2015-05-22T13:53:45+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/05/22/yaml-introduce</id>
    <content type="html"><![CDATA[<p><strong>Wiki：</strong></p>

<p>YAML（IPA: /ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达资料序列的格式。
YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。
Clark Evans在2001年在首次发表了这种语言[1] ，
另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。
目前已经有数种编程语言或脚本语言支援（或者说解析）这种语言。</p>

<p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递回缩写。
在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种置标语言），
但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。</p>

<p>最新版本为1.2，官方说明地址： <a href="http://www.yaml.org/spec/1.2/spec.html">http://www.yaml.org/spec/1.2/spec.html</a></p>

<p>使用方式：作为配置文件，数据交换格式，序列化对象存储，测试数据文件，</p>

<p>一个简单的示例：<!--more--></p>

<pre><code>---
receipt:     Oz-Ware Purchase Invoice
date:        2007-08-06
customer:
    given:   Dorothy
    family:  Gale

items:
    - part_no:   A4786
      descrip:   Water Bucket (Filled)
      price:     1.47
      quantity:  4

    - part_no:   E1628
      descrip:   High Heeled "Ruby" Slippers
      price:     100.27
      quantity:  1

bill-to:  &amp;id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Westville
    state:  KS

ship-to:  *id001

specialDelivery:  &gt;
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
...
</code></pre>

<p><strong>基本技巧：</strong></p>

<p>1，列表</p>

<p>使用- 表示，也就是用短杠+空白字符作为起始。</p>

<p>另外还有一种内置格式（inline format）可以选择──用方括号围住，并用逗号+空白区隔（类似JSON的语法）。
比如：shopping: [milk, pumpkin pie, eggs, juice]</p>

<p>2，映射</p>

<pre><code>— # 區塊形式
person:
name: John Smith
age: 33
— # 內置形式
person: {name: John Smith, age: 33}
</code></pre>

<p>3，重复元素</p>

<p>使用&amp;id001先标记，然后后面用*id001指针引用</p>

<pre><code># &amp; 的作用，它表示一个“锚点标记”，其它节点可以使用“*”或“&lt;&lt;: *”来引用它的值
node3: &amp;node3
  a: 001
  b: 002

# * 的作用，指node4的内容与node3完全一致
node4:
  *node3

# &lt;&lt;: * 的作用，指node5的内容包含但不完全相同于node3的值。
node5:
  &lt;&lt;: *node3
  c: 003

#眼部雷射手術之標準程序
---
- step:  &amp;amp;id001                    #定義錨點標籤 &amp;amp;id001
    instrument:      Lasik 2000
    pulseEnergy:     5.4
    pulseDuration:   12
    repetition:      1000
    spotSize:        1mm

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     spotSize:       2mm               # 覆寫"spotSize"鍵值

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     pulseEnergy:    500.0             # 覆寫鍵值
     alert: &amp;gt;                       # 加入其他鍵值
           warn patient of
           audible pop
</code></pre>

<p>4，需要换行书写的字符串，两种方式：</p>

<p>再次强调，字串不需要包在引号之内。</p>

<p>保存新行(Newlines preserved)</p>

<pre><code>poetry: |                                  #譯者注：這是一首著名的五行民謠
  There once was a man from Darjeeling     #這裡曾有一個人來自大吉嶺
  Who got on a bus bound for Ealing        #他搭上一班往伊靈的公車
      It said on the door                  #門上這麼說的
      "Please don't spit on the floor"     #"請勿在地上吐痰"
  So he carefully spat on the ceiling      #所以他小心翼翼的吐在天花板上
</code></pre>

<p>根据设定，前方的引领空白符号（leading white space）必须对齐，以便和其他资料或是行为（如范例中的缩排）明显区分。</p>

<p>折叠新行(Newlines folded)</p>

<pre><code>Wrapped text         #摺疊的文字
will be folded       #將會被收
into a single        #進單一一個
paragraph            #段落

Blank lines denote   #空白的行代表
paragraph breaks     #段落之間的區隔
</code></pre>

<p>和保存新行不同的是，换行字元会被转换成空白字符，空行被转换成换行，而前导空白字符则会被自动消去。上面会变成两行。</p>

<p>5，混合使用：</p>

<p>在列表中使用映射</p>

<pre><code>- {name: John Smith, age: 33}
- name: Mary Smith
  age: 27
</code></pre>

<p>在映射中使用列表</p>

<pre><code>men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
</code></pre>

<p><strong>更多资源：</strong></p>

<p><a href="http://www.yaml.org/">http://www.yaml.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xpath入门笔记]]></title>
    <link href="http://yeangpeng.tech/blog/2015/05/19/xpath-introduce/"/>
    <updated>2015-05-19T14:01:07+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/05/19/xpath-introduce</id>
    <content type="html"><![CDATA[<h3>Wiki</h3>

<p>XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。
XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。
起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。
但是XPath很快的被开发者采用来当作小型查询语言。</p>

<p>W3C网址： <a href="http://www.w3schools.com/XPath/">http://www.w3schools.com/XPath/</a></p>

<h3>表示法</h3>

<p>最常见的XPath表达式是路径表达式（XPath这一名称的另一来源）。</p>

<p>路径表达式是从一个XML节点（当前的上下文节点）到另一个节点、或一组节点的书面步骤顺序。
这些步骤以“／”字符分开，每一步有三个构成成分：<!--more--></p>

<h3>轴描述</h3>

<p>节点测试（用于筛选节点位置和名称）</p>

<p>节点描述（用于筛选节点的属性和子节点特征）</p>

<p>一般情况下，我们使用简写后的语法。虽然完整的轴描述是一种更加贴近人类语言，
利用自然语言的单词和语法来书写的描述方式，但是相比之下也更加罗嗦。</p>

<h3>三种表示法</h3>

<ol>
<li>最简单的XPath如下：</li>
</ol>


<p><code>/A/B/C</code></p>

<p>在这里选择所有符合规矩的C节点：C节点必须是B的子节点（B/C），
同时B节点必须是A的子节点（A/B），而A是这个XML文档的根节点（/A）。
此时的这种描述法类似于磁盘中文件的路径（URI），从盘符开始顺着一级一级的目录最终找到文件。</p>

<ol>
<li>这里还有一个复杂一些的例子，包含了全部构成成分（请详细的看）：</li>
</ol>


<p><code>A//B/*[1]</code></p>

<p>此时选择的元素是：在B节点下的第一个节点（B/<em>[1]），不论节点的名称如何（</em>）；
而B节点必须出现在A节点内，不论和A节点之间相隔几层节点（//B）；
与此同时A节点还必须是当前节点的子节点（A，前边没有/）。</p>

<ol>
<li>最后一个常用的例子，在所有节点下查找：</li>
</ol>


<p><code>//A/B/C/*[2]</code></p>

<h3>轴语法</h3>

<p>在未缩写语法里，两个上述范例可以写为：
<code>
/child::A/child::B/child::C
child::A/descendant-or-self::B/child::node()[1]
</code>
在XPath的每个步骤里，通过完整的轴描述（例如：child或descendant-or-self）进行明确的指定，
然后使用::，它的后面跟着节点测试的内容，例如上面范例所示的A以及node()。</p>

<h3>XPath轴</h3>

<p>轴可定义相对于当前节点的节点集。</p>

<table class="goodtable">
    <tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr>
    <tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr>
    <tr><td>attribute</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child</td><td>选取当前节点的所有子元素</td></tr>
    <tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr>
    <tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr>
    <tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr>
    <tr><td>namespace</td><td>选取当前节点的所有命名空间节点。</td></tr>
    <tr><td>parent</td><td>选取当前节点的父节点。</td></tr>
    <tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr>
    <tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点。</td></tr>
    <tr><td>self</td><td>选取当前节点。</td></tr>
</table>


<p>几个实例讲解：</p>

<table class="goodtable">
    <tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点。</td></tr>
    <tr><td>attribute::lang</td><td>选取当前节点的 lang 属性。</td></tr>
    <tr><td>child::*</td><td>选取当前节点的所有子元素。</td></tr>
    <tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr>
    <tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr>
    <tr><td>descendant::book</td><td>选取当前节点的所有book后代</td></tr>
    <tr><td>ancestor::book</td><td>选择当前节点的所有book先辈</td></tr>
    <tr><td>ancestor-or-self::book</td>选取当前节点的所有book先辈以及当前节点（如果此节点是 book 节点）<td></td></tr>
    <tr><td>child::*/child::price</td><td>选取当前节点的所有price孙节点。</td></tr>
</table>


<h3>XPath 运算符</h3>

<p>下面列出了可用在 XPath 表达式中的运算符：</p>

<table class="goodtable">
    <tr><td>|</td><td>计算两个节点集</td><td>//book | //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr>
    <tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr>
    <tr><td>-</td><td>减法</td><td>6 – 4</td><td>2</td></tr>
    <tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr>
    <tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr>
    <tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>!=</td><td>不等于</td><td>price!=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&lt;</td><td>小于</td><td>price&lt;9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&lt;=</td><td>小于或等于</td><td>price&lt;=9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&gt;</td><td>大于</td><td>price&gt;9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&gt;=</td><td>大于或等于</td><td>price&gt;=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr>
    <tr><td>or</td><td>或</td><td>price=9.80 or price=9.70</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr>
    <tr><td>and</td><td>与</td><td>price&gt;9.00 and price&lt;9.90</td><td>如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr>
</table>


<h3>Xpath函数</h3>

<p>有关数值的函数</p>

<pre><code>----------------------------------------------------------------------------------------------
|fn:number(arg)         |返回参数的数值。参数可以是布尔值、字符串或节点集。例子：number(‘100′)结果：100
|fn:abs(num)            |返回参数的绝对值。例子：abs(3.14)   结果：3.14例子：abs(-3.14)   结果：3.14
|fn:ceiling(num)        |返回大于 num 参数的最小整数。例子：ceiling(3.14)  结果：4
|fn:floor(num)          |返回不大于 num 参数的最大整数。例子：floor(3.14)  结果：3
|fn:round(num)          |把 num 参数舍入为最接近的整数。例子：round(3.14)  结果：3
----------------------------------------------------------------------------------------------
</code></pre>

<p>有关字符串的函数</p>

<pre><code>------------------------------------------------------------------------------------------------------------------------------------------------
|fn:string(arg)                         |返回参数的字符串值。参数可以是数字、逻辑值或节点集。例子：string(314) 结果：”314″
|fn:compare(comp1,comp2,collation)      |如果 comp1 小于 comp2，则返回 -1。类推例子：compare(‘ghi’, ‘ghi’) 结果：0
|fn:concat(string,string,…)             |返回字符串的拼接。例子：concat(‘XPath ‘,’is ‘,’FUN!’) 结果：’XPath is FUN!’
|fn:substring(string,start,len)         |返回从start位置开始的指定长度的子字符串。第一个字符的下标是 1。例子：substring(‘Beatles’,1,4) 结果：’Beat’
|fn:string-length(string)               |返回指定字符串的长度。如果没有 string 参数，则返回当前节点的字符串值的长度。例子：string-length(‘Beatles’) 结果：7
|fn:normalize-space(string)             |删除开头和结尾空白，并把内部所有空白序列替换为一个，然后返回结果。例子：normalize-space(‘ The XML ‘) 结果：’The XML’
|fn:upper-case(string)                  |把 string 参数转换为大写。例子：upper-case(‘The XML’) 结果：’THE XML’
|fn:lower-case(string)                  |把 string 参数转换为小写。例子：lower-case(‘The XML’) 结果：’the xml’
|fn:contains(string1,string2)           |如果 string1 包含 string2，则返回 true，否则返回 false。例子：contains(‘XML’,’XM’) 结果：true
|fn:starts-with(string1,string2)        |如果 string1 以 string2 开始，则返回 true，否则返回 false。例子：starts-with(‘XML’,’X’) 结果：true
|fn:ends-with(string1,string2)          |如果 string1 以 string2 结尾，则返回 true，否则返回 false。例子：ends-with(‘XML’,’X’) 结果：false
|fn:substring-before(string1,string2)   |返回 string2 在 string1 中出现之前的子字符串。例子：substring-before(’12/10′,’/’) 结果：’12’
|fn:substring-after(string1,string2)    |返回 string2 在 string1 中出现之后的子字符串。例子：substring-after(’12/10′,’/’) 结果：’10’
|fn:matches(string,pattern)             |如果 string 参数匹配指定的模式，则返回 true，否则返回 false。例子：matches(“Merano”, “ran”) 结果：true
------------------------------------------------------------------------------------------------------------------------------------------------
</code></pre>

<p>更多函数请参考： <a href="http://www.w3school.com.cn/xpath/xpath_functions.asp">http://www.w3school.com.cn/xpath/xpath_functions.asp</a></p>

<h3>我自己实际工作中使用过的XPath实例：</h3>

<pre><code>* //span/../.././span
* //bookstore/book[last()]
* /DocText/WithQuads/Page/Word
* record[field[@id='220' and @value='Red'] and field[@id='221' and @value='Large']]
* /Root//Person[contains(Blog,'cn') and contains(@ID,'01')]
* //tr[td[1] and td[2][contains(text(), "512M")]]
* //td/following-sibling::td[1]
* //td/preceding-sibling::td[1]
* //td[starts-with(text(), "%s") and contains(text(), "disk:%sMB")]/following-sibling::td[2][contains(text(), "%s")]
* //a/../following-sibling::td[8]/a[2]
</code></pre>

<p>看完前面部分，这些的含义应该很容易可以看懂了。恭喜你，基本的XPath已经没问题了！</p>

<h3>chrome插件PsychoXPath</h3>

<p>最后我还推荐一个chrome浏览器中很好用的xpath插件，名字叫PsychoXPath。\</p>

<p>插件地址：<a href="https://chrome.google.com/webstore/detail/psychoxpath/bpnigkcdmnofjkmojlopmelmhgpbndog">PsychoXPath</a></p>

<p>基本使用方法，以google的首页“Google 搜索”按钮为例：</p>

<p>高亮模式：</p>

<ol>
<li>先按F12打开chrome浏览器的调试窗口，然后通过邮件审查元素找到“Google 搜索”按钮，查看对应的html代码。</li>
</ol>


<p><img src="http://yidaospace.qiniudn.com/x002.png" alt="" /></p>

<p>*. 然后右键选择PsychoXPath->Test XPath(Highlight)</p>

<p><img src="http://yidaospace.qiniudn.com/x006.png" alt="" /></p>

<p>*. 之后输入XPath路径</p>

<p><img src="http://yidaospace.qiniudn.com/x004.png" alt="" /></p>

<p>*. 结果如下，被找到的页面元素会被高亮显示：</p>

<p><img src="http://yidaospace.qiniudn.com/x005.png" alt="" /></p>

<p>*. 控制台模式：</p>

<p>还可以在控制台中调试xpath，这个跟上面同样道理。只是这次选择的是PsychoXPath->Test XPath(Console)模式就行了。</p>

<p>具体我就不再细说了，使用还是很容易的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.4安装rabbitmq-server]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/26/rabbitmq-server/"/>
    <updated>2015-04-26T10:55:13+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/26/rabbitmq-server</id>
    <content type="html"><![CDATA[<h3>在 CentOS 6.4上安装python</h3>

<p>自己手动安装python2.7.5，不要动系统上面其他的版本</p>

<p><strong>1,先安装GCC，用如下命令yum install gcc gcc-c++</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install zlib
</span><span class='line'>yum install zlib-devel</span></code></pre></td></tr></table></div></figure>


<p><strong>2,下载 <a href="https://www.python.org/ftp/python/2.7.5/Python-2.7.5.tgz">python-2.7.5.tar.gz</a> 文件，修改文件权限</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmode +x python-7.5.tar.gz</span></code></pre></td></tr></table></div></figure>


<p><strong>3,解压tar文件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -xzvf python-2.7.5.tar.gz</span></code></pre></td></tr></table></div></figure>


<p><strong>4,编辑Setup.dist</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd python-2.7.5
</span><span class='line'>vim Python-2.7.5/Modules/Setup.dist</span></code></pre></td></tr></table></div></figure>


<p>找到<!--more--></p>

<pre><code>#SSL=/usr/local/ssl
#_ssl _ssl.c \
#       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
#       -L$(SSL)/lib -lssl -lcrypto
......
#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
</code></pre>

<p>把注释去掉后开始执行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --prefix=/usr/local/python27 --with-zlib=/usr/include
</span><span class='line'>make &amp;&amp; make install</span></code></pre></td></tr></table></div></figure>


<p><strong>5、建立软连接，使系统默认的python指向python27</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv /usr/bin/python /usr/bin/python2.6.6.old
</span><span class='line'>ln -s /usr/local/python27/bin/python2.7 /usr/bin/python</span></code></pre></td></tr></table></div></figure>


<p>已经安装完成python的安装或升级的全部操作了，我们再来看一下现在的python的版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -V
</span><span class='line'>Python 2.7.5</span></code></pre></td></tr></table></div></figure>


<p>虽然现在python已经安装完成，但是使用yum命令会有问题——yum不能正常工作。</p>

<p>这是因为yum默认使用的python版本是2.6.6，到哪是现在的python版本是2.7.5，
故会出现上述问题，只需要该一下yum的默认python配置版本就行了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /usr/bin/yum</span></code></pre></td></tr></table></div></figure>


<p>将文件头部的<code>#!/usr/bin/python</code> 改为<code>#!/usr/bin/python2.6</code></p>

<h3>在 CentOS 6.4上安装Erlang</h3>

<p>在本节中，我们将来学习如何在CentOS 6.4上安装erlang，具体的Erlang版本是R16B02。</p>

<p>在安装之前，需要先要安装一些其他的软件，否则在安装中间会出现一些由于没有其依赖的软件模块而失败。</p>

<p><strong>1、首先要先安装GCC GCC-C++ Openssl等以来模块：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</span></code></pre></td></tr></table></div></figure>


<p><strong>2、再安装ncurses模块</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install ncurses-devel
</span><span class='line'>yum install ncurses-devel</span></code></pre></td></tr></table></div></figure>


<p><strong>3、下载Erang源代码文件文件，并对其付权限和解压文件：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.erlang.org/download/otp_src_R16B02.tar.gz
</span><span class='line'>chmod +x otp_src_R16B02.tar.gz
</span><span class='line'>tar -xzvf otp_src_R16B02.tar.gz
</span><span class='line'>mv otp_src_R16B02 erlang_R16B #重命名解压厚的文件</span></code></pre></td></tr></table></div></figure>


<p><strong>4、下面是安装erlang的重头戏，依次执行以下操作：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd erlang_R16B/
</span><span class='line'>#不用java编译，故去掉java避免错误
</span><span class='line'>./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
</span><span class='line'>make &amp;&amp; make install #编译后安装</span></code></pre></td></tr></table></div></figure>


<p><strong>5、配置erlang环境：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/profile
</span><span class='line'>ERL_HOME=/usr/local/erlang
</span><span class='line'>export PATH=$PATH:$ERL_HOME/bin</span></code></pre></td></tr></table></div></figure>


<p>好了，现在erlang的已经配置好了，现在我们来测试一下是否安装成功,在控制台输入命令erl，
如果在erlang shell里出现下图所示就说明安装成功了：
此处省略截图了…</p>

<h3>在CentOS上安装rabbitmq-server-3.1.5</h3>

<p>在本节中我们来看一下如何在CentOS上安装RabbitMQ。
我们使用的rabbitmq的版本是rabbitmq-server-3.1.5.tar.gz，CentOS的版本是CentOS 6.4。</p>

<p>在安装rabbitmq之前需要先安装python和erlang，
这两部分的安装过程请参看在CentOS 6.4上安装python和在 CentOS 6.4上安装Erlang，这里不再赘述。</p>

<p>安装rabbitmq的具体步骤如下：</p>

<p><strong>1、下载rabbitmq-server-3.1.5.tar.gz文件，并解压之：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/local
</span><span class='line'>wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.tar.gz
</span><span class='line'>chmod +x rabbitmq-server-3.1.5.tar.gz
</span><span class='line'>tar -xzvf rabbitmq-server-3.1.5.tar.gz</span></code></pre></td></tr></table></div></figure>


<p><strong>2、在编译rabbitmq源码之前先要安装其需要依赖包：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install xmlto</span></code></pre></td></tr></table></div></figure>


<p>否则会编译不通过：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/sh: line 1: xmlto: command not found</span></code></pre></td></tr></table></div></figure>


<p><strong>3、开始编译源代码：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd rabbitmq-server-3.1.5
</span><span class='line'>make
</span><span class='line'>#将rabbitmq编译到/opt/mq/rabbitmq目录
</span><span class='line'>make install TARGET_DIR=/opt/mq/rabbitmq SBIN_DIR=/opt/mq/rabbitmq/sbin MAN_DIR=/opt/mq/rabbitmq/man</span></code></pre></td></tr></table></div></figure>


<p><strong>4、安装web插件管理界面</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/mq/rabbitmq/sbin
</span><span class='line'>mkdir /etc/rabbitmq/
</span><span class='line'>rabbitmq-plugins enable rabbitmq_management</span></code></pre></td></tr></table></div></figure>


<p><strong>5、好了，到这里rabbitmq已经配置好了，可以启动了：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./rabbitmq-server start &</span></code></pre></td></tr></table></div></figure>


<p>我运行的时候报错了，ERROR: epmd error for host “springzoo”: timeout (timed out)</p>

<p>更改下/etc/hosts:</p>

<pre><code>127.0.0.1   localhost springzoo
::1         localhost springzoo
</code></pre>

<p>接下来我们查看下端口</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps aux | grep rabbitmq #查看端口，默认就是5672
</span><span class='line'>netstat -tnlp | grep 5672</span></code></pre></td></tr></table></div></figure>


<p>应该是下面的结果</p>

<pre><code>tcp        0      0 0.0.0.0:15672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 0.0.0.0:55672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 :::5672                     :::*                        LISTEN      30435/beam.smp
</code></pre>

<p>如果看到下面的信息就表明已经启动成功了！
省略截图….</p>

<p>最好我们就可以在浏览器上输入<a href="http://127.0.0.1:15672/%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E4%BA%86">http://127.0.0.1:15672/%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E4%BA%86</a></p>

<p>使用登录的名户名和密码默认都算guest，登录后的页面如下：</p>

<p>截图再次省略…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序中对小数组采用插入排序]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/24/merge-sort/"/>
    <updated>2015-04-24T10:47:35+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/24/merge-sort</id>
    <content type="html"><![CDATA[<p>纯归并排序的复杂度为O(nlgn)，而纯插入排序的时间复杂度为O(n<sup>2</sup>)。数据量很大的时候采用归并排序。</p>

<p>但是在n较小的时候插入排序可能运行的会更快点。因此在归并排序中当子问题变得足够小时，
采用插入排序来使得递归的叶子变粗可以加快排序速度。那么这个足够小到底怎么去衡量呢？ 请看下面：</p>

<p>这么几个我不证明了，比较简单：</p>

<ol>
<li>插入排序最坏情况下可以在O(nk)时间内排序每个长度为k的n/k个子列表
<em>. 在最坏情况下可在O(nlg(n/k))的时间内合并这些子表
</em>. 修订后的算法的最坏情况运行时间复杂度是O(nk + nlg(n/k))</li>
</ol>


<p>那么，O(nk+nlg(n/k))=O(nlgn).只能最大是k=O(lgn).等式左边中第一项是高阶项。
k如果大于lgn,则比归并排序复杂度大了。
左边可以写成nk+nlgn-nlgk，k等于lgn时，就是2nlgn-nlglgn.忽略恒定系数，则与归并排序是一样的。
最后结论： k &lt; lg(n)的时候，使用插入排序。<!--more--></p>

<p>首先是插入排序的实现，这个比较简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">insertSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>        <span class="c"># insert arrays[j] into the sorted seq[0...j-1]</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">:</span>
</span><span class='line'>            <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是利用了插入排序的归并排序算法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span>
</span><span class='line'>
</span><span class='line'><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Xiong Neng&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    seq: 待排序序列</span>
</span><span class='line'><span class="sd">    left &lt;= middle &lt;= right</span>
</span><span class='line'><span class="sd">    子数组seq[left..middle]和seq[middle+1..right]都是排好序的</span>
</span><span class='line'><span class="sd">    该排序的时间复杂度为O(n)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">tempSeq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">left</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">[</span><span class="n">left</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    归并排序一个序列的子序列</span>
</span><span class='line'><span class="sd">    start: 子序列的start下标</span>
</span><span class='line'><span class="sd">    end: 子序列的end下标</span>
</span><span class='line'><span class="sd">    threshold: 待排序长度低于这个值，就采用插入排序</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">insertSort</span><span class="p">(</span><span class="n">tempSeq</span><span class="p">)</span>
</span><span class='line'>        <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>  <span class="c"># 如果start &gt;= end就终止递归调用</span>
</span><span class='line'>        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 排好左边的一半</span>
</span><span class='line'>        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 再排好右边的一半</span>
</span><span class='line'>        <span class="n">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>  <span class="c"># 最后合并排序结果</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较清楚，应该不需要再多解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fastjson对Date的处理]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/22/fastjson-date/"/>
    <updated>2015-04-22T13:45:15+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/22/fastjson-date</id>
    <content type="html"><![CDATA[<p><strong>fastjson对日期的序列化方式：</strong></p>

<p>一种方法是通过注解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@JSONField</span> <span class="o">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一种是通过SerializeConfig：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>json字符串中使用单引号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">UseSingleQuotes</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>字段显示不同的key：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ID&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// {&quot;ID&quot;:001}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类的反序列化 JavaBean：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;r&quot;:255,&quot;g&quot;:0,&quot;b&quot;:0,&quot;alpha&quot;:255}</span>
</span><span class='line'><span class="n">Color</span> <span class="n">color</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// [{ ... }, { ... }]</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseArray</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>泛型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;name&quot;:{&quot;name&quot;:&quot;ljw&quot;,age:18}}</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>自定义序列化代码示例:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtil</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 默认的处理时间</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param jsonText</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">Object</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span>
</span><span class='line'>                <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">WriteDateUseDateFormat</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 自定义时间格式</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param jsonText</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">String</span> <span class="n">dateFormat</span><span class="o">,</span> <span class="n">String</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span> <span class="n">mapping</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>自定义日期格式反序列化示例</strong></p>

<p>先自定义一个日期解析类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDateFormatDeserializer</span> <span class="kd">extends</span> <span class="n">DateFormatDeserializer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">MyDateFormatDeserializer</span><span class="o">(</span><span class="n">String</span> <span class="n">myFormat</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">myFormat</span> <span class="o">=</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">Date</span><span class="o">&gt;</span> <span class="n">Date</span> <span class="nf">cast</span><span class="o">(</span><span class="n">DefaultJSONParser</span> <span class="n">parser</span><span class="o">,</span> <span class="n">Type</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">Object</span> <span class="n">fieldName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">myFormat</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">strVal</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="o">(</span><span class="n">Date</span><span class="o">)</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="n">myFormat</span><span class="o">).</span><span class="na">parse</span><span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">val</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>User类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com-google-com&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">format</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param args</span>
</span><span class='line'><span class="cm"> * @throws IOException</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ParseException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="s">&quot;{\&quot;name\&quot;:\&quot;22323\&quot;, \&quot;age\&quot;: 1234,&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot; \&quot;birthday\&quot;: \&quot;2012-12/12 12:12:12\&quot;}&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Test</span> <span class="n">t</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mapping</span><span class="o">,</span>
</span><span class='line'>            <span class="n">JSON</span><span class="o">.</span><span class="na">DEFAULT_PARSER_FEATURE</span><span class="o">,</span> <span class="k">new</span> <span class="n">Feature</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">birthday</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;2012-12/12 12:12:12&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>总结：</strong></p>

<p>对于JSONField注解，好像只对序列号的格式有影响，反序列化不管这个，不知道为什么，
只能自己写个解析类了，不过这样就更灵活了，可以在里面写很多处理逻辑，
比如json字符串里面日期格式并不是标准格式的时候，就可以先转成标准格式再去解析了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（14）- 集成Xadmin]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-14/"/>
    <updated>2015-04-21T21:45:29+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-14</id>
    <content type="html"><![CDATA[<h3>Xadmin介绍</h3>

<p>xadmin是一个django的管理后台实现，使用了更加灵活的架构设计及Bootstrap UI框架，
目的是替换现有的admin，国人开发，有许多新的特性：</p>

<ul>
<li>兼容 Django Admin</li>
<li>使用 Bootstrap 作为 UI 框架</li>
<li>编辑页面灵活布局</li>
<li>主页面仪表盘及小部件</li>
<li>过滤器强化</li>
<li>数据导出</li>
<li>强大的插件机制</li>
</ul>


<p>项目主页：<a href="http://sshwsfc.github.io/django-xadmin/">http://sshwsfc.github.io/django-xadmin/</a></p>

<p>在线demo: <a href="http://demo.xadmin.io/">http://demo.xadmin.io/</a></p>

<h3>与django的集成</h3>

<p>本篇以simpleblog项目为例，介绍下怎样在django中集成xadmin<!--more--></p>

<h4>python2.7环境切换</h4>

<p>注意，前面的教程都是在python3.4环境下开放的。
而目前为止xadmin还只能支持python2，所以我们要在此项目基础上新建一个分支py27，
然后我们创建一个python2.7的virtual environment，切换到此环境下面即可。</p>

<h4>添加依赖</h4>

<p>在requirements.txt中添加如下的依赖，注意：要用到xadmin的django1.7分支</p>

<pre><code>django-reversion==1.8.5
xlwt==0.7.5
git+https://github.com/sshwsfc/django-xadmin.git@django1.7
</code></pre>

<h4>修改settings.py</h4>

<p>增加xadmin的配置如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ADMINS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="c"># (&#39;Your Name&#39;, &#39;your_email@example.com&#39;),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">MANAGERS</span> <span class="o">=</span> <span class="n">ADMINS</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Application definition</span>
</span><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>    <span class="s">&#39;xadmin&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;crispy_forms&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reversion&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>添加/xadmin的链接</h4>

<p>修改<code>mysite/urls.py</code>如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="c"># version模块自动注册需要版本控制的 Model</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">xadmin.plugins</span> <span class="kn">import</span> <span class="n">xversion</span>
</span><span class='line'><span class="n">xversion</span><span class="o">.</span><span class="n">register_models</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;xadmin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;xadmin&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>创建adminx.py</h4>

<p>在blog/目录下创建adminx.py，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Topic: adminx定制类</span>
</span><span class='line'><span class="sd">Desc :</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">xadmin</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">xadmin.views</span> <span class="kn">as</span> <span class="nn">xviews</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Tag</span><span class="p">,</span> <span class="n">Category</span><span class="p">,</span> <span class="n">Post</span><span class="p">,</span> <span class="n">Comment</span><span class="p">,</span> <span class="n">Evaluate</span><span class="p">,</span> <span class="n">Page</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">xadmin.layout</span> <span class="kn">import</span> <span class="n">Main</span><span class="p">,</span> <span class="n">TabHolder</span><span class="p">,</span> <span class="n">Tab</span><span class="p">,</span> <span class="n">Fieldset</span><span class="p">,</span> <span class="n">Row</span><span class="p">,</span> <span class="n">Col</span><span class="p">,</span> <span class="n">AppendedText</span><span class="p">,</span> <span class="n">Side</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BaseSetting</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">enable_themes</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">use_bootswatch</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">xviews</span><span class="o">.</span><span class="n">BaseAdminView</span><span class="p">,</span> <span class="n">BaseSetting</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AdminSettings</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># 设置base_site.html的Title</span>
</span><span class='line'>    <span class="n">site_title</span> <span class="o">=</span> <span class="s">&#39;博客管理后台&#39;</span>
</span><span class='line'>    <span class="c"># 设置base_site.html的Footer</span>
</span><span class='line'>    <span class="n">site_footer</span> <span class="o">=</span> <span class="s">&#39;Winhong Inc.&#39;</span>
</span><span class='line'>    <span class="n">menu_style</span> <span class="o">=</span> <span class="s">&#39;default&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 菜单设置</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_site_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;博客管理&#39;</span><span class="p">,</span> <span class="s">&#39;perm&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_perm</span><span class="p">(</span><span class="n">Page</span><span class="p">,</span> <span class="s">&#39;change&#39;</span><span class="p">),</span> <span class="s">&#39;menus&#39;</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;所有页面&#39;</span><span class="p">,</span> <span class="s">&#39;icon&#39;</span><span class="p">:</span> <span class="s">&#39;fa fa-vimeo-square&#39;</span>
</span><span class='line'>                    <span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_url</span><span class="p">(</span><span class="n">Page</span><span class="p">,</span> <span class="s">&#39;changelist&#39;</span><span class="p">)},</span>
</span><span class='line'>                <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;分类目录&#39;</span><span class="p">,</span> <span class="s">&#39;icon&#39;</span><span class="p">:</span> <span class="s">&#39;fa fa-vimeo-square&#39;</span>
</span><span class='line'>                    <span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_url</span><span class="p">(</span><span class="n">Category</span><span class="p">,</span> <span class="s">&#39;changelist&#39;</span><span class="p">)},</span>
</span><span class='line'>            <span class="p">)},</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">xviews</span><span class="o">.</span><span class="n">CommAdminView</span><span class="p">,</span> <span class="n">AdminSettings</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Page</span><span class="p">)</span>
</span><span class='line'><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Category</span><span class="p">)</span>
</span><span class='line'><span class="c"># xadmin.site.register(Tag)</span>
</span><span class='line'><span class="c"># xadmin.site.register(Post)</span>
</span><span class='line'><span class="c"># xadmin.site.register(Comment)</span>
</span><span class='line'><span class="c"># xadmin.site.register(Evaluate)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，我们将所有的model都注册到xadmin中去，这样后台就能自动管理它们了。
并且自定义了后台的一些菜单、标题等等。具体的定制方法可以参考xadmin的官方文档。</p>

<h4>添加管理后台链接</h4>

<p>在<code>mysite/templates/mysite/base.html</code>模板中添加/xamdin的管理后台链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;meta-2&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;widget widget_meta&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">功能</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_superuser</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;/xadmin&quot;</span><span class="o">&gt;</span><span class="err">管理站点</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.logout&#39; %}&quot;</span><span class="o">&gt;</span><span class="err">登出</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.login&#39; %}&quot;</span><span class="o">&gt;</span><span class="err">登录</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#&quot;</span><span class="o">&gt;</span><span class="err">文章</span><span class="o">&lt;</span><span class="n">abbr</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;RSS&quot;</span><span class="o">&gt;</span><span class="n">RSS</span><span class="o">&lt;/</span><span class="n">abbr</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>自定义后台登陆页面</h4>

<p>新建<code>mysite/templates/registration/login.html</code>模板，将xadmin模块中的login.html复制过来，
修改其内容，改成自己想要的形式即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'>{% load i18n %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span>
</span><span class='line'>          <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;robots&quot;</span> <span class="na">content=</span><span class="s">&quot;NONE,NOARCHIVE&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>用户登录 - SimpleBlog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/vendor/jquery/jquery.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;login&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        {% csrf_token %}
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;panel panel-default panel-single&quot;</span> <span class="na">id=</span><span class="s">&quot;panel-login&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;panel-heading&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;form-signin-heading&quot;</span><span class="nt">&gt;</span>请登录<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.main.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.responsive.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class='line'>        <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/vendor/jquery-ui/jquery.ui.effect.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.plugin.themes.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些完成后，我们打开应用，访问<code>管理站点</code>链接，应该可以看到如下的登录页面</p>

<p><img src="http://yidaospace.qiniudn.com/dj110.png" alt="" /></p>

<p>登录后的效果</p>

<p><img src="http://yidaospace.qiniudn.com/dj111.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（12）- i18n国际化]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-12/"/>
    <updated>2015-04-21T19:27:29+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-12</id>
    <content type="html"><![CDATA[<h3>Wiki</h3>

<p>国际化与本地化的目的为了能为各个不同的用户以他们最熟悉的语言和格式来显示网页。</p>

<p>Django能完美支持文本翻译、日期时间和数字的格式化、时区。</p>

<p>另外，Django还有两点优势：</p>

<ol>
<li>允许开发者和模板作者指定他们哪些app应该被翻译或被格式化为本地形式。</li>
<li>允许用户根据自己的偏好来实现本地化显示。翻译依据语言，格式化依据国家，
这些信息由浏览器中的<code>Accept-Language</code>头来决定。不过目前为止时区还未能实现。</li>
</ol>


<p>参考官方文档：<a href="https://docs.djangoproject.com/en/1.7/topics/i18n/">https://docs.djangoproject.com/en/1.7/topics/i18n/</a></p>

<h3>配置</h3>

<p>实际上django的国际化做的非常好了，配置很简单。</p>

<h4>settings.py</h4>

<p>首先在settings中，添加如下内容：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.utils.translation</span> <span class="kn">import</span> <span class="n">ugettext_lazy</span> <span class="k">as</span> <span class="n">_</span>
</span><span class='line'><span class="n">LANGUAGES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;zh-cn&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Simplified Chinese&#39;</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;en&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;English&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">LOCALE_PATHS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&quot;locale&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>LANGUAGES</code>执行语言列表，<code>LOCALE_PATHS</code>指定国际化目录。</p>

<p>在项目根目录下面创建一个locale文件夹，然后使用命令创建国际化文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">makemessages</span> <span class="o">-</span><span class="n">l</span> <span class="n">zh_CN</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行完后，locale文件夹下面创建<code>zh_CN/LC_MESSAGES/django.po</code>，里面的内容类似下面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># SOME DESCRIPTIVE TITLE.</span>
</span><span class='line'><span class="c"># Copyright (C) YEAR THE PACKAGE&#39;S COPYRIGHT HOLDER</span>
</span><span class='line'><span class="c"># This file is distributed under the same license as the PACKAGE package.</span>
</span><span class='line'><span class="c"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#, fuzzy</span>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="s">&quot;Project-Id-Version: PACKAGE VERSION</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Report-Msgid-Bugs-To: </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;POT-Creation-Date: 2014-11-26 11:45+0800</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;MIME-Version: 1.0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Content-Type: text/plain; charset=UTF-8</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Content-Transfer-Encoding: 8bit</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;Plural-Forms: nplurals=1; plural=0;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#: .\mysite\settings.py:94</span>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;Simplified Chinese&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;简体中文&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#: .\mysite\settings.py:95</span>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;English&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;English&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#: base.html</span>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;Simple Blog&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;极简博客&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;欢迎你&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;previous&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;上一页&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">msgid</span> <span class="s">&quot;next&quot;</span>
</span><span class='line'><span class="n">msgstr</span> <span class="s">&quot;下一页&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>将你页面上面需要翻译的内容写到这里面来即可。比如<code>previous</code>要翻译成<code>上一页</code>。</p>

<p>写好了所有的翻译后，再执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">compilemessages</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候会生成文件<code>zh_CN/LC_MESSAGES/django.mo</code>，这个是最终的目标文件了。</p>

<h3>使用</h3>

<p>我们用<code>base.html</code>来做演示，打开<code>mysite/templates/mysite/base.html</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'>{% load i18n %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;customize-support&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% if user.is_authenticated %}
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span>
</span><span class='line'>                <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span>
</span><span class='line'>                <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size: 15pt;&quot;</span><span class="nt">&gt;</span>{% trans &#39;Hello&#39;%} {{ user.username }}
</span><span class='line'>            <span class="nt">&lt;small&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;/small&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.logout&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-log-out&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% else %}
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-log-in&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_list&#39; %}&quot;</span><span class="nt">&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>&lt;title&gt;{% trans 'Simple Blog'%}&lt;/title&gt;</code>这句，
如果用户选择中文，那么就会被翻译成<code>极简博客</code>。
这个在django.po文件中定义过。其他的内容也是类似，就不多说了。</p>

<p>好了，i18n国际化就是这么简单。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（11）- 富文本与代码高亮]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-11/"/>
    <updated>2015-04-21T18:27:29+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-11</id>
    <content type="html"><![CDATA[<h2>TinyMCE介绍</h2>

<p>TinyMCE是一个轻量级的基于浏览器的所见即所得编辑器，支持目前流行的各种浏览器，由JavaScript写成。
功能配置灵活简单（两行代码就可以将编辑器嵌入网页中），支持AJAX。另一特点是加载速度非常快。</p>

<p>django里引用TinyMCE富文本编辑器，其实很简单，前提是你知道django的静态文件配置。
其实这个我已经在前面文章提到过，可以回去再看看。</p>

<p>TinyMCE的官方网站是：<a href="http://www.tinymce.com/">http://www.tinymce.com/</a></p>

<p>下载地址：<a href="http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip">http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip</a></p>

<p>TinyMCE的最新版本是4.1.9，下面是官网截屏：</p>

<p><img src="http://yidaospace.qiniudn.com/tinymce.png" alt="" /></p>

<p>下载下来后，我们把它解压到工程的static/目录下面，如下图所示：<!--more--></p>

<p><img src="http://yidaospace.qiniudn.com/dj101.png" alt="" /></p>

<h2>安装原理</h2>

<p>安装的原理很简单，只需要在使用编辑器的页面里引用tinymce.min.js文件并初始化就可以了。
tinymce.min.js文件在tinymce项目里，
tinymce.min.js会根据初始配置里的信息找到需要用编辑器的html节点。</p>

<p>例如在post_edit.html页面使用编辑器，只需要在模板文件写下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'>{% block header %}
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;tinymce/plugins/upload/plugin.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;tinymce/tinymce.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nx">tinymce</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">selector</span><span class="o">:</span> <span class="s2">&quot;textarea&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">//width: 800,</span>
</span><span class='line'>            <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">forced_root_block</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;advlist autolink lists link image charmap print preview anchor sh4tinymce upload&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;searchreplace visualblocks code fullscreen&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;insertdatetime table contextmenu paste&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="nx">toolbar</span><span class="o">:</span> <span class="s2">&quot;insertfile undo redo | styleselect | bold italic | alignleft aligncenter&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s2">&quot; alignright alignjustify | bullist numlist outdent indent | preview link image sh4tinymce&quot;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的含义是 初始化 tinyMCE编辑器，selector指需要将编辑器显示在html那个标签节点，
这里选了textareas。则表示<textareas>会变成编辑器所在的位置。</p>

<p>另外，我还自定义一下编辑器的高度、插件、菜单项目等。具体详细配置请参考官方文档，写的都比较清楚。</p>

<h2>给TinyMCE增加一个addmore插件</h2>

<p>需求很简单，就是每次我写文章的时候需要插入某个<code>&lt;!--more--&gt;</code>标签，
这样可以在列表页面先只显示文章的一部分，然后碰到这个more标签就显示一个"点击阅读更多"的链接。</p>

<p>第一步，在tinymce/plugins文件下新增一个addmore文件夹，然后在里面新建一个plugin.min.js文件，
内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>tinymce.PluginManager.add(&quot;addmore&quot;, function (a) {
</span><span class='line'>    a.addCommand(&quot;InsertMoreRule&quot;, function () {
</span><span class='line'>        a.execCommand(&quot;mceInsertContent&quot;, !1, &quot;[!--more--]&quot;)
</span><span class='line'>    }), a.addButton(&quot;addmore&quot;, {
</span><span class='line'>        icon: &quot;addmore&quot;,
</span><span class='line'>        tooltip: &quot;Insert More&quot;,
</span><span class='line'>        cmd: &quot;InsertMoreRule&quot;
</span><span class='line'>    }), a.addMenuItem(&quot;addmore&quot;, {
</span><span class='line'>        icon: &quot;addmore&quot;,
</span><span class='line'>        text: &quot;Insert More&quot;,
</span><span class='line'>        cmd: &quot;InsertMoreRule&quot;,
</span><span class='line'>        context: &quot;insert&quot;
</span><span class='line'>    })
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>在post_edit.html中修改tinymce.init方法，plugins项目后面添加一个addmore：</p>

<pre><code>...
plugins: [
    "advlist autolink lists link image charmap print preview anchor sh4tinymce upload",
    "searchreplace visualblocks code fullscreen",
    "insertdatetime table contextmenu paste addmore"
],
...
</code></pre>

<p>再看看效果，没问题了。</p>

<h2>SyntaxHighlighter代码高亮</h2>

<p>程序员写博客当然少不了代码高亮，这个功能页很容易实现。有一款插件叫SyntaxHighlighter值的推荐。</p>

<p>项目主页：<a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a></p>

<p>下载地址：<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current">http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current</a></p>

<p>下载下来后直接解压到static/目录下面，这个跟tinymce是一样的原理。</p>

<p><strong>使用方法</strong></p>

<p>只需要修改django页面的基础模板就行了，非常简单。</p>

<p>打开mysite/templates/mysite/base.html页面，引入syntaxhighlighter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'>{% load i18n %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Latest compiled and minified CSS --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/bootstrap.min.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Optional theme --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/bootstrap-theme.min.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Blog CSS--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/styles/shCoreDefault.css&#39; %}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shCore.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span><span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Latest compiled and minified JavaScript --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/jquery-1.11.1.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/base.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/bootstrap.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    {% block header %}
</span><span class='line'>    {% endblock %}
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;customize-support&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>中间省略...
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushJScript.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushBash.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushPhp.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushJava.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushSql.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushXml.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushPython.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushCss.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushCpp.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于我们之前已经安装过了TinyMCE，这个跟它结合起来就非常好用了，因为TinyMCE自带有选择代码语言功能。</p>

<p>下面是我创建文章时，插入了一段python代码的示例：</p>

<p><img src="http://yidaospace.qiniudn.com/dj102.png" alt="" /></p>

<p>这个是保存后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj103.png" alt="" /></p>

<h2>最后一件事</h2>

<p>别忘了部署到Heroku上面和别人分享你的成果。</p>

<p>OK，到此为止，前台的各种功能已经差不多了，你能一直坚持学到这里很不错了，为你自己鼓掌吧。</p>

<p>后面还有一个重头戏，就是django的后台管理，我选择了更美观更好用的xamdin，敬请期待&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（10）- 全文搜索]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-10/"/>
    <updated>2015-04-21T15:47:28+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-10</id>
    <content type="html"><![CDATA[<h3>Wiki：</h3>

<p>Django本身不提供全文检索的功能，但django-haystack为其提供了全文检索的框架。
django-haystack能为Django提供whoosh,solr,Xapian和Elasticsearc四种全文检索引擎作为后端。
其中whoosh为纯python的实现，不是非常大型的应用，是没有问题的。
本文将介绍Django1.7中通过django-haystack与whoosh集成以及whoosh的中文支持。</p>

<h3>安装依赖：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install django-haystack
</span><span class='line'>pip install whoosh
</span><span class='line'>pip install jieba</span></code></pre></td></tr></table></div></figure>


<h3>建立模型</h3>

<p>我们以文章为搜索目标，现在我的app名字为blog，
模型文件是mysite/blog/models.py ：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># coding=utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'><span class="nd">@python_2_unicode_compatible</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">verbose_name</span> <span class="o">=</span> <span class="s">u&#39;文章&#39;</span>
</span><span class='line'>        <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">u&#39;文章&#39;</span>
</span><span class='line'>    <span class="c"># 作者</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 标题</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 正文</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># 标签</span>
</span><span class='line'>    <span class="n">tags</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Tag</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 分类目录</span>
</span><span class='line'>    <span class="n">category</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Category</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 点击量</span>
</span><span class='line'>    <span class="n">click</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 创建时间</span>
</span><span class='line'>    <span class="n">created_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 发布时间</span>
</span><span class='line'>    <span class="n">published_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">published_date</span> <span class="o">=</span> <span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1. search_indexes.py</h3>

<p>在app目录下建立一个search_indexes.py（mysite/blog/search_indexes.py）代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">haystack</span> <span class="kn">import</span> <span class="n">indexes</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostIndex</span><span class="p">(</span><span class="n">indexes</span><span class="o">.</span><span class="n">SearchIndex</span><span class="p">,</span> <span class="n">indexes</span><span class="o">.</span><span class="n">Indexable</span><span class="p">):</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">document</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">use_template</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 对title字段进行索引</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">model_attr</span><span class="o">=</span><span class="s">&#39;title&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_model</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Post</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index_queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">using</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model</span><span class="p">()</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>备注</em>：search_indexes.py文件名不能修改，否则报错：<code>No fields were found in any search_indexes.</code></p>

<h3>2. post_text.txt</h3>

<p>因为在search_indexes.py使用了use_template=True，所以可以同时使用模板对索引字段进行定义。</p>

<p>如：<code>mysite/blog/templates/search/indexes/blog/post_text.txt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p"></span>
</span><span class='line'><span class="p"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. settings.py</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Application definition</span>
</span><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;haystack&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. urls.py</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^xadmin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;xadmin&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/logout/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;next_page&#39;</span><span class="p">:</span> <span class="s">&#39;/&#39;</span><span class="p">}),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^search/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;haystack.urls&#39;</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. jieba中文分词</h3>

<p>jieba其实已经提供了集成whoosh的ChineseAnalyzer，
也就是说不需要自己写ChineseAnalyzer了，直接在whoosh_backend.py中直接引用就好；
同时，不推荐将whoosh_backend.py放到Lib下面，这样移植性会有问题，自己的代码，还是放在项目下面为妙。</p>

<p>1. 将文件whoosh_backend.py拷贝到app下面，并重命名为whoosh_cn_backend.py，
如blog/whoosh_cn_backend.py。重点的改造有：</p>

<ul>
<li>增加：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">jieba.analyse</span> <span class="kn">import</span> <span class="n">ChineseAnalyzer</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">schema_fields</span><span class="p">[</span><span class="n">field_class</span><span class="o">.</span><span class="n">index_fieldname</span><span class="p">]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="n">stored</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">analyzer</span><span class="o">=</span><span class="n">ChineseAnalyzer</span><span class="p">(),</span>
</span><span class='line'> <span class="n">field_boost</span><span class="o">=</span><span class="n">field_class</span><span class="o">.</span><span class="n">boost</span><span class="p">,</span> <span class="n">sortable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2. 修改后端引擎，setting.py配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># full text search</span>
</span><span class='line'><span class="n">HAYSTACK_CONNECTIONS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;blog.whoosh_cn_backend.WhooshEngine&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;PATH&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;whoosh_index&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 重建索引</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">rebuild_index</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7. 索引更新</h3>

<p>最简单的办法就是在settings.py中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">HAYSTACK_SIGNAL_PROCESSOR</span> <span class="o">=</span> <span class="s">&#39;haystack.signals.RealtimeSignalProcessor&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>8. 自定义搜索示例</h3>

<p>(1) 先定义view：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">haystack.forms</span> <span class="kn">import</span> <span class="n">SearchForm</span>
</span><span class='line'><span class="k">def</span> <span class="nf">full_search</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;全局搜索&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">keywords</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;q&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">sform</span> <span class="o">=</span> <span class="n">SearchForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">)</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="n">sform</span><span class="o">.</span><span class="n">search</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_search_list.html&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">,</span> <span class="s">&#39;list_header&#39;</span><span class="p">:</span> <span class="s">&#39;关键字 </span><span class="se">\&#39;</span><span class="s">{}</span><span class="se">\&#39;</span><span class="s"> 搜索结果&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">keywords</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2) 然后在template页面中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- searchbox START --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;searchbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;{% url &#39;blog.views.full_search&#39; %}&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;label&gt;</span>
</span><span class='line'>                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;textfield searchtip&quot;</span> <span class="na">name=</span><span class="s">&quot;q&quot;</span> <span class="na">size=</span><span class="s">&quot;24&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/label&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>更详细内容请参考官方文档：<a href="http://django-haystack.readthedocs.org/en/latest/">http://django-haystack.readthedocs.org/en/latest/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8中的lambda表达式]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/java8-lambda/"/>
    <updated>2015-04-21T15:42:11+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/java8-lambda</id>
    <content type="html"><![CDATA[<p>2014年3月18日，Oracle终于发布Java8正式版。在新的版本里面加入了很多特性，
总共增加了55个新特性，其中最最吸引人的就是Lambdas表达式和Stream函数式编程，本文详细讲解这两个特性。</p>

<p>其他特性比如日期API，泛型，反射，注解，集合框架，并发，Nashorn引擎等等这里暂时就不详细介绍了。
具体可以参考：<a href="http://openjdk.java.net/projects/jdk8/features">http://openjdk.java.net/projects/jdk8/features</a></p>

<p>昨天参加了Oracle的Java8宣讲活动，有幸目睹了Simon Ritter的风采，写个总结来分享下。</p>

<p><strong>Java并发编程演变：</strong></p>





<table class="mytable">
    <tbody>
    <tr>
    <td>版本</td>
    <td>发布年份</td>
    <td>并发技术</td>
    </tr>
    <tr>
    <td>1.4</td>
    <td>2002</td>
    <td>java.lang.Thread</td>
    </tr>
    <tr>
    <td>5</td>
    <td>2004</td>
    <td>java.util.concurrent(jsr166)</td>
    </tr>
    <tr>
    <td>6</td>
    <td>2006</td>
    <td>Phasers, etc(jsr166)</td>
    </tr>
    <tr>
    <td>7</td>
    <td>2011</td>
    <td>Fork/Join Framework(jsr166y)</td>
    </tr>
    <tr>
    <td>8</td>
    <td>2014</td>
    <td>Project Lambda</td>
    </tr>
    </tbody>
</table>


<p>先来一个小例子见识下Java8的威力！<!--more--></p>

<p><strong>一，传统的外部迭代处理代码：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">:</span> <span class="n">students</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">gradYear</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">score</span> <span class="o">&gt;</span> <span class="n">highestScore</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">highestScore</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">score</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>传统的外部迭代主要问题：</p>

<ul>
<li>程序员自己控制迭代，容易出问题！</li>
<li>顺序执行：迭代从开始到结束一个一个的顺序迭代元素</li>
<li>线程不安全，由于业务逻辑依靠可修改变量，容易产生竞态问题</li>
</ul>


<p><strong>二，基于Inner Classes的内部迭代：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class='line'>        <span class="nf">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">op</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span>
</span><span class='line'>        <span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">,</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Double</span> <span class="nf">extract</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span>
</span><span class='line'>        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种迭代形式已经具备了函数式特征。</p>

<p>优点：</p>

<ul>
<li>迭代，过滤和累加器由核心库完成</li>
<li>遍历操作可以并行执行</li>
<li>遍历可以延迟执行</li>
<li>线程安全 – 因为客户端的逻辑是无状态的</li>
</ul>


<p>缺点：</p>

<p>代码写的有点难看</p>

<p><strong>三，基于Lambdas的内部迭代：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SomeList</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class='line'>        <span class="nf">filter</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">).</span>
</span><span class='line'>        <span class="n">map</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">()).</span>
</span><span class='line'>        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法可以算是完美了：^_^</p>

<ul>
<li>可读性很好</li>
<li>更加抽象化</li>
<li>简单化后，自然就不容易出现bug了</li>
<li>不再依赖可变变量</li>
<li>很容易实现并行化</li>
</ul>


<p>进入正题 ~~</p>

<h3>Lambda篇</h3>

<p>Lambda表达式简单来讲就是匿名函数</p>

<ul>
<li>就像一个方法一样，它又参数列表，一个返回类型，抛出的异常集和一个执行体</li>
<li>但是跟方法不同的是，它不跟任何Class关联。</li>
</ul>


<p>也就是说，现在我们在Java的方法调用中不仅仅可以传值，还可以传动作(也就是函数)，这个有点类似于C语言的函数指针的概念了。</p>

<p>Lambda表达式的类型：</p>

<p>在Java中，到处都可以看到只有一个方法的接口，这种接口现在定义为函数式接口，
而Lambda表达式类型就是函数式接口，也就是只有一个方法的接口。</p>

<p>几个函数式接口的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">x</span><span class="o">,</span> <span class="n">T</span> <span class="n">y</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">FileFilter</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">x</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span> <span class="o">}</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">ActionListener</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="err">…</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">T</span> <span class="nf">call</span><span class="o">();</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>局部变量捕获：</strong></p>

<p>Lambda表达式可以引用上下文中的final等效局部变量。</p>

<p>final等效指的是变量的用法是final的，而不必声明为final，比如变量只赋值一次，那么它就是final等效的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">,</span> <span class="kt">long</span> <span class="n">before</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">before</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>this关键字：</strong></p>

<p>Lambda表达式中的this指的是包含这个Lambda的外部对象，而不是Lambda本身。
永远记住，Lambda表达式类型其实就是一个函数式接口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">SessionManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// refers to &#39;this.before&#39;, just like outside the lambda</span>
</span><span class='line'>        <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">checkExpiry</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">before</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">checkExpiry</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">,</span> <span class="kt">long</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>类型推断：</strong></p>

<p>很多情况下，编译器都可以根据目标函数式接口的方法签名来推断参数类型。
在Collections接口中有个sort接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">T</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">l</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正常来讲，应该这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">,</span> <span class="n">String</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>借助类型推断，可以简化为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>方法引用：</strong></p>

<p>方法引用可以让我们将一个方法作为一个Lambda表达式重复利用。</p>

<p>比如，java.io.FileFilter作为一个函数式接口，仅有一个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">pathname</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正常的Lambda表达式用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="n">File</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">canRead</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过方法引用，可以简化为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="nl">File:</span><span class="o">:</span><span class="n">canRead</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法引用语法格式有以下三种：</p>

<pre><code>objectName::instanceMethod
ClassName::staticMethod
ClassName::instanceMethod
</code></pre>

<p>前两种方式类似，等同于把lambda表达式的参数直接当成instanceMethod|staticMethod的参数来调用。</p>

<p>比如 <code>System.out::println</code> 等同于 <code>x-&gt;System.out.println(x);</code>
<code>Math::max</code>等同于<code>(x, y)-&gt;Math.max(x,y)</code>。</p>

<p>最后一种方式，等同于把lambda表达式的第一个参数当成instanceMethod的目标对象，
其他剩余参数当成该方法的参数。比如<code>String::toLowerCase</code>等同于<code>x-&gt;x.toLowerCase()</code>。</p>

<p><strong>构造器引用：</strong></p>

<p>构造器引用语法如下：<code>ClassName::new</code>，把lambda表达式的参数当成ClassName构造器的参数 。
例如<code>BigDecimal::new</code>等同于<code>x-&gt;new BigDecimal(x)</code>。</p>

<p>和方法引用类似，构造器引用示例：</p>

<p>正常的Lambda表达式的构造器示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过构造器引用，可以简化为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;::</span><span class="k">new</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>接口扩展：</strong></p>

<p>在Java中，接口是不能随便新增方法的，因为接口中一旦增加方法，那么所以实现类都必须重写。
可以在Interface中使用default关键字来增加一个新的接口方法，并提供一个默认实现。
接口的实现类可以不用管，也可以覆盖这个方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">stream</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">spliterator</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以使用@FunctionalInterface这个注解来注解函数式接口，如果接口中多于一个抽象方法，编译器肯定报错。</p>

<p>更甚至，在Java8中，在接口中也可以增加静态方法了。</p>

<h3>Stream篇</h3>

<p>许多的业务逻辑都需要聚集操作，比如按地区分类获取最优价值产品，按币种分类获取交易量。
之前版本的Java都是通过外部循环来完成这些操作，前面也说过了这种做法的很多弊端。</p>

<p>Java8给出完美解决方案：Lambda表达式+Stream API</p>

<p>Java中对Stream的定义：</p>

<pre><code>A sequence of elements supporting sequential and parallel aggregate operations.
</code></pre>

<p>我们来解读一下上面的那句话：</p>

<pre><code>- Stream是元素的集合，这点让Stream看起来用些类似Iterator；
– 可以支持顺序和并行的对原Stream进行汇聚的操作；
</code></pre>

<p>大家可以把Stream当成一个高级版本的Iterator。原始版本的Iterator，
用户只能一个一个的遍历元素并对其执行某些操作；高级版本的Stream，
用户只要给出需要对其包含的元素执行什么操作，
比如“过滤掉长度大于10的字符串”、“获取每个字符串的首字母”等，
具体这些操作如何应用到每个元素上，就给Stream就好了！（这个秘籍，一般人我不告诉他：））
大家看完这些可能对Stream还没有一个直观的认识，莫急，容我慢慢道来！</p>

<p>先解释下Stream管道：</p>

<p>Stream管道包含三部分，缺一不可：</p>

<ol>
<li>stream源</li>
<li>零个或多个中间操作</li>
<li>一个终止操作，产生一个结果或者一个副作用</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">transactions</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span>
</span><span class='line'>        <span class="n">filter</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getBuyer</span><span class="o">().</span><span class="na">getCity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="err">“</span><span class="n">London</span><span class="err">”</span><span class="o">)).</span>
</span><span class='line'>        <span class="n">mapToInt</span><span class="o">(</span><span class="nl">Transaction:</span><span class="o">:</span><span class="n">getPrice</span><span class="o">).</span>
</span><span class='line'>        <span class="n">sum</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>transactions.stream() -> stream源</p>

<p>filter/mapToInt -> 中间操作</p>

<p>sum() -> 产生结果</p>

<p>剖析Stream通用语法，再来看一个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Lists是Guava中的一个工具类</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span><span class="na">count</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yidaospace.qiniudn.com/0001.jpg" alt="" /></p>

<p>图片就是对于Stream例子的一个解析，可以很清楚的看见：原本一条语句被三种颜色的框分割成了三个部分。
红色框中的语句是一个Stream的生命开始的地方，负责创建一个Stream实例；
绿色框中的语句是赋予Stream灵魂的地方，把一个Stream转换成另外一个Stream，
红框的语句生成的是一个包含所有nums变量的Stream，进过绿框的filter方法以后，
重新生成了一个过滤掉原nums列表所有null以后的Stream；
蓝色框中的语句是丰收的地方，把Stream的里面包含的内容按照某种算法来汇聚成一个值，
例子中是获取Stream中包含的元素个数。</p>

<p>在此我们总结一下使用Stream的基本步骤：</p>

<ol>
<li>创建Stream；</li>
<li>转换Stream，每次转换原有Stream对象不改变，返回一个新的Stream对象（<strong>可以有多次转换</strong>）；</li>
<li>对Stream进行聚合（Reduce）操作，获取想要的结果；</li>
</ol>


<p><strong>stream源</strong></p>

<p>有很多方式可以产生stream源：</p>

<p>1. 从集合和数组产生：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class='line'><span class="n">Collection</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">T</span> <span class="n">array</span><span class="o">)</span> <span class="n">or</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">()</span>  <span class="c1">// 接口default方法或者是静态方法</span>
</span></code></pre></td></tr></table></div></figure>


<p>2. 静态工厂方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">()</span>
</span><span class='line'><span class="n">Files</span><span class="o">.</span><span class="na">walk</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. 使用Stream静态方法来创建Stream源</p>

<p>1) of方法：有两个overload方法，一个接受变长参数，一个接口单一值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;taobao&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) generator方法：生成一个无限长度的Stream，
其元素的生成是通过给定的Supplier（这个接口可以看成一个对象的工厂，每次调用返回一个给定类型的对象）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Double</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">());</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="nl">Math:</span><span class="o">:</span><span class="n">random</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>三条语句的作用都是一样的，只是使用了lambda表达式和方法引用的语法来简化代码。
每条语句其实都是生成一个无限长度的Stream，其中值是随机的。
这个无限长度Stream是懒加载，一般这种无限长度的Stream都会配合Stream的limit()方法来用。</p>

<p>4. iterate方法：也是生成无限长度的Stream</p>

<p>和generator不同的是，其元素的生成是重复对给定的种子值(seed)调用用户指定函数来生成的。
其中包含的元素可以认为是：seed，f(seed),f(f(seed))无限循环</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">item</span> <span class="o">-&gt;</span> <span class="n">item</span> <span class="o">+</span> <span class="mi">1</span><span class="o">).</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码就是先获取一个无限长度的正整数集合的Stream，然后取出前10个打印。千万记住使用limit方法，不然会无限打印下去。</p>

<p><strong>转换Stream：</strong></p>

<p>转换Stream其实就是把一个Stream通过某些行为转换成一个新的Stream。Stream接口中定义了几个常用的转换方法，下面我们挑选几个常用的转换方法来解释。</p>

<ol>
<li>distinct: 对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素；</li>
<li>filter: 对于Stream中包含的元素使用给定的过滤函数进行过滤操作，新生成的Stream只包含符合条件的元素；</li>
<li>map: 对于Stream中包含的元素使用给定的转换函数进行转换操作，新生成的Stream只包含转换生成的元素。
这个方法有三个对于原始类型的变种方法，分别是：mapToInt，mapToLong和mapToDouble。
这三个方法也比较好理解，比如mapToInt就是把原始Stream转换成一个新的Stream，
这个新生成的Stream中的元素都是int类型。之所以会有这样三个变种方法，可以免除自动装箱/拆箱的额外消耗；</li>
<li>flatMap：和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中；</li>
<li>peek: 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数；</li>
<li>limit: 对一个Stream进行截断操作，获取其前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素；</li>
<li>skip: 返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream，如果原Stream中包含的元素个数小于N，那么返回空Stream；</li>
</ol>


<p><strong>性能问题</strong></p>

<p>有些细心的同学可能会有这样的疑问：在对于一个Stream进行多次转换操作，每次都对Stream的每个元素进行转换，
而且是执行多次，这样时间复杂度就是一个for循环里把所有操作都做掉的N（转换的次数）倍啊。其实不是这样的，
转换操作都是lazy的，多个转换操作只会在汇聚操作的时候融合起来，一次循环完成。我们可以这样简单的理解，
Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，
在汇聚操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。</p>

<p><strong>聚集（Reduce）Stream</strong></p>

<p>可变汇聚</p>

<p>可变汇聚对应的只有一个方法：collect，正如其名字显示的，它可以把Stream中的要有元素收集到一个结果容器中（比如Collection）。</p>

<p>通用的collect方法的定义（还有其他override方法）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">R</span> <span class="nf">collect</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">,</span>
</span><span class='line'>        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">,</span>
</span><span class='line'>        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="n">combiner</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先来看看这三个参数的含义：Supplier supplier是一个工厂函数，用来生成一个新的容器；
BiConsumer accumulator也是一个函数，用来把Stream中的元素添加到结果容器中；
BiConsumer combiner还是一个函数，用来把中间状态的多个结果容器合并成为一个（并发的时候会用到）</p>

<p>还有好消息，Java8还给我们提供了Collector的工具类–[Collectors]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numsWithoutNull</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span>
</span><span class='line'>       <span class="n">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>其他汇聚</strong></p>

<p>reduce方法：reduce方法非常的通用，后面介绍的count，sum等都可以使用其实现。
reduce方法有三个override的方法，本文介绍两个最常用的，
先来看reduce方法的第一种形式，其方法定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接受一个BinaryOperator类型的参数，在使用的时候我们可以用lambda表达式来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ints sum is:&quot;</span> <span class="o">+</span> <span class="n">ints</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">((</span><span class="n">sum</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">item</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到reduce方法接受一个函数，这个函数有两个参数，第一个参数是上次函数执行的返回值（也称为中间结果），
第二个参数是stream中的元素，这个函数把这两个值相加，得到的和会被赋值给下次执行这个函数的第一个参数。</p>

<p>reduce方法还有一个很常用的变种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">T</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">T</span> <span class="n">identity</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个定义了初值，不是默认的第一个位初值。</p>

<p>其他参数:</p>

<ul>
<li>allMatch：是不是Stream中的所有元素都满足给定的匹配条件</li>
<li>anyMatch：Stream中是否存在任何一个元素满足匹配条件</li>
<li>findFirst: 返回Stream中的第一个元素，如果Stream为空，返回空Optional</li>
<li>noneMatch：是不是Stream中的所有元素都不满足给定的匹配条件</li>
<li>max和min：使用给定的比较器（Operator），返回Stream中的最大|最小值</li>
</ul>


<p>其他Tips：</p>

<p>Optional防止空指针异常，考虑一个常见的嵌套调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">().</span><span class="na">getUSB</span><span class="o">().</span><span class="na">getVersion</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在之前的Java中，我们对于空指针需要这么做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="s">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">computer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>    <span class="n">Soundcard</span> <span class="n">soundcard</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">soundcard</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>        <span class="n">USB</span> <span class="n">usb</span> <span class="o">=</span> <span class="n">soundcard</span><span class="o">.</span><span class="na">getUSB</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">usb</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="n">version</span> <span class="o">=</span> <span class="n">usb</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很显然，这个种做法太挫了！
Groovy语言里面有个?.的语法可以非常优雅的解决这个问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">?.</span><span class="na">getSoundcard</span><span class="o">()?.</span><span class="na">getUSB</span><span class="o">()?.</span><span class="na">getVersion</span><span class="o">()</span> <span class="o">?:</span> <span class="s2">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然了，Java8不能示弱啊，所以就有了Optional：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span> <span class="n">computer</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">computer</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Computer:</span><span class="o">:</span><span class="n">getSoundcard</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Soundcard:</span><span class="o">:</span><span class="n">getUSB</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">USB:</span><span class="o">:</span><span class="n">getVersion</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;UNKNOWN&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Opational的更多信息，请参考<a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Oracle官网</a></p>

<h3>结束语</h3>

<ol>
<li>Java需要lambda表达式和Stream API，充分发挥多核并行的优势，大大提高核心库的运行速度。</li>
<li>通过default关键字扩展接口来进行接口演变，同时保持向后兼容。</li>
<li>通过lambda表达式，大大简化了集合类的操作</li>
<li>Java8同时在语言、虚拟机、核心库方面做了大幅度的改进和优化，使得编程更简单，更快速。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（8）- 继续完善]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-08/"/>
    <updated>2015-04-21T14:24:11+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-08</id>
    <content type="html"><![CDATA[<p>到现在为止我们已经完成的差不多了，并且基本的东西都已经学到了，是时候用起来了。
我们的博客还有很多功能需要完善，下面抛砖引玉新增几个功能，还有其他功能等你自己去发现和实现。</p>

<h2>草稿箱</h2>

<p>之前我们新建文章的时候只是是保存到数据库，也就是仅仅保存了草稿，还没有对外发布，
在博客首页上面是看不到的，因为published_date字段为空。这里我们需要添加一个草稿箱的链接。还是四部曲。</p>

<p>第一步，添加一个链接：</p>

<p>打开mysite/templates/mysite/base.html文件，在</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>的上面一行添加如下链接：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二步就是配置urls，在blog/urls.py中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^drafts/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_draft_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_draft_list&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三步在blog/views.py中添加一个view：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_draft_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">published_date__isnull</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">&#39;-created_date&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_draft_list.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>第四步添加一个template，新建blog/templates/blog/post_draft_list.html，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;blog/base.html&#39; %}
</span><span class='line'>{% block content %}
</span><span class='line'>    {% for post in posts %}
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;date&quot;</span><span class="nt">&gt;</span>created: {{ post.created_date|date:&#39;d-m-Y&#39; }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_detail&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>{{ post.text|truncatechars:200 }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>这个模板跟我们的post_list.html非常相似。</p>

<p>刷新首页，点击那个草稿箱链接，看看效果。</p>

<p><img src="http://yidaospace.qiniudn.com/dj024.jpg" alt="" /></p>

<h2>发布功能</h2>

<p>在文章详情页面添加一个发布的按钮，如果觉得合适的时候就能发布文章了。
每个新功能都是四部曲，你照着这四步做就行，你会发现越来越简单。</p>

<p>第一步在页面上添加一个链接或Form表单，这里我们添加一个链接。</p>

<p>打开blog/template/blog/post_detail.html，将下面这段</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if post.published_date %}
</span><span class='line'>    {{ post.published_date }}
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>换成下面这段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if post.published_date %}
</span><span class='line'>    {{ post.published_date }}
</span><span class='line'>{% else %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_publish&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>Publish<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>这里增加了一个else语句，意思是如果没有发布日期的话就增加一个发布按钮。</p>

<p>第二步添加urls配置，打开blog/urls.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/publish/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_publish</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_publish&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三步视图，打开blog/views.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_publish</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">publish</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第四步模板，由于这次没有引入新的模板，所以这步省略。</p>

<p>刷新后看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj025.jpg" alt="" /></p>

<p>发布之后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj026.jpg" alt="" /></p>

<p>注意观察发布前和发布后文章的发布日期那个位置的变化。并且发布后再去首页看看，文章已经可以正常显示了。</p>

<h2>删除功能</h2>

<p>最后当然需要一个删除功能了，还是四部曲！</p>

<p>第一步是在页面上添加链接，打开blog/templates/blog/post_detail.html，在编辑按钮下面一行添加如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_remove&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-remove&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二步配置urls映射，打开blog/urls.py，添加如下一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/remove/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_remove</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_remove&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三步添加视图view，打开blog/views.py，添加一个视图函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_remove</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_list&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第四步模板，由于这次又没有新的模板，所有这步省略。</p>

<p>OK，刷新页面看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj027.jpg" alt="" /></p>

<p>删除后再去首页看，已经没有这篇文章了。</p>

<h2>分页功能</h2>

<p>在首页显示文章列表时候需要分页显示，这时候可以使用django的一个插件叫pagination</p>

<p>设置非常简单，简直是简单到变态。</p>

<p>settings.py文件中</p>

<ol>
<li>INSTALLED_APPS增加'pagination'项</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Application definition</span>
</span><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;blog&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;pagination&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>MIDDLEWARE_CLASSES增加'pagination.middleware.PaginationMiddleware'</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.messages.middleware.MessageMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;pagination.middleware.PaginationMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>TEMPLATE_CONTEXT_PROCESSORS增加'django.core.context_processors.request'</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">TEMPLATE_CONTEXT_PROCESSORS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;django.contrib.auth.context_processors.auth&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.debug&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.i18n&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.media&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.static&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.tz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.contrib.messages.context_processors.messages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;blog.commons.context_processors.custom_proc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;django.core.context_processors.request&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>requirements.txt中增加依赖：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">django</span><span class="o">-</span><span class="n">pagination</span><span class="o">-</span><span class="n">py3</span><span class="o">==</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>修改post_list.html页面，增加autopaginate标签</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">&#39;mysite/base.html&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">blog_tags</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">pagination_tags</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">content</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">list_header</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;box&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">list_header</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">autopaginate</span> <span class="n">posts</span> <span class="mi">10</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">posts</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;post&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_detail&#39; pk=post.pk %}&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;info&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;date&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span><span class="o">|</span><span class="n">date</span><span class="p">:</span><span class="s">&#39;Y年m月d日&#39;</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;comments&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">num_comment</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">num_comment</span> <span class="p">}}</span> <span class="err">条评论</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                        <span class="err">没有评论</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;comments&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">click</span> <span class="p">}}</span> <span class="err">人阅读</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;fixed&quot;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;content&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="n">autoescape</span> <span class="n">off</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">text</span><span class="o">|</span><span class="n">more</span><span class="p">:</span><span class="n">post</span><span class="o">.</span><span class="n">id</span> <span class="p">}}</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="n">endautoescape</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;under&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;categories&quot;</span><span class="o">&gt;</span><span class="err">分类</span><span class="p">:</span> <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_list_by_category&#39; cg=post.category.name %}&quot;</span>
</span><span class='line'>                       <span class="n">rel</span><span class="o">=</span><span class="s">&quot;category tag&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">category</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span>
</span><span class='line'>                    <span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;tags&quot;</span><span class="o">&gt;</span><span class="err">标签</span><span class="p">:</span> <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">tg</span> <span class="ow">in</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">all</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                        <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_list_by_tag&#39; tag=tg.name %}&quot;</span>
</span><span class='line'>                           <span class="n">rel</span><span class="o">=</span><span class="s">&quot;tag&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">tg</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">nbsp</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">paginate</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新下列表首页，看看分页效果。</p>

<p>恭喜你，你可以大声对自己喊：我太棒了。^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（7）- 实现功能]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-07/"/>
    <updated>2015-04-21T14:02:56+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-07</id>
    <content type="html"><![CDATA[<p>到目前为止我们已经完成了一个django应用的所有基础部分。
包括url配置、视图、模型和模板。接下来开始继续完善我们的博客系统了。</p>

<p>首先我们需要一个显示每篇文章的详细页面，对不？</p>

<h2>文章详情</h2>

<p>对于首页每一篇文章，我们希望点击标题后可以进入该文章的阅读页面。修改post_list.html中的标题href如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_detail&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我来详细解释下这个{% url ‘blog.views.post_detail’ pk=post.pk %}，{% %}
表示使用django模板标签而不是普通的HTML文字，这里我们使用了url标签来生成真正的url链接。
blog.views.post_detail是视图的全路径。<!--more--></p>

<h3>url配置</h3>

<p>我们希望文章详细页面的链接类似这样：<a href="http://127.0.0.1:8000/post/1/">http://127.0.0.1:8000/post/1/</a></p>

<p>修改blog/urls.py为下面的这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_detail</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个看起来有点复杂，我们来解释下：</p>

<ol>
<li>^ 代表的是开始</li>
<li>post/表示URL开始必须是post/</li>
<li>(?P[0-9]+) – 这部分比较复杂。它表示一个命名参数pk，
它会捕获url中的这部分然后将它赋值给pk参数传递给视图。
[0-9]表示这部分必须是数字，+表示至少1个数字，也可以多个数字。</li>
<li>/ – 然后后面接/</li>
<li>$ – URL的结尾</li>
</ol>


<h3>post_detail视图</h3>

<p>现在去访问还会报错，因为我们还没有post_detail这个视图。现在我们开始定义它。</p>

<p>修改文件blog/views.py如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">get_object_or_404</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_detail.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;post&#39;</span><span class="p">:</span> <span class="n">post</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>post_detail模板</h3>

<p>然后再增加模板blog/templates/blog/post_detail.html：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;blog/base.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;date&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        {% if post.published_date %}
</span><span class='line'>            {{ post.published_date }}
</span><span class='line'>        {% endif %}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ post.title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>这次我们还是采用模板继承方式，这里我们还用到了模板标签if，这是一个条件判断的标签。</p>

<p>OK，一切都已准备就绪，现在打开首页，然后点击任意一篇文章标题看下结果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj017.jpg" alt="" /></p>

<p>搞定！！</p>

<h2>创建文章</h2>

<p>最后一件事就是要实现文章创建和更新操作，这是博客系统最核心的功能。django自带的admin很酷，但是确很难定制和美化。
forms非常强大和自由，我们可以好好的利用它来实现我们需要的功能。</p>

<p>forms一个很好的特性就是它既能从头定义一个表单，也能创建一个ModelForm来将表单结果保存为一个模型。
而这正是我们想要的功能，我们可以创建一个ModelForm来将表单转换为一个Post模型。</p>

<p>表单对象的定义放在forms.py文件中。我们需要在blog文件夹中创建forms.py文件，结构如下：</p>

<pre><code>blog
   └── forms.py
</code></pre>

<p>在里面写入如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">Post</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;text&#39;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>PostForm需要继承自forms.ModelForm，这样django就能实现某些神奇的效果。
在里面我们定义了元类Meta，然后指定model为Post，还有字段为title和text。
因为我们只需要对外暴露标题和内容，至于作者就是登陆用户了，而发布日期和创建日期就是提交时间。</p>

<p>下面我们要做的就是在view中使用我们的form，并在template中显示它。</p>

<p>我们继续走四个步骤：页面上添加链接, 外加“三部曲”。基本上每个新功能的增加时只需要增加这四个东东就行了。</p>

<h3>增加链接</h3>

<p>打开blog/templates/blog/base.html，在名字为page-header的div中添加一个新增文章的链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候你的base.html应该是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>Django Girls Blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {% block content %}
</span><span class='line'>                {% endblock %}
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>URL</h3>

<p>打开blog/urls.py文件，添加一条配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/new/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_new</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_new&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在它的内容应该是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_detail</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/new/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_new</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_new&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>post_new视图</h3>

<p>打开文件blog/views.py，先引入PostForm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">PostForm</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后增加视图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_new</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_edit.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;form&#39;</span><span class="p">:</span> <span class="n">form</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>post_edit.html模板</h3>

<p>在blog/templates/blog目录新建一个post_edit.html页面，然后写入下列内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;blog/base.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>New post<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span> <span class="na">class=</span><span class="s">&quot;post-form&quot;</span><span class="nt">&gt;</span>{% csrf_token %}
</span><span class='line'>        {{ form.as_p }}
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;save btn btn-default&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>保存后，刷新首页，点击加号那个链接可以看到如下页面：</p>

<p><img src="http://yidaospace.qiniudn.com/dj018.jpg" alt="" /></p>

<p>但是当你写了文字后点击保存后会发现又跑到这个新建页面来了。
因为这个是POST提交，但是URL还是一样的，又会跑到post_new那个视图中去，
这个视图只做了页面跳转来到了这个新建页面。</p>

<p>那么我们需要修改下post_new视图逻辑了：</p>

<p>在头部先引入下面的依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.core.urlresolvers</span> <span class="kn">import</span> <span class="n">reverse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">redirect</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改post_new视图如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_new</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;POST&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">post</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_edit.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;form&#39;</span><span class="p">:</span> <span class="n">form</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面表示我添加完一篇文章后自动跳转到文章详情页面去，保存后效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj019.jpg" alt="" /></p>

<h3>表单验证</h3>

<p>由于我们在Post模型中已经定义了title和text是必需的，django会自动帮我们做验证。
看下如果我们不输入title和text直接提交会怎样：</p>

<p><img src="http://yidaospace.qiniudn.com/dj020.jpg" alt="" /></p>

<p>django已经自动帮我们做了验证，是不是很酷呢？</p>

<h2>编辑文章</h2>

<p>我们刚刚已经实现了新建文章的功能，那么如果是编辑修改文章呢。接下来我会快速的讲解这个流程，现在你应该是可以看得懂的了。</p>

<p>首先打开blog/templates/blog/post_detail.html，添加一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_edit&#39; pk=post.pk %}&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-pencil&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在它的内容是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">&#39;blog/base.html&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">content</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;date&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span> <span class="p">}}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_edit&#39; pk=post.pk %}&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-pencil&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">text</span><span class="o">|</span><span class="n">linebreaks</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改blog/urls.py文件，添加一条：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/edit/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_edit</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_edit&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们会重用模板blog/templates/blog/post_edit.html，
因此只需要修改下view就可以了，打开文件blog/views.py，将下面的内容添加到最后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_edit</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;POST&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span> <span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">post</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_edit.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;form&#39;</span><span class="p">:</span> <span class="n">form</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个跟post_new几乎一模一样，先通过主键查到文章：<code>post = get_object_or_404(Post, pk=pk)</code>，
然后我们在提交和进入编辑页面的时候都将post作为instance参数传递给PostForm。</p>

<p>OK，现在让我们来测试下效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj021.jpg" alt="" /></p>

<p><img src="http://yidaospace.qiniudn.com/dj022.jpg" alt="" /></p>

<p><img src="http://yidaospace.qiniudn.com/dj023.jpg" alt="" /></p>

<p>完美，恭喜你！你的应用已经变得越来越酷了。</p>

<p>如果你想对django的表单有更深入的了解，
请查阅官方文档：<a href="https://docs.djangoproject.com/en/1.7/topics/forms/">https://docs.djangoproject.com/en/1.7/topics/forms/</a></p>

<h2>还有一件事</h2>

<p>发布到heroku上去。不要我每次提醒了吧，Enjoy it！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（6）- 模板继承]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-06/"/>
    <updated>2015-04-21T11:44:21+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-06</id>
    <content type="html"><![CDATA[<h3>什么是模板继承？</h3>

<p>就是网站的多个页面可以共享同一个页面布局或者是页面的某几个部分的内容。
通过这种方式你就需要在每个页面复制粘贴同样的代码了。
如果你想改变页面某个公共部分，你不需要每个页面的去修改，只需要修改一个模板就行了，
这样最大化复用，减少了冗余，也减少了出错的几率，而且你敲的代码也少了。</p>

<h3>创建一个base模板</h3>

<p>一个base模板就是你全站所有页面都会继承的最基本的网站框架模板。我们在blog/templates/blog/中创建一个base.html模板：</p>

<pre><code>blog
└───templates
    └───blog
            base.html
            post_list.html
</code></pre>

<p>打开base.html，然后将post_list.html的所有内容都复制过来，现在它的内容如下：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>Django Girls Blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {% for post in posts %}
</span><span class='line'>                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;p&gt;</span>published: {{ post.published_date }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                {% endfor %}
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在base.html中，将…块替换成下面的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            {% block content %}
</span><span class='line'>            {% endblock %}
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们其实就是将<code>{% for post in posts %}{% endfor %}</code>
替换成了<code>{% block content %}{% endblock %}</code>。
在base.html中我们创建了一个名字为content的block，其他页面可以通过继承base.html，
替换这个content块来生成新的页面，页面其他内容保持不变。</p>

<p>保存后，再修改post_list.html页面，只保留的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% for post in posts %}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>published: {{ post.published_date }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{% endfor %}
</span></code></pre></td></tr></table></div></figure>


<p>然后添加这句到post_list.html页面的最开始部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;blog/base.html&#39; %}
</span></code></pre></td></tr></table></div></figure>


<p>这句话的意思就是该模板继承自blog/base.html模板</p>

<p>还有一步就是要将刚刚的内容放到{% block content %}和
{% endblock content %}之间，这时候整个页面是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;blog/base.html&#39; %}
</span><span class='line'>{% block content %}
</span><span class='line'>{% for post in posts %}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>published: {{ post.published_date }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{% endfor %}
</span><span class='line'>{% endblock content %}
</span></code></pre></td></tr></table></div></figure>


<p>保存后刷新页面，看下是不是能正常工作：</p>

<p><img src="http://yidaospace.qiniudn.com/dj016.jpg" alt="" /></p>

<p>一切都OK…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（5）- 页面美化]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/21/simpleblog-05/"/>
    <updated>2015-04-21T10:23:50+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/21/simpleblog-05</id>
    <content type="html"><![CDATA[<h3>什么是css？</h3>

<p>css是一种用来描述某种标记语言写的web站点的样式语言。
这里我们并不想展开讨论，关于CSS我在这里推荐一个很不错的资源： <a href="http://www.codecademy.com/tracks/web">Codeacademy HTML &amp; CSS course</a></p>

<p>不想从头开始写，因为我们有现成的css框架，没必要重复造轮子。</p>

<h3>使用Bootstrap</h3>

<p>目前最流行的css框架非bootstrap莫属了，官网地址：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a></p>

<p>只需要在你的html模板页面的开始部分添加下面几句就行了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你的工程里面不需要引入任何的文件，因为这里直接引用了bootstrap公共的css和js文件。<!--more--></p>

<p>再次打开模板文件，效果如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj011.jpg" alt="" /></p>

<p>是不是感觉变美观了。^_^</p>

<h3>django静态文件</h3>

<p>这里我还将讲解下django中的静态文件。静态文件就是css、js、图片、视频等等那些内容不会改变的文件，不管任何时候，对于任何用户都是一样的。</p>

<p>css就是一种静态文件，为了自定义css，我们必须先再django中配置，你只需要配置一次就可以了。那让我们马上开始吧！</p>

<h3>django中配置静态文件</h3>

<p>首先我们需要创建一个目录来存储静态文件，在manage.py的同级目录中创建一个static文件夹</p>

<pre><code>mysite
├─── static
└─── manage.py
</code></pre>

<p>打开配置文件mysite/settings.py，在最后面添加如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">STATICFILES_DIRS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&quot;static&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它告知django应该在哪个位置去查找静态文件。</p>

<h3>第一个CSS文件</h3>

<p>现在我们开始创建自己的css文件了，首先在static目录中新建一个css目录，然后在里面创建一个blog.css文件。目录结构如下</p>

<pre><code>static
└─── css
     └───blog.css
</code></pre>

<p>打开文件static/css/blog.css后，添加如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#FCA205</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>h1 a是CSS选择器，上面的意思是在h1标签下的链接a的文字颜色会是#FCA205，其实就是橘黄色，颜色都是用十六进制表示的。</p>

<p>接下来我们要让模板加载静态css文件，打开blog/templates/blog/post_list.html，在最开始部分加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">staticfiles</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在bootstrap引用的后面添加下面这句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">link</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，整个模板文件类似这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% load staticfiles %}
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Django Girls blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        {% for post in posts %}
</span><span class='line'>            <span class="nt">&lt;div&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p&gt;</span>published: {{ post.published_date }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，保存并刷新后看看效果</p>

<p><img src="http://yidaospace.qiniudn.com/dj012.jpg" alt="" /></p>

<p>我想要文字左边的边距大一点，这样会好看些。那么在blog.css中添加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新页面后效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj013.jpg" alt="" /></p>

<p>我还想自定义文字标题的字体，在post_list.html模板的中添加如下一句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句会引入Google的一个字体Lobster，然后修改blog.css中的h1 a的样式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#FCA205</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Lobster&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj014.jpg" alt="" /></p>

<h3>CSS中的class</h3>

<p>在CSS中有一个class的概念，它可以让你只改变HTML中某一部分的样式而不会影响到其他部分。</p>

<p>这里我们将区别标题头和文章本身的样式。</p>

<p>在post_list.html中添加如下的标题段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>文章列表段修改如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            {% for post in posts %}
</span><span class='line'>                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;p&gt;</span>published: {{ post.published_date }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            {% endfor %}
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>blog.css样式修改如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.page-header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#ff9400</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.page-header</span> <span class="nt">h1</span><span class="o">,</span> <span class="nc">.page-header</span> <span class="nt">h1</span> <span class="nt">a</span><span class="o">,</span> <span class="nc">.page-header</span> <span class="nt">h1</span> <span class="nt">a</span><span class="nd">:visited</span><span class="o">,</span> <span class="nc">.page-header</span> <span class="nt">h1</span> <span class="nt">a</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">36pt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Lobster&#39;</span><span class="o">,</span> <span class="k">cursive</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.date</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#828282</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.save</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.post-form</span> <span class="nt">textarea</span><span class="o">,</span> <span class="nc">.post-form</span> <span class="nt">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.top-menu</span><span class="o">,</span> <span class="nc">.top-menu</span><span class="nd">:hover</span><span class="o">,</span> <span class="nc">.top-menu</span><span class="nd">:visited</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">26pt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-right</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.post</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">70px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.post</span> <span class="nt">h1</span> <span class="nt">a</span><span class="o">,</span> <span class="nc">.post</span> <span class="nt">h1</span> <span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存这些文件后，刷新页面，看看，是不是很酷了：</p>

<p><img src="http://yidaospace.qiniudn.com/dj015.jpg" alt="" /></p>

<p>已经比较美观了。上面的css应该看起来不会那么难，可以自己试着去修改它，没关系的，反正出错了可以撤销。最好多练习才行。</p>

<p>下一节我将介绍django中模板的继承机制！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（4）- 三部曲]]></title>
    <link href="http://yeangpeng.tech/blog/2015/04/20/simpleblog-04/"/>
    <updated>2015-04-20T19:16:02+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/04/20/simpleblog-04</id>
    <content type="html"><![CDATA[<h3>什么是三部曲？</h3>

<p>其实在django中实现一个功能只需要三个步骤即可，这里我姑且叫它三部曲。</p>

<p>这三部曲就是：</p>

<ol>
<li>定义urls映射</li>
<li>定义views</li>
<li>定义templates</li>
</ol>


<h3>什么是URL？</h3>

<p>URL就算一个WEB地址，你在浏览器输入这个地址，然后浏览器返回相应的网页给你。
比如<a href="http://djangogirls.com%E6%98%AF%E4%B8%80%E4%B8%AAURL%EF%BC%8C%E8%80%8C127.0.0.1:8000%E5%90%8C%E6%A0%B7%E4%B9%9F%E6%98%AF%E4%B8%AAURL%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%B0%B1%E6%98%AFhttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E3%80%82">http://djangogirls.com%E6%98%AF%E4%B8%80%E4%B8%AAURL%EF%BC%8C%E8%80%8C127.0.0.1:8000%E5%90%8C%E6%A0%B7%E4%B9%9F%E6%98%AF%E4%B8%AAURL%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%B0%B1%E6%98%AFhttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E3%80%82</a></p>

<h3>Django中的URL工作原理</h3>

<p>我们打开mysite/urls.py文件，会发现类似下面这样：<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c"># Examples:</span>
</span><span class='line'>    <span class="c"># url(r&#39;^$&#39;, &#39;mysite.views.home&#39;, name=&#39;home&#39;),</span>
</span><span class='line'>    <span class="c"># url(r&#39;^blog/&#39;, include(&#39;blog.urls&#39;)),</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的两行注释先不要管，这个以后再用到。
django默认已经为我们添加了admin的URL配置。
当django碰到以admin/开头的URL的时候会去admin.site.urls里面去寻找对应的匹配。
所有和admin相关的urls配置都写在一个文件中，这样就便于管理了。</p>

<h3>正则表达式</h3>

<p>你可以看到上面的url用到了正则表达式，比如’<sup>admin</sup>/’、’^$’等等，
django是通过正则式来匹配URL的。关于正则式这里不想展开太多。可以参考相关数据和教程。</p>

<h3>第一个django url配置</h3>

<p>现在我们要将<a href="http://127.0.0.1:8000/%E8%BF%99%E4%B8%AA%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E6%9C%80%E6%96%B0%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E9%9D%A2%E5%8E%BB%E3%80%82%E4%B8%80%E8%88%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5%E5%9F%BA%E6%9C%AC%E9%83%BD%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%E3%80%82">http://127.0.0.1:8000/%E8%BF%99%E4%B8%AA%E9%A6%96%E9%A1%B5%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E6%9C%80%E6%96%B0%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E9%9D%A2%E5%8E%BB%E3%80%82%E4%B8%80%E8%88%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5%E5%9F%BA%E6%9C%AC%E9%83%BD%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%E3%80%82</a></p>

<p>为了保持mysite/urls.py配置文件的简介，我们最好将博客的url配置放到单独的文件中。在mysite/urls.py中去将它引进来即可。</p>

<p>那么你的mysite/urls.py文件现在类似于这样了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>blog.urls</h3>

<p>创建文件blog/urls.py，然后加入下列内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们将r’^$’的url映射到视图views.post_list。</p>

<p>不过你要是现在就访问首页<a href="http://127.0.0.1:8000/%E7%9A%84%E8%AF%9D%E4%BC%9A%E6%8A%A5%E9%94%99%E7%9A%84%E3%80%82">http://127.0.0.1:8000/%E7%9A%84%E8%AF%9D%E4%BC%9A%E6%8A%A5%E9%94%99%E7%9A%84%E3%80%82</a></p>

<p><img src="http://yidaospace.qiniudn.com/dj006.jpg" alt="" /></p>

<p>为啥，因为你的视图views.post_list现在没有实现啊，找不到这个方法！</p>

<p>那么接下来我们就来讲解view的实现了。</p>

<h3>什么是view？</h3>

<p>view也叫视图，在django中它存放了实际的业务逻辑。这个跟我们通常所说的MVC中的view是不一样的。</p>

<p><strong>django的MTV模式</strong></p>

<p>这里我稍微解释下django的结构，一般我们称之为MTV模式：</p>

<ol>
<li>M 代表模型（Model），即数据存取层。该层处理与数据相关的所有事务：如何存取、如何确认有效性、包含哪些行为以及数据之间的关系等。</li>
<li>T 代表模板(Template)，即表现层。该层处理与表现相关的决定：如何在页面或其他类型文档中进行显示。</li>
<li>V 代表视图（View），即业务逻辑层。该层包含存取模型及调取恰当模板的相关逻辑。你可以把它看作模型与模板之间的桥梁。</li>
</ol>


<p>那么通常意义的控制器Controller去哪里了呢，细心的童鞋应该会猜到了，那就是我们上一节所讲的urls.py配置文件。</p>

<p>一句话总结：URLconf+MTV构成了django的总体架构。</p>

<p><strong>blog/views.py</strong></p>

<p>这个文件初始内容是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create your views here.</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加一个最简单的视图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_list.html&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了一个方法post_list，它的参数是request，使用render函数返回一个html模板blog/post_list.html。</p>

<p>接下来我们访问下首页，OMG，又出错了：</p>

<p><img src="http://yidaospace.qiniudn.com/dj007.jpg" alt="" /></p>

<p>这次报的错是模板blog/post_list.html找不到。这个是显而易见的，因为我们根本还没有定义这个html模板。</p>

<p>别着急，继续沿着教程往下看就行…</p>

<h3>什么是模板？</h3>

<p>一个模板就是一个使用固定格式呈现动态内容的可重用的文件。
比如你可以使用一个模板来写邮件，每封邮件可能有不同的内容，寄给不同的人，但是它们的格式是一样的。</p>

<p>Django中的模板使用HTML文件，至于神马是HTML，这个去参考下W3C或者自行google下，
不过如果做web开发的人不懂HTML，请不要告诉别人我认识你。^_^</p>

<p><strong> 第一个模板 </strong></p>

<p>创建一个模板就是创建一个HTML文件。模板文件存储在blog/templates/blog目录下面，
首先在blog目录下创建templates目录，然后再在templates目录下创建blog目录，至于为啥要这么做，
先不用管，django里面很多目录都是约定好的，这个就跟maven是一样的，约定高于配置。
所以你先照着做就是了。目录结构如下：</p>

<pre><code>blog
└───templates
    └───blog
</code></pre>

<p>然后在blog/templates/blog目录下创建一个post_list.html文件，现在里面还没有内容。</p>

<p>这时候再次访问首页，效果如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj008.jpg" alt="" /></p>

<p>一片空白，但没有报错了。</p>

<p>在post_list.html中添加点东西：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Hi there!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>It works!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次访问<a href="http://192.168.203.95:8000/%EF%BC%9A">http://192.168.203.95:8000/%EF%BC%9A</a></p>

<p><img src="http://yidaospace.qiniudn.com/dj009.jpg" alt="" /></p>

<h3>动态模板</h3>

<p>不过目前为止我们还只能显示静态的网页。怎样将文章列表在首页显示出来呢？</p>

<p>我们已经有了模型Post，有了模板post_list.html，怎样使得模型数据在模板中显示出来呢，
这个就是视图的功能了，实际上，django中的视图的作用就是连接模型和模板的桥梁。
在视图中，通过QuerySet将数据库中的数据检索出来，然后传递给模板，模板负责显示出来。</p>

<p>首先打开blog/views.py，它目前的内容是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_list.html&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候我们将Post模型导入进来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意我们还是用到了相对导入，这是python3的强大功能。</p>

<h3>QuerySet</h3>

<p>是时候请出QuerySet了，在模型和ORM小节我们已经介绍过。</p>

<p>现在我们想要将数据库中的文章都检索出来并且按照发布日期逆序排序，使得最新的文章放前面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">published_date__isnull</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">&#39;-published_date&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_list.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意render函数中最后一个参数{‘posts': posts}，这个就是用来给模板传递数据的。</p>

<h3>模板标签</h3>

<p>HTML页面只识别HTML标签，那么怎样让生成动态的内容呢？答案就是使用django自带的模板标签，
包括了判断、循环、管道等语法。我们已经获取了文章的列表了，那么可以使用for循环来生成相应的HTML页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Django Girls Blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>{% for %}</code> 和<code>{% endfor %}</code>之间会循环每个post，然后每次生成一段</p>

<p>现在再次访问首页，效果如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj010.jpg" alt="" /></p>

<h3>别忘了一件事</h3>

<p>别忘了把它push到heroku上面去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>git add .
</span><span class='line'>git commit -m &#39;动态文章列表首页&#39;
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>恭喜你，目前为止基本的全程已经贯通了。打开admin后添加几篇文章，
记得填上发布日期，再刷新下首页，看会不会显示出来。</p>

<p>好了，这时候你可以出门左拐去小卖部给自己买点棒棒糖奖励下自己了！</p>

<p>不过我们的教程还没完，怎样让页面变得漂亮呢？请看下一节。</p>
]]></content>
  </entry>
  
</feed>
