<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gtk3 | Hi, I’m Yang Peng]]></title>
  <link href="http://yeangpeng.tech/blog/categories/gtk3/atom.xml" rel="self"/>
  <link href="http://yeangpeng.tech/"/>
  <updated>2016-02-18T15:37:18+08:00</updated>
  <id>http://yeangpeng.tech/</id>
  <author>
    <name><![CDATA[Yang Peng]]></name>
    <email><![CDATA[me@yangpeng.tech]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Embedding PLplot in Gtk DrawingAreas]]></title>
    <link href="http://yeangpeng.tech/blog/2015/09/29/embedding-plplot-in-gtk-drawingareas/"/>
    <updated>2015-09-29T18:43:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2015/09/29/embedding-plplot-in-gtk-drawingareas</id>
    <content type="html"><![CDATA[<p><strong>Update: I have turned this post into a Github project called <a href="https://github.com/tschoonj/gtkmm-plplot">Gtkmm-PLplot</a>, under the GPLv3</strong></p>

<p>测试中文显示效果Scientific plotting and Gtk+ have never been good friends. Over the years there have been a number of efforts like <a href="http://gtkextra.sourceforge.net/cms/">GtkExtra</a>, <a href="http://sourceforge.net/projects/gtkdatabox/">GtkDataBox</a>, <a href="https://github.com/drahnr/goatplot">GoatPlot</a>, <a href="http://gtkgraph.sourceforge.net">GtkGraph</a>&hellip; Unfortunately these packages all appear to share a lack of active development (most are in fact abandoned), poor to non-existent documentation and in most cases lack of support for Gtk+3.</p>

<p>For about a year or two I have been a minor contributor to GtkExtra, and I had started migrating the plotting widgets to Gtk+3 but I had to abandon my effort due to lack of knowledge of Cairo and Gtk+ internals, and more importantly a lack of time. I still use it in the Gtk+2 based GUI of my <a href="https://github.com/tschoonj/xmimsim">XMI-MSIM</a> package though.</p>

<p>I have recently been looking into alternatives to GtkExtra as I switched to Gtk+3 (actually Gtkmm3, as I mostly code in C++ nowadays) for my new projects (e.g. <a href="https://github.com/tschoonj/bam-utils">BAM-utils</a>). I came across a package called <a href="http://plplot.sourceforge.net">PLplot</a>, which I used a long time ago for producing simple plots in PNG format in command-line utilities.</p>

<p>This package used to come with Gnome bindings that ensured easy integration into Gnome based GUIs but it looks like they have been removed some time ago (I am referring here to PLplot 5.11.0, the current stable release). Instead the documentation mentions support for a <a href="http://cairographics.org">cairo</a> driver, which can be embedded in Gtk based user interfaces. Currently the documentation that covers this feature is limited to a README file and a minimal cairo-only example that demonstrates how to use the PLplot cairo driver through the <code>extcairo</code> device by producing a PostScript file.</p>

<p>PLplot has the great advantage over the aforementioned Gtk+ based packages that it is very actively developed by several volunteers and comes with decent documentation, including a lot of examples written in the many languages supported by the toolkit. On the downside, the developers seem to have the unfortunate habit of regularly breaking backwards compatibility in their releases, as they did in their latest 5.11.0 release both at the API level as well as by changing the name of the pkg-config packages&hellip;</p>

<p>In this blogpost I will explain how I managed to embed PLplot into Gtkmm through the GtkDrawingArea widget class, and demonstrate it using a small program that allows one to zoom in on the data, save the plot in a file and print it.</p>

<!--more-->


<h1>Compiling PLplot on Windows 64-bit using TDM-GCC</h1>

<p>It would be remiss if I didn&rsquo;t share the problems I encountered compiling PLplot on my Windows 7 64-bit virtual machine using the TDM-GCC provided MinGW-w64 5.1.0 gcc and g++ compilers.
I used the following command to setup the <a href="http://www.cmake.org">CMake</a> based installation system:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake -G <span class="p">&amp;</span>ldquo<span class="p">;</span>MSYS Makefiles<span class="p">&amp;</span>rdquo<span class="p">;</span> -DENABLE_DYNDRIVERS<span class="o">=</span>OFF -DPLD_wingcc<span class="o">=</span>OFF ..
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>DYNDRIVERS</code> option determines whether the drivers will be loaded at runtime using the libtool ltdl interface, or if they will be built into the main shared library. I chose the latter as this makes distribution easier (less files to copy and no need to set a environment variable or use the registry to get the locations of these drivers). Also I had a feeling PLplot has not been well-tested on Windows, so I prefer avoiding something potentially dangerous as loading dynamically loading modules using libltdl, a library I have no experience with.</p>

<p>I turned of the <code>wingcc</code> driver well simply because the linker consistently crashed when generating the dll. Again something that does not lead me to exude confidence regarding stability of PLplot on Windows 64-bit, but this could also have to do with the immature nature of MinGW-w64. Fortunately I don&rsquo;t need this driver so no great loss here&hellip;</p>

<p>The <code>cmake</code> invokation generated the necessary Makefiles, and I started the compilation using a good old fashioned <code>make</code>.</p>

<p>I noticed that a compilation error was generated in <code>drivers/cairo.c</code>, which I managed to fix after some work with the following patch:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;diff &amp;ndash;git a/drivers/cairo.c b/drivers/cairo.c
</span><span class='line'><span class="gh">index 8d43ee9..91fbc7d 100644</span>
</span><span class='line'>&amp;mdash; a/drivers/cairo.c
</span><span class='line'><span class="gi">+++ b/drivers/cairo.c</span>
</span><span class='line'><span class="gu">@@ -43,6 +43,7 @@</span>
</span><span class='line'> // Driver-dependent includes
</span><span class='line'> #if defined ( PLD_wincairo )
</span><span class='line'> #include &amp;lt;windows.h&gt;
</span><span class='line'><span class="gi">+#include &amp;lt;cairo-win32.h&gt;</span>
</span><span class='line'> #endif
</span><span class='line'> #if defined ( PLD_xcairo )
</span><span class='line'> #include &amp;lt;cairo-xlib.h&gt;
</span><span class='line'><span class="gu">@@ -3289,7 +3290,7 @@ LRESULT CALLBACK PlplotCairoWndProc( HWND hwnd, UINT nMsg, WPARAM wParam, LPARAM</span>
</span><span class='line'>     }
</span><span class='line'>     else
</span><span class='line'>     {
</span><span class='line'><span class="gd">-        pls = (PLStream &lt;em&gt;) GetWindowLong( hwnd, GWL_USERDATA ); // Try to get the address to pls for this window</span>
</span><span class='line'><span class="gi">+        pls = (PLStream &lt;/em&gt;) GetWindowLongPtr( hwnd, GWLP_USERDATA ); // Try to get the address to pls for this window</span>
</span><span class='line'>         if ( pls )                                              // If we got it, then we will initialise this windows plplot private data area
</span><span class='line'>         {
</span><span class='line'>             dev = (PLCairo &lt;em&gt;) pls-&gt;dev;
</span><span class='line'><span class="gu">@@ -3496,7 +3497,7 @@ void plD_init_wincairo( PLStream &lt;/em&gt;pls )</span>
</span><span class='line'> // process this window
</span><span class='line'> //&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt; SetWindowLong( aStream-&gt;hwnd, GWL_USERDATA, (long) pls );&lt;/li&gt;
</span><span class='line'>&lt;li&gt; SetWindowLongPtr( aStream-&gt;hwnd, GWLP_USERDATA, (LONG_PTR) pls );
</span><span class='line'> aStream-&gt;SCRN_hdc = aStream-&gt;hdc = GetDC( aStream-&gt;hwnd );&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; //
</span></code></pre></td></tr></table></div></figure></p>

<p>This patch clearly shows that the developers have never tried compiling PLplot with a 64-bit compiler on Windows, neither with gcc nor Visual Studio, as they would have run into the same issue: <code>GWL_USERDATA</code> is simply not defined for 64-bit compilations, and GetWindowLong/SetWindowLong have been <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633584.aspx">superseded</a> by GetWindowLongPtr/SetWindowLongPtr.</p>

<p>Either way, I submitted this patch <a href="https://sourceforge.net/p/plplot/patches/31/">upstream</a> and I hope that it will be included in the next release (already merged into the master branch).</p>

<p>Obviously no problems arised while compiling PLplot on my Mac and I expect the same for Linux.</p>

<h1>Setting up the build environment</h1>

<p>As usual in my projects, I chose to use the GNU buildtools for my build environment, which in this case consisted of a simple <code>configure.ac</code> and <code>Makefile.am</code>. The former checks that we have a suitable C++ compiler with C++11 standard support as well as the GNU extensions. For this I am using the latest version of the autoconf macro called <code>ax_cxx_compile_stdcxx_11.m4</code>, which I downloaded from the <a href="http://www.gnu.org/software/autoconf-archive/">autoconf archive</a>.</p>

<p>Next I check for the presence of Gtkmm (version 3!) and PLplot. I took care to provide support for both the old and new name of the PLplot C++ bindings, respectively called <code>plplotd-c++</code> and <code>plplot-c++</code>. Using the compilation test provided by the autoconf macro <code>AC_TRY_COMPILE</code> I test for the presence of the <code>extcairo</code> device that I will be using to connect a Cairo context with the PLplot plotting stream.</p>

<h1>The PLplotDrawingArea class</h1>

<p>Moving on to the interesting part: the definition of our class. Obviously we want it to be derived from Gtkmm&rsquo;s <code>DrawingArea</code> class. Instances of this class are basically blank widgets for which the user is required to override the default handler <code>on_draw</code> for the signal <code>signal_draw</code>, as is covered in the reference manual of both <a href="https://developer.gnome.org/gtk3/stable/GtkDrawingArea.html">Gtk</a> and <a href="https://developer.gnome.org/gtkmm/stable/classGtk_1_1DrawingArea.html">Gtkmm</a>.</p>

<p>The class definition follows in the following excerpt. I will discussing the different methods in the following sections.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">PLPLOTDRAWINGAREA_H</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PLPLOTDRAWINGAREA_H</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">gtkmm</span><span class="o">/</span><span class="n">drawingarea</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">plstream</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="n">sigc</span><span class="o">::</span><span class="n">signal</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">void</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span> <span class="o">&gt;</span> <span class="n">type_signal_select_region</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">PLplotDrawingArea</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Gtk</span><span class="o">::</span><span class="n">DrawingArea</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">x_title</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">y_title</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">plot_title</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start_event</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">end_event</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">selecting</span><span class="p">;</span>
</span><span class='line'>  <span class="n">plstream</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x_pl_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">//our handler for the on_draw signal</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">on_draw</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">cr</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// This is the default handler for the signal signal_select_region().</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">on_select_region</span><span class="p">(</span><span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_button_press_event</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_button_release_event</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">on_motion_notify_event</span> <span class="p">(</span><span class="n">GdkEventMotion</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>  <span class="n">type_signal_select_region</span> <span class="n">_signal_select_region</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PLplotDrawingArea</span><span class="p">(</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">y</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x_title</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">y_title</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">plot_title</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">convert_plplot_to_cairo_coordinates</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x_pl</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y_pl</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">double</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x_cr</span><span class="p">,</span> <span class="kt">double</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">y_cr</span><span class="p">);</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="o">~</span><span class="n">PLplotDrawingArea</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pls</span><span class="p">)</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">type_signal_select_region</span> <span class="n">signal_select_region</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_signal_select_region</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">void</span> <span class="n">set_region</span><span class="p">(</span><span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">void</span> <span class="n">draw_plot</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cr</span><span class="p">,</span> <span class="n">plstream</span> <span class="o">*</span><span class="n">_pls</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>The constructor</h2>

<p>Let&rsquo;s start of with the constructor of the class. In this simple example I will assume that user wants to produce a simple two-dimensional plot defined by a vector of X-values and one of Y-values.Obviously our widget class has the potential of being used for far more complex plots after some re-writing and extending but is outside the scope of this blogpost. The code:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">PLplotDrawingArea</span><span class="p">(</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PLFLT</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">y</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x_title</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">y_title</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">plot_title</span>
</span><span class='line'><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="p">),</span>
</span><span class='line'>    <span class="n">y</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x_title</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">y_title</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">y_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">plot_title</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">plot_title</span><span class="p">),</span>
</span><span class='line'>    <span class="n">start_event</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">start_cairo</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">end_event</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">end_cairo</span><span class="p">{</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="n">selecting</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span>
</span><span class='line'>    <span class="n">pls</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x_pl_range</span><span class="p">{</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">()),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span>
</span><span class='line'>    <span class="n">y_pl_range</span><span class="p">{</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span>
</span><span class='line'>               <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">max_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">())}</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>  <span class="n">add_events</span><span class="p">(</span><span class="n">Gdk</span><span class="o">::</span><span class="n">POINTER_MOTION_MASK</span> <span class="o">|</span>
</span><span class='line'>             <span class="n">Gdk</span><span class="o">::</span><span class="n">BUTTON_PRESS_MASK</span> <span class="o">|</span>
</span><span class='line'>             <span class="n">Gdk</span><span class="o">::</span><span class="n">BUTTON_RELEASE_MASK</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">//connect our default signal handler</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">signal_select_region</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span><span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span>
</span><span class='line'>             <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">on_select_region</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Our input vectors are referred to here as <code>_x</code> and <code>_y</code> in the argument list. Furthermore, the user is expected to provide axes titles and a general plot title. The initialization list shows that we will be using member variable copies of these 5 arguments. Note that I am using the PLplot <code>PLFLT</code> datatype here for the vectors, which is typedef'ed to the double datatype.
The rest of the list deals with private variables that deal with the selection box (<code>start_event</code>, <code>start_cairo</code>, <code>end_event</code>, <code>end_cairo</code> and <code>selecting</code>), our PLplot stream object <code>pls</code> and the plotting range determined by <code>x_pl_range</code> and <code>y_pl_range</code>, which are initially set to cover the entire area provided by the data.
The method body does only two things: it makes sure that the mouse events necessary to drag the selection box will be emitted as signals.
Our class defines one signal called <code>signal_on_select_region</code> (after the similarly named <code>GtkPlotCanvas</code> signal from GtkExtra). This signal will be emitted whenever a selection box has been dragged. Its default handler is the <code>on_select_region</code> virtual method, which does absolutely nothing!
So it is up to the user to either derive PLplotDrawing area with an overriding <code>on_select_region</code> method, or alternatively to connect to this signal as will be shown later on in this example. A perfect candidate (with the right function prototype) for this task is the <code>set_region</code> method, which will reduce the plot range to the selected box. This will be demonstrated further along this example when we will be discussing the Window that will hold our PLplotDrawingArea.</p>

<h2>The on_draw method</h2>

<p>The <code>on_draw</code> method will be the most important one of our class as it needs to call the PLplot routines to generate our plot. Let&rsquo;s have a closer look at it:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">on_draw</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">cr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Gtk</span><span class="o">::</span><span class="n">Allocation</span> <span class="n">allocation</span> <span class="o">=</span> <span class="n">get_allocation</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">allocation</span><span class="p">.</span><span class="n">get_width</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">allocation</span><span class="p">.</span><span class="n">get_height</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">pls</span><span class="p">)</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">pls</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pls</span> <span class="o">=</span> <span class="k">new</span> <span class="n">plstream</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">draw_plot</span><span class="p">(</span><span class="n">cr</span><span class="p">,</span> <span class="n">pls</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">selecting</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">set_line_width</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">rectangle</span><span class="p">(</span><span class="n">MIN</span><span class="p">(</span><span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">MIN</span><span class="p">(</span><span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">fabs</span><span class="p">(</span><span class="n">end_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                  <span class="n">fabs</span><span class="p">(</span><span class="n">end_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">start_cairo</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>    <span class="n">cr</span><span class="o">-&gt;</span><span class="n">stroke</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">convert_plplot_to_cairo_coordinates</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                                      <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">convert_plplot_to_cairo_coordinates</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                                      <span class="n">x_cr_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">y_cr_range</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The method provides as input argument a pointer to the Cairo context that we will draw to.
We start by querying the dimensions of the widget, followed by allocating memory for our PLplot stream <code>pls</code>, which will next be provided to a method called <code>draw_plot</code> that will take care of the actual PLplot commands:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">draw_plot</span><span class="p">(</span><span class="k">const</span> <span class="n">Cairo</span><span class="o">::</span><span class="n">RefPtr</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Cairo</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cr</span><span class="p">,</span> <span class="n">plstream</span> <span class="o">*&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">sdev</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">extcairo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">spage</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">Gdk</span><span class="o">::</span><span class="n">RGBA</span> <span class="n">color</span> <span class="o">=</span> <span class="n">get_style_context</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">get_color</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Gdk</span><span class="o">::</span><span class="n">Cairo</span><span class="o">::</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="n">cr</span><span class="p">,</span> <span class="n">color</span><span class="p">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">(</span><span class="n">PLESC_DEVINIT</span><span class="p">,</span> <span class="n">cr</span><span class="o">-&gt;</span><span class="n">cobj</span><span class="p">());</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">col0</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">env</span><span class="p">(</span><span class="n">x_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>            <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">y_pl_range</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>            <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">lab</span><span class="p">(</span><span class="n">x_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">y_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">plot_title</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pls</span><span class="o">-&gt;</span><span class="n">col0</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_pls</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The main reason I am not including this code in <code>on_draw</code> is that gives me the possibility to apply it to Cairo contexts that are not connected to Gtk widgets, but instead to Cairo surfaces for PostScript, PNG and PDF backends as I will demonstrate later on.</p>

<p>Let&rsquo;s go through the different PLplot commands. Their calling order is <em>very</em> important.</p>

<ol>
<li><code>_pls-&gt;sdev("extcairo")</code>: ensures that our stream will be using the <code>extcairo</code> device. This entire class hinges on the availability of this device.</li>
<li><code>_pls-&gt;spage(0.0, 0.0, width, height, 0, 0)</code>: sets the dimensions of the total plotting area (including axes titles etc.!) available to PLplot equal to the widget dimensions.</li>
<li><code>_pls-&gt;init()</code>: initialize the plstream. PLplot internal housekeeping.</li>
<li><code>_pls-&gt;cmd(PLESC_DEVINIT, cr-&gt;cobj())</code>: connects the PLplot internals to our Cairo context. Note the call to <code>cobj()</code>: <code>cr</code> is a Cairomm object and <code>cmd</code> expects a plain Cairo context pointer.</li>
<li><code>_pls-&gt;col0(0)</code>: sets the current color to the first entry in the default colortable: black</li>
<li><code>_pls-&gt;env(...)</code>: defines the range of our X- and Y-data that will be plotted. By default equal to the entire data-range but may be changed when properly handled with <code>signal_select_region</code> and <code>set_region</code>. The last argument determines the axes types.</li>
<li><code>_pls-&gt;lab(...)</code>: sets the axes and plot labels.</li>
<li><code>_pls-&gt;col0(1)</code>: switch to the second color of the colortable: red.</li>
<li><code>_pls-&gt;line(x.size(), &amp;x[0], &amp;y[0])</code>: plot the graph</li>
</ol>


<p>That&rsquo;s it! For more information about the commands, check the extensive PLplot documentation.</p>

<p>Back to <code>on_draw</code>: after the call to <code>draw_plot</code> we find some code that will draw the selection box (if necessary) using some basic Cairo commands. The last two lines are calls to <code>convert_plplot_to_cairo_coordinates</code>, which provide the box selection code with the Cairo coordinates of the plot grid, and will be used to constrain the selection box to the plot grid. These function needs to be called in every call to <code>on_draw</code> as it is the only way to take into account window resizing.</p>

<h2>Dragging the selection box</h2>

<p>An important feature typically found in plotting toolkits is the ability to drag selection boxes. This could be used for example for zooming in on a particular range of the data or for selecting items such as labels that could then be moved around or deleted. To implement this feature one needs to connect signal handlers to signals emitted when a mouse button is pressed and released, as well as when the mouse pointer is moved around. This is why the class contains the three methods <code>on_button_press_event</code>, <code>on_button_release_event</code> and <code>on_motion_notify_event</code>. In order to ensure that the corresponding signals are emitted, the events were added to newly created instances of our class in the constructor.</p>

<p>The hardest part when writing these methods is dealing with the different coordinate systems involved, which can be explained as follows:</p>

<ol>
<li>The Gdk events provide widget coordinates with a coordinate system with an origin in the top left corner of the widget.</li>
<li>Cairo on the other hand works with a coordinate system that has an origin in the lower left corner.</li>
<li>Using the widget height and width, these can be easily translated to normalized coordinates.</li>
<li>To determine the corresponding PLplot coordinates inside our data grid, we feed the normalized Cairo coordinates to PLplot&rsquo;s <code>calc_world</code> function.</li>
</ol>


<p>Using this information we can then properly set up our methods that deal with the mouse events.
Basically, while the mouse button is pressed in and the cursor is moved around, a selection box will be shown (look at the call to <code>rectangle</code> in <code>on_draw</code>), that will be constrained to the data grid, by setting appropriate limits to the drawing starting point and dimensions of our box. Furthermore, we do not allow the box to be drawn when the the button press event is outside of this box.
When the mouse button is released, the box is removed from the widget but the <code>signal_select_region</code> is emitted with the PLplot coordinates of the press and release events, resulting in a call to <code>on_select_region</code>.</p>

<h1>Testing our PLplotDrawingArea widget</h1>

<p>In order to demonstrate the capabilities of this widget, I have written a very basic program that tries to emulate my example from my <a href="http://tschoonj.github.io/blog/2013/07/22/exporting-and-printing-a-gtkextra-plot-canvas/">previous post on GtkExtra printing and exporting</a>. However, I have added two extra capabilities: the possibility to zoom in with the selection box and window resizing.</p>

<p>The test program is an instance of my class called PLplotWindow, which in turn derives from Gtk::Window, and contains only a few member variables corresponding to the buttons and our PLplot drawing area, as well as a Gtk::Grid instance to organize them into the window.</p>

<p>Several methods were added to handle the button click signals that allow to export and print the plot, as well as to quit the app. The code to print and export the plot is basically a literal translation of the corresponding functions in my GtkExtra post from C to C++ and will not be covered here.</p>

<p>More interestingly is the <code>on_plplot_drawing_area_double_click</code> method, which deals with a problem we have not addressed so far: after zooming in on the plot, what if we want to see to the full data range again? I had not added a method for this to our PLplotDrawingArea class (though I could have), so we have to address this issue here. This simple method consists of the following:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">PLplotWindow</span><span class="o">::</span><span class="n">on_plplot_drawing_area_double_click</span><span class="p">(</span><span class="n">GdkEventButton</span> <span class="o">*</span><span class="n">event</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ymax</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">GDK_2BUTTON_PRESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_region</span><span class="p">(</span><span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">,</span> <span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Since the libsigc++ slot prototype for <code>signal_button_press_event</code> does not provide these 4 double variables, we have to provide them when we connect the signal to our handler using <code>sigc::bind</code> in the constructor:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">signal_button_press_event</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span>
</span><span class='line'>      <span class="n">sigc</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">this</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">PLplotWindow</span><span class="o">::</span><span class="n">on_plplot_drawing_area_double_click</span><span class="p">),</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">()),</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">max_element</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">())));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The constructor also contains our signal handler for PLplotDrawingArea&rsquo;s <code>signal_select_region</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">signal_select_region</span><span class="p">().</span><span class="n">connect</span><span class="p">(</span>
</span><span class='line'>     <span class="n">sigc</span><span class="o">::</span><span class="n">mem_fun</span><span class="p">(</span><span class="n">plplot_drawing_area</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">PLplotDrawingArea</span><span class="o">::</span><span class="n">set_region</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As stated before, we simply make use of our <code>set_region</code> method here which takes care of everything.</p>

<p>One last thing I feel is worth showing here is the following excerpt from the constructor:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">set_default_size</span><span class="p">(</span><span class="mi">720</span><span class="p">,</span> <span class="mi">580</span><span class="p">);</span>
</span><span class='line'><span class="n">Gdk</span><span class="o">::</span><span class="n">Geometry</span> <span class="n">geometry</span><span class="p">;</span>
</span><span class='line'><span class="n">geometry</span><span class="p">.</span><span class="n">min_aspect</span> <span class="o">=</span> <span class="n">geometry</span><span class="p">.</span><span class="n">max_aspect</span> <span class="o">=</span> <span class="kt">double</span><span class="p">(</span><span class="mi">720</span><span class="p">)</span><span class="o">/</span><span class="kt">double</span><span class="p">(</span><span class="mi">580</span><span class="p">);</span>
</span><span class='line'><span class="n">set_geometry_hints</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="n">geometry</span><span class="p">,</span> <span class="n">Gdk</span><span class="o">::</span><span class="n">HINT_ASPECT</span><span class="p">);</span>
</span><span class='line'><span class="n">set_title</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">PLplot</span> <span class="n">Gtkmm</span> <span class="n">DrawingArea</span> <span class="n">example</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_hexpand</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="n">plplot_drawing_area</span><span class="p">.</span><span class="n">set_vexpand</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This part ensures that no matter how the window is resized, the aspect ratio is set to 720/580.
For this to work properly it is crucial that the drawing area is allowed to expand in both directions. Upon a resize, the plot will then be updated accordingly by the <code>on_draw</code> method.</p>

<p>I will conclude this section with a screenshot of the graphical user interface:</p>

<p><img class="center" src="/images/plplot-test.png"></p>

<p>Feel free to try it for yourself using the following steps:</p>

<ol>
<li>git clone git@gist.github.com:/c40bb9cca6719478f000.git plplot-test</li>
<li>cd plplot-test</li>
<li>autoreconf -i</li>
<li>./configure</li>
<li>make</li>
<li>./plplot-test</li>
<li>That&rsquo;s it! Start fooling around with the selection box and resizing&hellip;</li>
</ol>


<p>The full gist follows after the conclusions.</p>

<h1>Conclusions</h1>

<p>Based on the work I have put into this for the last couple of days I would say it is a very promising method of bringing high quality scientific plotting into Gtk/Gtkmm. Obviously the code I shared is very simple and needs a lot more functionality in order to become truly useful for a large audience. However the main problem is finding the time to write all the required methods that wrap the functions of PLplot that are needed, which is not necessarily a hard thing to do. Ideally, this would be done in Gtk+ instead of Gtkmm as it would open the code to usage from all languages that have bindings to Gtk+ through introspection. Extending classes in Gtk+ is really hard though (which is why almost no one does it), but trivial in Gtkmm&hellip;</p>

<p>Anyway, if I ever decide to turn this into a real library, you will read about it here.</p>

<p><div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotDrawingArea.h'></script>
<noscript><pre><code>#ifndef PLPLOTDRAWINGAREA_H
#define PLPLOTDRAWINGAREA_H

#include &lt;gtkmm/drawingarea.h&gt;
#include &lt;plstream.h&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

typedef sigc::signal&lt;void, double, double, double, double &gt; type_signal_select_region;

class PLplotDrawingArea : public Gtk::DrawingArea {
private:
  std::vector&lt;PLFLT&gt; x;
  std::vector&lt;PLFLT&gt; y;
  std::string x_title;
  std::string y_title;
  std::string plot_title;
  double start_event[2];
  double start_cairo[2];
  double end_event[2];
  double end_cairo[2];
  bool selecting;
  plstream *pls;
  double x_pl_range[2];
  double y_pl_range[2];
  double x_cr_range[2];
  double y_cr_range[2];
protected:
  //our handler for the on_draw signal
  virtual bool on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr);
  // This is the default handler for the signal signal_select_region().
  virtual void on_select_region(double xmin, double xmax, double ymin, double ymax);
  bool on_button_press_event(GdkEventButton *event);
  bool on_button_release_event(GdkEventButton *event);
  bool on_motion_notify_event (GdkEventMotion *event);
  type_signal_select_region _signal_select_region;

public:
  PLplotDrawingArea(
    const std::vector&lt;PLFLT&gt; &amp;x,
    const std::vector&lt;PLFLT&gt; &amp;y,
    const std::string &amp;x_title,
    const std::string &amp;y_title,
    const std::string &amp;plot_title
  );
  void convert_plplot_to_cairo_coordinates(
    double x_pl, double y_pl,
    double &amp;x_cr, double &amp;y_cr);
  virtual ~PLplotDrawingArea() {
    if (pls)
      delete pls;
  }

  type_signal_select_region signal_select_region() {
    return _signal_select_region;
  }

  void set_region(double xmin, double xmax, double ymin, double ymax);

  void draw_plot(const Cairo::RefPtr&lt;Cairo::Context&gt; &amp;cr, plstream *_pls, int width, int height);
};
#endif
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotDrawingArea.cpp'></script>
<noscript><pre><code>#include &quot;PLplotDrawingArea.h&quot;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;gdkmm/general.h&gt;
#include &lt;cmath&gt;

PLplotDrawingArea::PLplotDrawingArea(
  const std::vector&lt;PLFLT&gt; &amp;_x,
  const std::vector&lt;PLFLT&gt; &amp;_y,
  const std::string &amp;_x_title,
  const std::string &amp;_y_title,
  const std::string &amp;_plot_title
) : x(_x),
    y(_y),
    x_title(_x_title),
    y_title(_y_title),
    plot_title(_plot_title),
    start_event{-1.0, -1.0},
    start_cairo{-1.0, -1.0},
    end_event{-1.0, -1.0},
    end_cairo{-1.0, -1.0},
    selecting(false),
    pls(0),
    x_pl_range{*(x.begin()), *(x.end()-1)},
    y_pl_range{*std::min_element(y.begin(), y.end()),
               *std::max_element(y.begin(), y.end())}
     {
  add_events(Gdk::POINTER_MOTION_MASK |
             Gdk::BUTTON_PRESS_MASK |
             Gdk::BUTTON_RELEASE_MASK);

  //connect our default signal handler
  this-&gt;signal_select_region().connect(sigc::mem_fun(*this,
             &amp;PLplotDrawingArea::on_select_region));
}

void PLplotDrawingArea::on_select_region(double xmin, double xmax, double ymin, double ymax) {
  //this function does nothing
  //it is designed to be overridden by a derived class
}


void PLplotDrawingArea::set_region(double xmin, double xmax, double ymin, double ymax) {
  if (xmin == xmax &amp;&amp; ymin == ymax) {
    //due to signal propagation, this function will actually be called twice on a double-click event,
    //the second time after the plot has already been resized to its normal geometry
    //this condition avoids the warning message...
    return;
  }
  if (xmin &gt;= xmax || ymin &gt;= ymax ||
      xmin &lt; *(x.begin()) || xmax &gt; *(x.end()-1) ||
      ymin &lt; *std::min_element(y.begin(), y.end()) ||
      ymax &gt; *std::max_element(y.begin(), y.end())) {
    g_warning(&quot;PLplotDrawingArea::set_region(): Invalid arguments&quot;);
    return;
  }
  x_pl_range[0] = xmin;
  x_pl_range[1] = xmax;
  y_pl_range[0] = ymin;
  y_pl_range[1] = ymax;

  this-&gt;get_window()-&gt;invalidate(true);
}

bool PLplotDrawingArea::on_button_press_event(GdkEventButton *event) {
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  start_event[0] = event-&gt;x;
  start_event[1] = event-&gt;y;
  start_cairo[0] = event-&gt;x;
  start_cairo[1] = height - 1.0 * event-&gt;y;
  end_event[0] = -1.0;
  end_event[1] = -1.0;
  end_cairo[0] = -1.0;
  end_cairo[1] = -1.0;

  //check if the starting coordinates are valid
  if (start_cairo[0] &lt; x_cr_range[0] ||
      start_cairo[0] &gt; x_cr_range[1] ||
      start_cairo[1] &lt; y_cr_range[0] ||
      start_cairo[1] &gt; y_cr_range[1]) {
    g_warning(&quot;PLplotDrawingArea::on_button_press_event(): Invalid starting position in on_button_press_event&quot;);
    selecting = false;
    return true;
  }

  this-&gt;get_window()-&gt;invalidate(true);

  selecting = true;

  return false;
}

bool PLplotDrawingArea::on_button_release_event(GdkEventButton *event) {
  if (!selecting)
    return true;

  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  end_event[0] = event-&gt;x;
  end_event[1] = event-&gt;y;
  end_cairo[0] = event-&gt;x;
  end_cairo[1] = height - 1.0 * event-&gt;y;

  //make sure we stay within the plot while selecting
  if (end_cairo[0] &gt; start_cairo[0]) {
    //this 1E-10 subtraction is necessary to ensure calc_world works properly
    //when dragging a box that touches the right axis.
    end_cairo[0] = MIN(end_cairo[0], x_cr_range[1] - 1E-10);
  }
  else if (end_cairo[0] &lt; start_cairo[0]) {
    end_cairo[0] = MAX(end_cairo[0], x_cr_range[0]);
  }

  if (end_cairo[1] &gt; start_cairo[1]) {
    end_cairo[1] = MIN(end_cairo[1], y_cr_range[1]);
  }
  else if (end_cairo[1] &lt; start_cairo[1]) {
    end_cairo[1] = MAX(end_cairo[1], y_cr_range[0]);
  }

  selecting = false;

  //emit signal!
  //prepare plplot coordinates
  //inspired by https://www.mail-archive.com/plplot-devel@lists.sourceforge.net/msg03079.html
  double start_cairo_norm[2] = {start_cairo[0]/width, start_cairo[1]/height};
  double end_cairo_norm[2] = {end_cairo[0]/width, end_cairo[1]/height};

  double start_plplot[2];
  double end_plplot[2];
  int index;

  //get the plot coordinates corresponding to the cairo coordinates
  pls-&gt;calc_world(start_cairo_norm[0], start_cairo_norm[1],
                  start_plplot[0], start_plplot[1], index);
  pls-&gt;calc_world(end_cairo_norm[0], end_cairo_norm[1],
                  end_plplot[0], end_plplot[1], index);

  double start_plplot_def[2];
  double end_plplot_def[2];

  //ensure that the coordinates are within the extremes based on the x and y vectors
  //in case of the full view, due to precision errors, the extremes calculated based on calc_world
  //are actually slightly outside of these data extremes, meaning that it&#39;s not possible to drag the selection
  //along the plot grid
  start_plplot_def[0] = MAX(MIN(start_plplot[0], end_plplot[0]), *(x.begin()));
  start_plplot_def[1] = MAX(MIN(start_plplot[1], end_plplot[1]), *std::min_element(y.begin(), y.end()));
  end_plplot_def[0] = MIN(MAX(start_plplot[0], end_plplot[0]), *(x.end()-1));
  end_plplot_def[1] = MIN(MAX(start_plplot[1], end_plplot[1]), *std::max_element(y.begin(), y.end()));

  this-&gt;get_window()-&gt;invalidate(true);

  _signal_select_region.emit(start_plplot_def[0], end_plplot_def[0], start_plplot_def[1], end_plplot_def[1]);

  return true;
}

bool PLplotDrawingArea::on_motion_notify_event (GdkEventMotion *event) {
  if (!selecting)
    return true;

  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  end_event[0] = event-&gt;x;
  end_event[1] = event-&gt;y;
  end_cairo[0] = event-&gt;x;
  end_cairo[1] = height - 1.0 * event-&gt;y;

  //make sure we stay within the plot while selecting
  if (end_cairo[0] &gt; start_cairo[0]) {
    end_cairo[0] = MIN(end_cairo[0], x_cr_range[1]);
  }
  else if (end_cairo[0] &lt; start_cairo[0]) {
    end_cairo[0] = MAX(end_cairo[0], x_cr_range[0]);
  }

  if (end_cairo[1] &gt; start_cairo[1]) {
    end_cairo[1] = MIN(end_cairo[1], y_cr_range[1]);
  }
  else if (end_cairo[1] &lt; start_cairo[1]) {
    end_cairo[1] = MAX(end_cairo[1], y_cr_range[0]);
  }

  this-&gt;get_window()-&gt;invalidate(true);

  return true;
}

void PLplotDrawingArea::draw_plot(const Cairo::RefPtr&lt;Cairo::Context&gt; &amp;cr, plstream *_pls, int width, int height) {
  _pls-&gt;sdev(&quot;extcairo&quot;);
  _pls-&gt;spage(0.0, 0.0, width, height, 0, 0);
  _pls-&gt;init();

  Gdk::RGBA color = get_style_context()-&gt;get_color();
  Gdk::Cairo::set_source_rgba(cr, color);
  _pls-&gt;cmd(PLESC_DEVINIT, cr-&gt;cobj());
  _pls-&gt;col0(0);

  _pls-&gt;env(x_pl_range[0], x_pl_range[1],
            y_pl_range[0], y_pl_range[1],
            0, 0);

  _pls-&gt;lab(x_title.c_str(), y_title.c_str(), plot_title.c_str());
  _pls-&gt;col0(1);
  _pls-&gt;line(x.size(), &amp;x[0], &amp;y[0]);

  return;
}

bool PLplotDrawingArea::on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr) {
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();

  if (pls)
    delete pls;
  pls = new plstream;

  draw_plot(cr, pls, width, height);

  if (selecting &amp;&amp;
      start_cairo[0] &gt;= 0.0 &amp;&amp;
      start_cairo[1] &gt;= 0.0 &amp;&amp;
      end_cairo[0] &gt;= 0.0 &amp;&amp;
      end_cairo[1] &gt;= 0.0) {
    cr-&gt;set_line_width(2);
    cr-&gt;set_source_rgb(0, 0, 0);
    cr-&gt;rectangle(MIN(start_cairo[0], end_cairo[0]),
                  MIN(start_cairo[1], end_cairo[1]),
                  fabs(end_cairo[0] - start_cairo[0]),
                  fabs(end_cairo[1] - start_cairo[1]));
    cr-&gt;stroke();
  }

  convert_plplot_to_cairo_coordinates(x_pl_range[0], y_pl_range[0],
                                      x_cr_range[0], y_cr_range[0]);
  convert_plplot_to_cairo_coordinates(x_pl_range[1], y_pl_range[1],
                                      x_cr_range[1], y_cr_range[1]);
  return true;
}

void PLplotDrawingArea::convert_plplot_to_cairo_coordinates(
     double x_pl, double y_pl,
     double &amp;x_cr, double &amp;y_cr) {
  //inspired by http://www.mail-archive.com/plplot-devel@lists.sourceforge.net/msg02383.html
  //but the last equation was incorrect and is fixed here
  Gtk::Allocation allocation = get_allocation();
  const int width = allocation.get_width();
  const int height = allocation.get_height();
  double nxmin, nxmax, nymin, nymax;
  double wxmin, wxmax, wymin, wymax;

  pls-&gt;gvpd(nxmin, nxmax, nymin, nymax);
  pls-&gt;gvpw(wxmin, wxmax, wymin, wymax);

  double xmin = width * nxmin;
  double xmax = width * nxmax;
  double ymin = height * nymin;
  double ymax = height * nymax;

  x_cr = xmin + ((xmax - xmin) * ((x_pl - wxmin) / (wxmax - wxmin)));
  y_cr = ymin + ((ymax - ymin) * ((y_pl - wymin) / (wymax - wymin)));
}
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotWindow.h'></script>
<noscript><pre><code>#ifndef PLPLOTWINDOW_H
#define PLPLOTWINDOW_H

#include &lt;gtkmm/window.h&gt;
#include &lt;gtkmm/grid.h&gt;
#include &lt;gtkmm/buttonbox.h&gt;
#include &lt;gtkmm/button.h&gt;
#include &quot;PLplotDrawingArea.h&quot;
#include &lt;plstream.h&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;gtkmm/printcontext.h&gt;


class PLplotWindow : public Gtk::Window {
private:
  PLplotDrawingArea plplot_drawing_area;
  bool on_plplot_drawing_area_double_click(GdkEventButton *event,
    double xmin, double xmax, double ymin, double ymax);
  Gtk::Grid grid;
  Gtk::Button print_button;
  Gtk::Button saveas_button;
  Gtk::Button quit_button;
  Gtk::ButtonBox buttons;
  void on_quit_button_clicked() {
    get_application()-&gt;remove_window(*this);
    return;
  }
  void on_saveas_button_clicked();
  void on_print_button_clicked();
  void on_draw_page(const Glib::RefPtr&lt;Gtk::PrintContext&gt;&amp; context, int page_nr);

public:
  PLplotWindow(std::vector&lt;PLFLT&gt; &amp;x, std::vector&lt;PLFLT&gt; &amp;y,
    std::string x_title = &quot;X-axis&quot;, std::string y_title = &quot;Y-axis&quot;,
    std::string plot_title = &quot;&quot;);
  virtual ~PLplotWindow() {}


};



#endif
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=PLplotWindow.cpp'></script>
<noscript><pre><code>#include &quot;PLplotWindow.h&quot;
#include &lt;gtkmm/printsettings.h&gt;
#include &lt;gtkmm/pagesetup.h&gt;
#include &lt;gtkmm/printoperation.h&gt;
#include &lt;gtkmm/filechooserdialog.h&gt;

bool PLplotWindow::on_plplot_drawing_area_double_click(GdkEventButton *event,
  double xmin, double xmax, double ymin, double ymax) {
  if (event-&gt;type == GDK_2BUTTON_PRESS) {
    plplot_drawing_area.set_region(xmin, xmax, ymin, ymax);
  }
  return false;
}

PLplotWindow::PLplotWindow(std::vector&lt;PLFLT&gt; &amp;x, std::vector&lt;PLFLT&gt; &amp;y,
    std::string x_title, std::string y_title,
    std::string plot_title) : plplot_drawing_area(x, y, x_title,
      y_title, plot_title), print_button(&quot;Print&quot;), saveas_button(&quot;Save as&quot;),
      quit_button(&quot;Quit&quot;), buttons(Gtk::ORIENTATION_HORIZONTAL) {

  set_default_size(720, 580);
  //sadly the fixed aspect ratio does not work properly on OS X
  //see https://bugzilla.gnome.org/show_bug.cgi?id=723859
  //I submitted a patch for this...
  Gdk::Geometry geometry;
  geometry.min_aspect = geometry.max_aspect = double(720)/double(580);
  set_geometry_hints(*this, geometry, Gdk::HINT_ASPECT);
  set_title(&quot;PLplot Gtkmm DrawingArea example&quot;);
  //resize on select
  //signal_select_region&#39;s default handler doesnt do anything so
  //in order for the selection box to do something at all, two options are available:
  //1) derive PLplotDrawingArea and define your own on_select_region method
  //2) if using an instance of PLplotDrawingArea, connect a signal to signal_select_region, this is done here
  //both options are encouraged to use PLplotDrawingArea::set_region, possibly combined with further calls...
  plplot_drawing_area.signal_select_region().connect(sigc::mem_fun(plplot_drawing_area, &amp;PLplotDrawingArea::set_region));

  //the double click event is not handled at all by PLplotDrawingArea (although I could...)
  plplot_drawing_area.signal_button_press_event().connect(sigc::bind(sigc::mem_fun(*this, &amp;PLplotWindow::on_plplot_drawing_area_double_click), *(x.begin()), *(x.end()-1), *std::min_element(y.begin(), y.end()), *std::max_element(y.begin(), y.end())));

  quit_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_quit_button_clicked));
  print_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_print_button_clicked));
  saveas_button.signal_clicked().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_saveas_button_clicked));

  buttons.pack_start(print_button);
  buttons.pack_start(saveas_button);
  buttons.pack_start(quit_button);
  buttons.set_layout(Gtk::BUTTONBOX_CENTER);
  buttons.set_spacing(10);
  buttons.set_vexpand(false);
  buttons.set_hexpand(true);

  plplot_drawing_area.set_hexpand(true);
  plplot_drawing_area.set_vexpand(true);

  grid.attach(buttons, 0, 0, 1, 1);
  grid.attach(plplot_drawing_area, 0, 1, 1, 1);
  grid.set_column_spacing(5);
	grid.set_row_spacing(5);
	grid.set_row_homogeneous(false);
	grid.set_column_homogeneous(false);

  add(grid);
  set_border_width(10);
  grid.show_all();
  //plplot_drawing_area.show();

}


void PLplotWindow::on_draw_page(const Glib::RefPtr&lt;Gtk::PrintContext&gt;&amp; context, int page_nr) {
  ::Cairo::RefPtr&lt; ::Cairo::Context&gt; cr = context-&gt;get_cairo_context();

  plstream pls;
  plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);
}

void PLplotWindow::on_print_button_clicked() {
  //print settings
  Glib::RefPtr&lt;Gtk::PrintSettings&gt; print_settings = Gtk::PrintSettings::create();
  print_settings-&gt;set_orientation(Gtk::PAGE_ORIENTATION_LANDSCAPE);
  print_settings-&gt;set_paper_size(Gtk::PaperSize(Gtk::PAPER_NAME_A4));

  Glib::RefPtr&lt;Gtk::PageSetup&gt; page_setup = Gtk::PageSetup::create();
  page_setup-&gt;set_orientation(Gtk::PAGE_ORIENTATION_LANDSCAPE);
  page_setup-&gt;set_paper_size_and_default_margins(Gtk::PaperSize(Gtk::PAPER_NAME_A4));

  Glib::RefPtr&lt;Gtk::PrintOperation&gt; operation = Gtk::PrintOperation::create();
  operation-&gt;set_print_settings(print_settings);
  operation-&gt;set_default_page_setup(page_setup);
  operation-&gt;set_show_progress(true);
  operation-&gt;set_track_print_status(true);
  operation-&gt;set_use_full_page(true);
  operation-&gt;signal_draw_page().connect(sigc::mem_fun(*this, &amp;PLplotWindow::on_draw_page));
  operation-&gt;set_n_pages(1);

  if (Gtk::PRINT_OPERATION_RESULT_APPLY != operation-&gt;run(Gtk::PRINT_OPERATION_ACTION_PRINT_DIALOG, *this)) {
    //error handling
  }

  return;
}

void PLplotWindow::on_saveas_button_clicked() {
  Gtk::FileChooserDialog dialog(*this, &quot;Save as&quot;, Gtk::FILE_CHOOSER_ACTION_SAVE);
  dialog.add_button(&quot;_Cancel&quot;, Gtk::RESPONSE_CANCEL);
	dialog.add_button(&quot;Select&quot;, Gtk::RESPONSE_OK);
  dialog.set_do_overwrite_confirmation(true);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_eps = Gtk::FileFilter::create();
  filter_eps-&gt;add_pattern(&quot;*.eps&quot;);
  filter_eps-&gt;set_name(&quot;EPS&quot;);
  dialog.add_filter(filter_eps);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_png = Gtk::FileFilter::create();
  filter_png-&gt;add_pattern(&quot;*.png&quot;);
  filter_png-&gt;set_name(&quot;PNG&quot;);
  dialog.add_filter(filter_png);
  Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_pdf = Gtk::FileFilter::create();
  filter_pdf-&gt;add_pattern(&quot;*.pdf&quot;);
  filter_pdf-&gt;set_name(&quot;PDF&quot;);
  dialog.add_filter(filter_pdf);

  if (dialog.run() == Gtk::RESPONSE_OK) {
    std::string filename = dialog.get_filename();
    Glib::RefPtr&lt;Gtk::FileFilter&gt; filter_selected = dialog.get_filter();
    if (filter_selected-&gt;get_name() == &quot;EPS&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.eps&quot;) != 0)
				filename += &quot;.eps&quot;;

      Cairo::RefPtr&lt;Cairo::PsSurface&gt; surface = Cairo::PsSurface::create(filename, 842, 595);
      surface-&gt;set_eps(true);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      cr-&gt;show_page();
    }
    else if (filter_selected-&gt;get_name() == &quot;PNG&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.png&quot;) != 0)
				filename += &quot;.png&quot;;

      Cairo::RefPtr&lt;Cairo::ImageSurface&gt; surface = Cairo::ImageSurface::create(Cairo::FORMAT_ARGB32, 842, 595);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      surface-&gt;write_to_png(filename);
    }
    else if (filter_selected-&gt;get_name() == &quot;PDF&quot;) {
      if (filename.compare(filename.length()-4, std::string::npos, &quot;.pdf&quot;) != 0)
				filename += &quot;.pdf&quot;;

      Cairo::RefPtr&lt;Cairo::PdfSurface&gt; surface = Cairo::PdfSurface::create(filename, 842, 595);
      Cairo::RefPtr&lt;Cairo::Context&gt; cr = Cairo::Context::create(surface);

      plstream pls;
      plplot_drawing_area.draw_plot(cr, &amp;pls, 842, 595);

      cr-&gt;show_page();
    }
  }
  return;
}
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=main.cpp'></script>
<noscript><pre><code>#include &lt;gtkmm/application.h&gt;
#include &lt;glibmm/miscutils.h&gt;
#include &lt;glib.h&gt;
#include &quot;PLplotWindow.h&quot;
#include &lt;valarray&gt;



int main(int argc, char **argv) {
	Glib::set_application_name(&quot;plplot-test&quot;);
#if defined(G_OS_WIN32)
  //windows requires a bit more work. This example sets the PLPLOT_LIB environment variable
  //to ensure the PLplot data files are found at runtime
	gchar *installation_dir = g_win32_get_package_installation_directory_of_module(NULL);
	std::string path_to_plplot(Glib::build_filename(installation_dir, &quot;Share&quot;, &quot;plplot&quot;));
	std::cout &lt;&lt; &quot;path to plplot: &quot; &lt;&lt; path_to_plplot &lt;&lt; std::endl;
	Glib::setenv(&quot;PLPLOT_LIB&quot;, path_to_plplot, true);
	g_free(installation_dir);
#endif
	Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, &quot;eu.tomschoonjans.plplot&quot;);

  //valarrays are underestimated IMHO
  std::valarray&lt;PLFLT&gt; x_va(1000), y_va(1000);
  for (unsigned int i = 0 ; i &lt; 1000 ; i++) {
    x_va[i] = 4*M_PI*i/999;
  }
  y_va = sin(x_va);

  std::vector&lt;PLFLT&gt; x(std::begin(x_va), std::end(x_va)),
    y(std::begin(y_va), std::end(y_va));
  std::string x_title(&quot;x&quot;), y_title(&quot;y = sinx(x)&quot;);

	PLplotWindow window(x, y, x_title, y_title, &quot;PLplotDrawingArea demonstration&quot;);

	return app-&gt;run(window);
}
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=Makefile.am'></script>
<noscript><pre><code>bin_PROGRAMS = plplot-test
plplot_test_SOURCES = main.cpp \
                      PLplotWindow.h \
                      PLplotWindow.cpp \
                      PLplotDrawingArea.h \
                      PLplotDrawingArea.cpp
plplot_test_CPPFLAGS= $(plplotcxx_CFLAGS) $(gtkmm_CFLAGS)
plplot_test_LDADD = $(plplotcxx_LIBS) $(gtkmm_LIBS)
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=configure.ac'></script>
<noscript><pre><code>AC_INIT([plplot-blog],[0.1],[tom.schoonjans@me.com],,[https://tschoonj.github.io])
AC_PREREQ([2.60])
AC_CONFIG_SRCDIR([main.cpp])
AC_CONFIG_AUX_DIR([build-aux])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_CANONICAL_HOST


#m4_pattern_allow([AS_TR_SH])
AC_CONFIG_MACRO_DIR([.])

AC_USE_SYSTEM_EXTENSIONS
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])


AC_PROG_CC
if test `AS_BASENAME([$CC])` = $CC ; then
  AC_CHECK_PROG(CC_FULL, [$CC], $CC, [none])
  #this next line may never be reached...
  if test x$CC_FULL = &quot;xnone&quot; ; then
          AC_MSG_ERROR([no C compiler was found on the system.])
  fi
fi
AM_PROG_CC_C_O


AC_PROG_CXX
if test `AS_BASENAME([$CXX])` = $CXX ; then
  AC_CHECK_PROG(CXX_FULL, [$CXX], $CXX, [none])
  #this next line may never be reached...
  if test x$CXX_FULL = &quot;xnone&quot; ; then
          AC_MSG_ERROR([no C++ compiler was found on the system.])
  fi
fi

AX_CXX_COMPILE_STDCXX_11(ext, mandatory)

LDFLAGS_EXTRA=&quot;&quot;
OS_WINDOWS=0
OS_WINDOWS_32=0
OS_WINDOWS_64=0

case &quot;$host&quot; in
	i686-*mingw*)
		OS_WINDOWS_32=1
		OS_WINDOWS=1
		;;
	x86_64-*mingw*)
		OS_WINDOWS_64=1
		OS_WINDOWS=1
		;;
esac

AC_SUBST(WINDRES_ARCH)

AC_SUBST(OS_WINDOWS)
AM_CONDITIONAL([OS_WINDOWS],[test x$OS_WINDOWS = x1])
AC_SUBST(OS_WINDOWS_32)
AM_CONDITIONAL([OS_WINDOWS_32],[test x$OS_WINDOWS_32 = x1])
AC_SUBST(OS_WINDOWS_64)
AM_CONDITIONAL([OS_WINDOWS_64],[test x$OS_WINDOWS_64 = x1])

#look for xraylib
#initialize pkg-config
PKG_PROG_PKG_CONFIG


#search for xraylib and other modules
PKG_CHECK_MODULES([gtkmm],gtkmm-3.0 &gt;= 3.12.0)
PKG_CHECK_MODULES([plplotcxx], [plplot-c++], ,
 [PKG_CHECK_MODULES([plplotcxx], [plplotd-c++])])

#check for the extcairo device
result=
AC_MSG_CHECKING([for plplot extcairo device])
ac_save_CFLAGS=&quot;$CFLAGS&quot;
CFLAGS=$plplotcxx_CFLAGS
AC_LANG_PUSH([C])
AC_TRY_COMPILE([
        #include &lt;plDevs.h&gt;
],[
#ifndef PLD_extcairo
  #error
#endif
],[
  result=yes
  AC_DEFINE([HAVE_EXTCAIRO], [], [extcairo found])
],[result=no])
AC_MSG_RESULT([$result])
if test x$result = xno ; then
  AC_MSG_ERROR([plplot must be built with the extcairo device!])
fi
AC_LANG_POP
CFLAGS=&quot;$ac_save_CFLAGS&quot;





AC_CONFIG_FILES([Makefile])
AC_CONFIG_HEADERS([config.h])



AC_OUTPUT
</code></pre></noscript></div>

<div><script src='https://gist.github.com/c40bb9cca6719478f000.js?file=ax_cxx_compile_stdcxx_11.m4'></script>
<noscript><pre><code># ============================================================================
#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html
# ============================================================================
#
# SYNOPSIS
#
#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])
#
# DESCRIPTION
#
#   Check for baseline language coverage in the compiler for the C++11
#   standard; if necessary, add switches to CXXFLAGS to enable support.
#
#   The first argument, if specified, indicates whether you insist on an
#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
#   -std=c++11).  If neither is specified, you get whatever works, with
#   preference for an extended mode.
#
#   The second argument, if specified &#39;mandatory&#39; or if left unspecified,
#   indicates that baseline C++11 support is required and that the macro
#   should error out if no mode with that support is found.  If specified
#   &#39;optional&#39;, then configuration proceeds regardless, after defining
#   HAVE_CXX11 if and only if a supporting mode is found.
#
# LICENSE
#
#   Copyright (c) 2008 Benjamin Kosnik &lt;bkoz@redhat.com&gt;
#   Copyright (c) 2012 Zack Weinberg &lt;zackw@panix.com&gt;
#   Copyright (c) 2013 Roy Stogner &lt;roystgnr@ices.utexas.edu&gt;
#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov &lt;sokolov@google.com&gt;
#
#   Copying and distribution of this file, with or without modification, are
#   permitted in any medium without royalty provided the copyright notice
#   and this notice are preserved. This file is offered as-is, without any
#   warranty.

#serial 11

m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [[
  template &lt;typename T&gt;
    struct check
    {
      static_assert(sizeof(int) &lt;= sizeof(T), &quot;not big enough&quot;);
    };

    struct Base {
    virtual void f() {}
    };
    struct Child : public Base {
    virtual void f() override {}
    };

    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;

    int a;
    decltype(a) b;

    typedef check&lt;int&gt; check_type;
    check_type c;
    check_type&amp;&amp; cr = static_cast&lt;check_type&amp;&amp;&gt;(c);

    auto d = a;
    auto l = [](){};
    // Prevent Clang error: unused variable &#39;l&#39; [-Werror,-Wunused-variable]
    struct use_l { use_l() { l(); } };

    // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
    // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function because of this
    namespace test_template_alias_sfinae {
        struct foo {};

        template&lt;typename T&gt;
        using member = typename T::member_type;

        template&lt;typename T&gt;
        void func(...) {}

        template&lt;typename T&gt;
        void func(member&lt;T&gt;*) {}

        void test();

        void test() {
            func&lt;foo&gt;(0);
        }
    }
]])

AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl
  m4_if([$1], [], [],
        [$1], [ext], [],
        [$1], [noext], [],
        [m4_fatal([invalid argument `$1&#39; to AX_CXX_COMPILE_STDCXX_11])])dnl
  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],
        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],
        [$2], [optional], [ax_cxx_compile_cxx11_required=false],
        [m4_fatal([invalid second argument `$2&#39; to AX_CXX_COMPILE_STDCXX_11])])
  AC_LANG_PUSH([C++])dnl
  ac_success=no
  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,
  ax_cv_cxx_compile_cxx11,
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
    [ax_cv_cxx_compile_cxx11=yes],
    [ax_cv_cxx_compile_cxx11=no])])
  if test x$ax_cv_cxx_compile_cxx11 = xyes; then
    ac_success=yes
  fi

  m4_if([$1], [noext], [], [dnl
  if test x$ac_success = xno; then
    for switch in -std=gnu++11 -std=gnu++0x; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS=&quot;$CXXFLAGS&quot;
         CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS=&quot;$ac_save_CXXFLAGS&quot;])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
        ac_success=yes
        break
      fi
    done
  fi])

  m4_if([$1], [ext], [], [dnl
  if test x$ac_success = xno; then
    dnl HP&#39;s aCC needs +std=c++11 according to:
    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
    for switch in -std=c++11 -std=c++0x +std=c++11; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS=&quot;$CXXFLAGS&quot;
         CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS=&quot;$ac_save_CXXFLAGS&quot;])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS=&quot;$CXXFLAGS $switch&quot;
        ac_success=yes
        break
      fi
    done
  fi])
  AC_LANG_POP([C++])
  if test x$ax_cxx_compile_cxx11_required = xtrue; then
    if test x$ac_success = xno; then
      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])
    fi
  else
    if test x$ac_success = xno; then
      HAVE_CXX11=0
      AC_MSG_NOTICE([No compiler with C++11 support was found])
    else
      HAVE_CXX11=1
      AC_DEFINE(HAVE_CXX11,1,
                [define if the compiler supports basic C++11 syntax])
    fi

    AC_SUBST(HAVE_CXX11)
  fi
])
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
