<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: automake | Hi, Iâ€™m Yang Peng]]></title>
  <link href="http://yeangpeng.tech/blog/categories/automake/atom.xml" rel="self"/>
  <link href="http://yeangpeng.tech/"/>
  <updated>2016-02-18T15:43:59+08:00</updated>
  <id>http://yeangpeng.tech/</id>
  <author>
    <name><![CDATA[Yang Peng]]></name>
    <email><![CDATA[me@yangpeng.tech]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a CUDA device function library with autotools]]></title>
    <link href="http://yeangpeng.tech/blog/2014/05/10/building-a-cuda-device-function-library-with-autotools/"/>
    <updated>2014-05-10T21:08:11+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/05/10/building-a-cuda-device-function-library-with-autotools</id>
    <content type="html"><![CDATA[<p>I have recently started a new development branch in my <a href="http://github.com/tschoonj/xraylib">xraylib</a> project, where I will gradually be adding support for <a href="https://developer.nvidia.com/about-cuda">nVidia&rsquo;s CUDA platform</a>. Essentially the goal is to create a library containing CUDA device function equivalents of most functions that are currently offered by xraylib. Since there is not really much point to include functions that deal with strings, I will be leaving those out.</p>

<p>Compiling such a library has been supported by nVidia since CUDA version 5.5, but for some reason I never got their examples working. However, their recent 6.0 release seems to have fixed things (at least for me). In this post I will share some of the tricks I had to come up with to generate such a library.</p>

<!--more-->


<h2>Adding configure CUDA support</h2>

<p>The configure script that I am using for xraylib allows the user to select which bindings to build. The script would then proceed with checking if all the necessary building dependencies are available on the system. I accomplished this using the <code>AX_CHECK_CUDA</code> m4 macro I found at <a href="http://wili.cc/blog/cuda-m4.html,">http://wili.cc/blog/cuda-m4.html,</a> of course with some modifications to suit my particular needs. Check the gist later in this post for the code.</p>

<p>Important here are the <code>NVCC</code>, <code>CUDA_CFLAGS</code>, <code>CUDA_LDFLAGS</code> and <code>CUDA_LIBDIR</code> variables that get defined and will be used in the Makefile.am&rsquo;s later on.</p>

<h2>Building the library</h2>

<p>Compiling CUDA code into a library and then linking this library into an executable is not a trivial task, which becomes clear after reading through the <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#using-separate-compilation-in-cuda">CUDA documentation on separate compilation</a>.
First of all, we can only create static libraries.
This is not nearly as bad is at sounds: it will make the Makefile.am considerably simpler since we will be able to avoid using libtool this way. Libtool would really make things difficult here since we have to use the nvcc command with its non-standard options and have to define custom compilation rules for our source code files, at least assuming you follow the convention of giving your CUDA source files the .cu extension. In my case I ended up with this code:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">xraylibincludedir</span> <span class="o">=</span> <span class="k">${</span><span class="nv">includedir</span><span class="k">}</span>/xraylib&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;if</span> <span class="err">ENABLE_CUDA</span>
</span><span class='line'><span class="nv">lib_LIBRARIES</span><span class="o">=</span>libxrlcuda.a
</span><span class='line'><span class="nv">xraylibinclude_HEADERS</span> <span class="o">=</span> xraylib-cuda.h
</span><span class='line'><span class="nv">libxrlcuda_a_SOURCES</span> <span class="o">=</span> xraylib-cuda.cu xraylib-cuda.h <span class="se">\</span>
</span><span class='line'>               xraylib-cuda-private.h <span class="se">\</span>
</span><span class='line'>               atomiclevelwidth.cu <span class="se">\</span>
</span><span class='line'>               atomicweight.cu <span class="se">\</span>
</span><span class='line'>               auger_trans.cu <span class="se">\</span>
</span><span class='line'>               comptonprofiles.cu <span class="se">\</span>
</span><span class='line'>               coskron.cu <span class="se">\</span>
</span><span class='line'>               cross_sections.cu <span class="se">\</span>
</span><span class='line'>               densities.cu <span class="se">\</span>
</span><span class='line'>               edges.cu <span class="se">\</span>
</span><span class='line'>               <span class="k">fi</span>.cu <span class="se">\</span>
</span><span class='line'>               fii.cu <span class="se">\</span>
</span><span class='line'>               fluor_yield.cu <span class="se">\</span>
</span><span class='line'>               jump.cu <span class="se">\</span>
</span><span class='line'>               radrate.cu <span class="se">\</span>
</span><span class='line'>               scattering.cu <span class="se">\</span>
</span><span class='line'>               kissel_pe.cu <span class="se">\</span>
</span><span class='line'>               xrf_cross_sections_aux.cu <span class="se">\</span>
</span><span class='line'>               cs_line.cu <span class="se">\</span>
</span><span class='line'>               splint.cu <span class="se">\</span>
</span><span class='line'>               fluor_lines.cu <span class="se">\</span>
</span><span class='line'>               polarized.cu <span class="se">\</span>
</span><span class='line'>               cs_barns.cu
</span><span class='line'><span class="nv">libxrlcuda_a_CFLAGS</span> <span class="o">=</span> <span class="k">$(</span>CUDA_CFLAGS<span class="k">)</span> -I<span class="k">$(</span>top_srcdir<span class="k">)</span>/src -I<span class="k">$(</span>top_srcdir<span class="k">)</span>/include
</span><span class='line'><span class="nv">libxrlcuda_a_AR</span> <span class="o">=</span> <span class="k">$(</span>NVCC<span class="k">)</span> -arch<span class="o">=</span>sm_20 -lib -o&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.cu.o</span><span class="o">:</span> <span class="n">xraylib</span>-<span class="n">cuda</span>.<span class="n">h</span> <span class="n">xraylib</span>-<span class="n">cuda</span>-<span class="n">private</span>.<span class="n">h</span>
</span><span class='line'>    <span class="k">$(</span>NVCC<span class="k">)</span> <span class="k">$(</span>libxrlcuda_a_CFLAGS<span class="k">)</span> -arch<span class="o">=</span>sm_20 -dc -o <span class="nv">$@</span> <span class="nv">$&amp;</span>lt<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note how I disabled libtool here: I included the <code>lib_LIBRARIES</code> variable instead of <code>lib_LTLIBRARIES</code>. This two letter difference will ensure that libtool is not being used!
Two other things really set this file apart from typical Makefile.am&rsquo;s:</p>

<ol>
<li><code>libxrlcuda_a_AR = $(NVCC) -arch=sm_20 -lib -o</code>: I am overriding the default archiver here to ensure that both the device and the host functions end up in the static library. The regular archiver (<code>ar</code>) would have ignored the device functions.</li>
<li>The rule for building the CUDA source code: automake has no idea what to do with the .cu files. Enters the suffix rule:
<code>makefile
.cu.o: xraylib-cuda.h xraylib-cuda-private.h
 $(NVCC) $(libxrlcuda_a_CFLAGS) -arch=sm_20 -dc -o $@ $&lt;
</code></li>
</ol>


<p>Here, the <code>-dc</code> option ensures that both device and host code will get compiled into the objects.</p>

<h2>Linking an executable with the library</h2>

<p>xraylib contains an example folder with a Makefile.am that will handle the compilation and running of the examples whenever <code>make check</code> is invoked after successful building of the core library and its bindings. The example contains both device (CUDA kernels that use the device functions) as well as host code to launch the kernels and handle the I/O with the GPU.
Here are the relevant sections of this file that deal with the cuda bindings example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">if</span> <span class="err">ENABLE_CUDA</span>
</span><span class='line'>  <span class="nv">check_PROGRAMS</span> <span class="o">+=</span> xrlexample11
</span><span class='line'><span class="err">endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;if</span> <span class="err">ENABLE_CUDA</span>
</span><span class='line'>  <span class="nv">xrlexample11_SOURCES</span> <span class="o">=</span> xrlexample11.cu
</span><span class='line'>  <span class="nv">xrlexample11_LDADD</span> <span class="o">=</span> xrlcudalink.o ../src/libxrl.la  <span class="k">$(</span>CUDA_LDFLAGS<span class="k">)</span> ../cuda/libxrlcuda.a -lcudart
</span><span class='line'>  <span class="nv">xrlexample11_CFLAGS</span> <span class="o">=</span> -I<span class="k">${</span><span class="nv">top_srcdir</span><span class="k">}</span>/include -I<span class="k">${</span><span class="nv">top_builddir</span><span class="k">}</span>/include -I<span class="k">${</span><span class="nv">top_srcdir</span><span class="k">}</span>/cuda -I<span class="k">${</span><span class="nv">top_srcdir</span><span class="k">}</span>/src
</span><span class='line'>  <span class="nv">TESTS_ENVIRONMENT</span> <span class="o">=</span> <span class="nv">DYLD_LIBRARY_PATH</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">$(</span>CUDA_LIBDIR<span class="k">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">$(</span>CUDA_LIBDIR<span class="k">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="err">endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.cu.o</span><span class="o">:</span> ../<span class="n">cuda</span>/<span class="n">libxrlcuda</span>.<span class="n">a</span>
</span><span class='line'>    <span class="k">$(</span>NVCC<span class="k">)</span> <span class="k">$(</span>xrlexample11_CFLAGS<span class="k">)</span> -arch<span class="o">=</span>sm_20 -dc -o <span class="nv">$@</span> <span class="nv">$&amp;</span>lt<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;xrlcudalink.o</span><span class="o">:</span> <span class="n">xrlexample</span>11.<span class="n">o</span> ../<span class="n">cuda</span>/<span class="n">libxrlcuda</span>.<span class="n">a</span>
</span><span class='line'>    <span class="k">$(</span>NVCC<span class="k">)</span> -arch<span class="o">=</span>sm_20 -dlink xrlexample11.o ../cuda/libxrlcuda.a -o xrlcudalink.o
</span></code></pre></td></tr></table></div></figure></p>

<p>It&rsquo;s quite similar to the Makefile.am for the static library: the exact same build rule is required to compile the CUDA source code. Interesting is the <code>xrlcudalink.o</code> build rule which turns out to be essential to link the device code in the example with the device code in the library. The resulting file after linking needs to be added to the <code>LDADD</code> command to ensure it ends up in the eventual executable. I am not overriding the linker here, so the default one will be used which is just fine.</p>

<p>I have tested this on Mac OS X Mavericks and Linux Centos 6.5, both with CUDA 6.0 installed. Soon I will also give this a try on Windows 7, so expect an update soon.</p>

<p><div><script src='https://gist.github.com/a3b1c346d1cef1cf2a23.js'></script>
<noscript><pre><code>##### 
#
# SYNOPSIS
#
# AX_CHECK_CUDA
#
# DESCRIPTION
#
# Figures out if CUDA Driver API/nvcc is available, i.e. existence of:
# 	cuda.h
#   libcuda.so
#   nvcc
#
# If something isn&#39;t found, fails straight away.
#
# Locations of these are included in 
#   CUDA_CFLAGS and 
#   CUDA_LDFLAGS.
# Path to nvcc is included as
#   NVCC_PATH
# in config.h
# 
# The author is personally using CUDA such that the .cu code is generated
# at runtime, so don&#39;t expect any automake magic to exist for compile time
# compilation of .cu files.
#
# LICENCE
# Public domain
#
# AUTHOR
# wili
#
##### 

AC_DEFUN([AX_CHECK_CUDA], [

# Provide your CUDA path with this		
AC_ARG_WITH(cuda, [  --with-cuda=PREFIX      Prefix of your CUDA installation], [cuda_prefix=$withval], [cuda_prefix=&quot;/usr/local/cuda&quot;])

# Setting the prefix to the default if only --with-cuda was given
if test &quot;$cuda_prefix&quot; == &quot;yes&quot;; then
	if test &quot;$withval&quot; == &quot;yes&quot;; then
		cuda_prefix=&quot;/usr/local/cuda&quot;
	fi
fi

# Checking for nvcc
AC_MSG_CHECKING([nvcc in $cuda_prefix/bin])
if test -x &quot;$cuda_prefix/bin/nvcc&quot;; then
	AC_MSG_RESULT([found])
	AC_DEFINE_UNQUOTED([NVCC_PATH], [&quot;$cuda_prefix/bin/nvcc&quot;], [Path to nvcc binary])
	# We need to add the CUDA search directories for header and lib searches

	CUDA_CFLAGS=&quot;&quot;

	# Saving the current flags
	ax_save_CFLAGS=&quot;${CFLAGS}&quot;
	ax_save_LDFLAGS=&quot;${LDFLAGS}&quot;

	# Announcing the new variables
	AC_SUBST([CUDA_CFLAGS])
	AC_SUBST([CUDA_LDFLAGS])
	AC_SUBST([NVCC],[$cuda_prefix/bin/nvcc])
	AC_CHECK_FILE([$cuda_prefix/lib64],[lib64_found=yes],[lib64_found=no])
	if test &quot;x$lib64_found&quot; = xno ; then
		AC_CHECK_FILE([$cuda_prefix/lib],[lib32_found=yes],[lib32_found=no])
		if test &quot;x$lib32_found&quot; = xyes ; then
			AC_SUBST([CUDA_LIBDIR],[$cuda_prefix/lib])
		else
			AC_MSG_WARN([Couldn&#39;t find cuda lib directory])
			VALID_CUDA=no
		fi
	else
		AC_CHECK_SIZEOF([long])
		if test &quot;x$ac_cv_sizeof_long&quot; = &quot;x8&quot; ; then
			AC_SUBST([CUDA_LIBDIR],[$cuda_prefix/lib64])
			CUDA_CFLAGS+=&quot; -m64&quot;
		elif test &quot;x$ac_cv_sizeof_long&quot; = &quot;x4&quot; ; then
			AC_CHECK_FILE([$cuda_prefix/lib32],[lib32_found=yes],[lib32_found=no])
			if test &quot;x$lib32_found&quot; = xyes ; then
				AC_SUBST([CUDA_LIBDIR],[$cuda_prefix/lib])
				CUDA_CFLAGS+=&quot; -m32&quot;
			else
				AC_MSG_WARN([Couldn&#39;t find cuda lib directory])
				VALID_CUDA=no
			fi
		else
			AC_MSG_ERROR([Could not determine size of long variable type])
		fi
	fi

	if test &quot;x$VALID_CUDA&quot; != xno ; then
		CUDA_CFLAGS+=&quot; -I$cuda_prefix/include&quot;
		CFLAGS=&quot;$CUDA_CFLAGS $CFLAGS&quot;
		CUDA_LDFLAGS=&quot;-L$CUDA_LIBDIR&quot;
		LDFLAGS=&quot;$CUDA_LDFLAGS $LDFLAGS&quot;

		# And the header and the lib
		AC_CHECK_HEADER([cuda.h], [],
			AC_MSG_WARN([Couldn&#39;t find cuda.h])
			VALID_CUDA=no
			,[#include &lt;cuda.h&gt;])
		if test &quot;x$VALID_CUDA&quot; != &quot;xno&quot; ; then
			AC_CHECK_LIB([cuda], [cuInit], [VALID_CUDA=yes], AC_MSG_WARN([Couldn&#39;t find libcuda]
			VALID_CUDA=no))
		fi
	fi
	# Returning to the original flags
	CFLAGS=${ax_save_CFLAGS}
	LDFLAGS=${ax_save_LDFLAGS}
else
	AC_MSG_RESULT([not found!])
	AC_MSG_WARN([nvcc was not found in $cuda_prefix/bin])
	VALID_CUDA=no
fi

if test &quot;x$enable_cuda&quot; = xyes &amp;&amp; test x$VALID_CUDA = xyes ; then 
	AC_MSG_NOTICE([Building with CUDA bindings])
elif test &quot;x$enable_cuda&quot; = xyes &amp;&amp; test x$VALID_CUDA = xno ; then 
	AC_MSG_ERROR([Cannot build CUDA bindings. Check errors])
fi


])</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building libtool modules: Python bindings]]></title>
    <link href="http://yeangpeng.tech/blog/2013/09/04/building-libtool-modules-python-bindings/"/>
    <updated>2013-09-04T10:47:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2013/09/04/building-libtool-modules-python-bindings</id>
    <content type="html"><![CDATA[<p>One of the software packages (<a href="http://github.com/tschoonj/xraylib">xraylib</a>) I am working on, consists of a C-library with bindings to a number of other languages such as Python, Fortran 2003, IDL, Java, Ruby, Lua and Perl. Apart from IDL and Fortran 2003, the source code for these bindings is generated automatically using <a href="http://www.swig.org">swig</a>, although with considerable language-specific modifications to the swig interface file.</p>

<p>The bindings source code afterwards needs to be compiled into a dynamically loadable library, which will then be loaded at runtime by the program whenever the user needs to use a function or variable from the bindings (actually from the underlying C-library, but exposed through the swig generated bindings).
As a rule, each programming language that supports such dynamically loadable libraries comes with specific instructions on how to generate the libraries from the bindings source code, often using platform independent tools.</p>

<p>However, these tools never seem to integrate well with autoconf and automake and lead to quite complicated Makefile.am files. A considerable more easy approach would consist of relying on libtool&rsquo;s functionality of generating these dynamically loadable libraries (called modules in the libtool documentation).
In this series of posts I will share my experiences on generating bindings to the aforementioned languages using libtool in a relatively clear and easy way. All the code has been tested on Linux and Mac OS X. It may also work on Windows though, provided you install a bash shell with the required tools.</p>

<p>In this first post I will discuss Python extension modules.</p>

<!--more-->


<h2>Checking for python development tools</h2>

<p>If you want to create an autotools based project consisting of a C-library and python bindings, then one of the first things that configure will need to check for is the presence of the python interpreter and the development kit consisting of the python headers and some essential tools.
I accomplished this by adding the following lines into configure.ac</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;configure.ac snippet&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;copy paste into your own configure.ac file&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;check <span class="k">for</span> swig&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AC_CHECK_PROGS<span class="o">([</span>SWIG<span class="o">]</span>,<span class="o">[</span>swig<span class="o">]</span>,<span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>noswig<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">])</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;present configure with a <span class="nb">command</span>-line option to disable the python bindings&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AC_ARG_ENABLE<span class="o">([</span>python<span class="o">]</span>,<span class="o">[</span>AS_HELP_STRING<span class="o">([</span><span class="p">&amp;</span>ndash<span class="p">;</span>disable-python<span class="o">]</span>,<span class="o">[</span>build without the python bindings<span class="o">])]</span>,<span class="o">[</span><span class="nv">enable_python</span><span class="o">=</span><span class="nv">$enableval</span><span class="o">]</span>,<span class="o">[</span><span class="nv">enable_python</span><span class="o">=</span>check<span class="o">])</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;default behavior is to install the python bindings into subfolders of <span class="nv">$prefix</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;however, this may require the user to <span class="nb">set </span>the PYTHONPATH environment variable&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;in order to avoid this, invoke configure with the <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nb">enable</span>-python-integration option&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AC_ARG_ENABLE<span class="o">([</span>python-integration<span class="o">]</span>,<span class="o">[</span>AS_HELP_STRING<span class="o">([</span><span class="p">&amp;</span>ndash<span class="p">;</span><span class="nb">enable</span>-python-integration<span class="o">]</span>,<span class="o">[</span>install the python bindings in the interpreters site-packages folder<span class="o">])]</span>,<span class="o">[</span><span class="nv">enable_python_integration</span><span class="o">=</span><span class="nv">$enableval</span><span class="o">]</span>,<span class="o">[</span><span class="nv">enable_python_integration</span><span class="o">=</span>check<span class="o">])</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;VALID_PYTHON<span class="o">=</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$SWIG</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xnoswig <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$enable_python</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xyes <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="c">#don&amp;rsquo;t even bother when swig is not found</span>
</span><span class='line'>        AC_MSG_ERROR<span class="o">([</span><span class="p">&amp;</span>ndash<span class="p">;</span><span class="nb">enable</span>-python was given as an option but swig was not found on the system<span class="o">])</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$SWIG</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xswig <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$enable_python</span><span class="p">&amp;</span>rdquo<span class="p">;</span> !<span class="o">=</span> xno <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="c">#verify the python installation</span>
</span><span class='line'>        AM_PATH_PYTHON<span class="o">(</span>,<span class="o">[</span><span class="nv">PYTHON_FOUND</span><span class="o">=</span><span class="nb">true</span><span class="o">]</span>,<span class="o">[</span><span class="nv">PYTHON_FOUND</span><span class="o">=</span><span class="nb">false</span><span class="o">])</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$PYTHON_FOUND</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xtrue <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                <span class="nv">PYTHON_CPPFLAGS</span><span class="o">=</span>
</span><span class='line'>                <span class="nv">PYTHON_LDFLAGS</span><span class="o">=</span>
</span><span class='line'>                AX_PYTHON_DEVEL
</span><span class='line'>                <span class="k">if</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$PYTHON</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> x <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                        <span class="k">if</span> <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$enable_python</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xyes <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                                AC_MSG_ERROR<span class="o">([</span>Incomplete python development package<span class="o">])</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                                AC_MSG_WARN<span class="o">([</span>Incomplete python development package<span class="o">])</span>
</span><span class='line'>                        <span class="k">fi</span>
</span><span class='line'>                        <span class="nv">VALID_PYTHON</span><span class="o">=</span>no
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                        <span class="nv">VALID_PYTHON</span><span class="o">=</span>yes
</span><span class='line'>                <span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    <span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="nb">test</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>x<span class="nv">$VALID_PYTHON</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">=</span> xyes <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    AC_MSG_NOTICE<span class="o">([</span>Building with Python bindings<span class="o">])</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if <span class="nb">test</span> <span class="s2">&quot;x$enable_python_integration&quot;</span> <span class="o">=</span> xyes <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nv">pythondir</span><span class="o">=</span><span class="nv">$PYTHON_SITE_PKG</span>
</span><span class='line'>        <span class="nv">pyexecdir</span><span class="o">=</span><span class="nv">$PYTHON_SITE_PKG_EXEC</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>AC_SUBST<span class="o">(</span>PYTHONDIR,<span class="nv">$pythondir</span><span class="o">)</span>
</span><span class='line'>AC_SUBST<span class="o">(</span>PKGPYTHONDIR,<span class="nv">$pkgpythondir</span><span class="o">)</span>
</span><span class='line'>AC_SUBST<span class="o">(</span>PYEXECDIR,<span class="nv">$pyexecdir</span><span class="o">)</span>
</span><span class='line'>AC_SUBST<span class="o">(</span>PKGPYEXECDIR,<span class="nv">$pkgpyexecdir</span><span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AM_CONDITIONAL<span class="o">([</span>ENABLE_PYTHON<span class="o">]</span>,<span class="o">[</span><span class="nb">test </span>x<span class="nv">$VALID_PYTHON</span> <span class="o">=</span> xyes<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As can be seen from this snippet, I depend on two m4 macros to obtain the required information: <a href="http://www.gnu.org/software/automake/manual/html_node/Python.html">AM_PATH_PYTHON</a>, which searches for Python interpreter and subsequently sets a number of variables that will be used at installation time, and AX_PYTHON_DEVEL (I am using a heavily modified version of the code found at <a href="http://www.gnu.org/software/autoconf-archive/ax_python_devel.html">autoconf archives</a>), which will check for the required headers and perform a test compilation to make sure everything works.</p>

<h2>Writing the Makefile.am</h2>

<p>The Python way of building and installing extensions relies on the <a href="http://docs.python.org/3.3/distutils/setupscript.html#describing-extension-modules">Distutils package</a>, and is guaranteed to work on all platforms but integrates with difficulty into autotools based installation scripts.
However, recent versions of <a href="http://www.gnu.org/software/automake/manual/html_node/Python.html">automake</a> come with built-in support for installing python source files (and even byte-compile them), and comes with some recommendations on how to build your Python extensions module (possibly linked to a C-library as in our case) using libtool. The following example code is based upon these recommendations but also contains additional Makefile targets that deal with generating the Python extension module source through swig. Let&rsquo;s assume our original C-library is called <code>mytest</code>, and is located in the <code>src</code> subfolder of the source tree. The Python bindings will be built in the <code>python</code> subfolder.</p>

<p>In this example, I followed the Python recommendations with regard to naming the extension module:
<blockquote><p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore.</p><footer><strong><a href="http://www.python.org/dev/peps/pep-0008/#package-and-module-names">http://www.python.org/dev/peps/pep-0008/#package-and-module-names</a> PEP 8 &ndash; Style Guide for Python Code</strong></footer></blockquote></p>

<p>In this case, the accompanying Python module will be automatically generated by swig, and will be called <code>mytest.py</code>, while the extension module will receive the libtool name <code>_mytest.la</code>. The actual library extension will be platform dependent (.so on Linux/Mac OS X, .dll on Windows).</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;python</span> <span class="err">bindings</span> <span class="err">will</span> <span class="err">only</span> <span class="err">be</span> <span class="err">built</span> <span class="err">if</span> <span class="err">all</span> <span class="err">buildtools</span> <span class="err">are</span> <span class="err">available,</span> <span class="err">hence</span> <span class="err">the</span> <span class="err">following</span> <span class="err">automake</span> <span class="err">conditional&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;if</span> <span class="err">ENABLE_PYTHON&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;our</span> <span class="err">python</span> <span class="err">extension</span> <span class="err">module&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">pyexec_LTLIBRARIES</span> <span class="o">=</span> &lt;em&gt;mytest.la
</span><span class='line'><span class="err">&lt;/em&gt;</span><span class="nv">mytest_la_CFLAGS</span> <span class="o">=</span> <span class="k">$(</span>PYTHON_CFLAGS<span class="k">)</span> -I<span class="k">$(</span>top_srcdir<span class="k">)</span>/include <span class="k">$(</span>PYTHON_CPPFLAGS<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;link</span> <span class="err">to</span> <span class="err">the</span> <span class="err">C-library&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;probably</span> <span class="err">on</span> <span class="err">Windows</span> <span class="err">one</span> <span class="err">will</span> <span class="err">need</span> <span class="err">to</span> <span class="err">link</span> <span class="err">against</span> <span class="err">the</span> <span class="err">python</span> <span class="err">dll</span> <span class="err">as</span> <span class="err">well&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">_mytest_la_LIBADD</span> <span class="o">=</span> ../src/mytest.la&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;the</span> <span class="err">source</span> <span class="err">code</span> <span class="err">for</span> <span class="err">our</span> <span class="err">extensions</span> <span class="err">module&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;nodist</span> <span class="err">because</span> <span class="err">this</span> <span class="err">file</span> <span class="err">will</span> <span class="err">be</span> <span class="err">generated</span> <span class="err">by</span> <span class="err">swig&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">nodist__mytest_la_SOURCES</span> <span class="o">=</span> mytest_wrap.c&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;-module</span> <span class="err">forces</span> <span class="err">libtool</span> <span class="err">to</span> <span class="err">generate</span> <span class="err">a</span> <span class="err">dynamically</span> <span class="err">loadable</span> <span class="err">module&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">_mytest_la_LDFLAGS</span> <span class="o">=</span> -avoid-version -module -shared -export-dynamic&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;nodist</span> <span class="err">because</span> <span class="err">this</span> <span class="err">file</span> <span class="err">will</span> <span class="err">be</span> <span class="err">generated</span> <span class="err">by</span> <span class="err">swig&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">nodist_python_PYTHON</span> <span class="o">=</span> mytest.py&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;this</span> <span class="err">line</span> <span class="err">assumes</span> <span class="err">that</span> <span class="err">the</span> <span class="err">swig</span> <span class="err">interface</span> <span class="err">file</span> <span class="err">mytest.i</span> <span class="err">is</span> <span class="err">located</span> <span class="err">in</span> <span class="err">the</span> <span class="err">src</span> <span class="err">subdirectory&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;mytest_wrap.c</span><span class="o">:</span> <span class="k">$(</span><span class="nv">top_srcdir</span><span class="k">)</span>/<span class="n">src</span>/<span class="n">mytest</span>.<span class="n">i</span>
</span><span class='line'>    <span class="k">$(</span>SWIG<span class="k">)</span> -I<span class="k">${</span><span class="nv">top_srcdir</span><span class="k">}</span>/include -includeall -o mytest_wrap.c -python <span class="k">${</span><span class="nv">top_srcdir</span><span class="k">}</span>/src/mytest.i&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;mytest.py</span><span class="o">:</span> <span class="n">mytest_wrap</span>.<span class="n">c</span>&lt;/<span class="n">p</span>&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;clean-local</span><span class="o">:</span>
</span><span class='line'>    rm -rf mytest_wrap.c mytest.py mytest.pyc&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When writing an autotools based project using these guidelines, you should have no problem compiling and installing your python bindings and the C-library it depends on, with the familiar commands:</p>

<pre><code>./configure
make
make install
</code></pre>

<h2>The code</h2>

<p>The full code follows: as usual it&rsquo;s a github gist so feel free to clone it and hack away at it.</p>

<p><div><script src='https://gist.github.com/6441999.js'></script>
<noscript><pre><code>#python bindings will only be built if all buildtools are available, hence the following automake conditional
if ENABLE_PYTHON
#our python extension module
pyexec_LTLIBRARIES = _mytest.la
_mytest_la_CFLAGS = $(PYTHON_CFLAGS) -I$(top_srcdir)/include $(PYTHON_CPPFLAGS)
#link to the C-library
#probably on Windows one will need to link against the python dll as well
_mytest_la_LIBADD = ../src/mytest.la
#the source code for our extensions module
#nodist because this file will be generated by swig
nodist__mytest_la_SOURCES = mytest_wrap.c
#-module forces libtool to generate a dynamically loadable module
_mytest_la_LDFLAGS = -avoid-version -module -shared -export-dynamic


#nodist because this file will be generated by swig
nodist_python_PYTHON = mytest.py

#this line assumes that the swig interface file mytest.i is located in the src subdirectory
mytest_wrap.c: $(top_srcdir)/src/mytest.i
	$(SWIG) -I${top_srcdir}/include -includeall -o mytest_wrap.c -python ${top_srcdir}/src/mytest.i
        
mytest.py: mytest_wrap.c

clean-local:
	rm -rf mytest_wrap.c mytest.py mytest.pyc
        
endif</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
