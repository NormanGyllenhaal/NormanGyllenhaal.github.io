<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mingw-w64 | Hi, Iâ€™m Yang Peng]]></title>
  <link href="http://yeangpeng.tech/blog/categories/mingw-w64/atom.xml" rel="self"/>
  <link href="http://yeangpeng.tech/"/>
  <updated>2016-02-18T15:37:18+08:00</updated>
  <id>http://yeangpeng.tech/</id>
  <author>
    <name><![CDATA[Yang Peng]]></name>
    <email><![CDATA[me@yangpeng.tech]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HDF5 on Windows: UTF-8 filenames support]]></title>
    <link href="http://yeangpeng.tech/blog/2014/11/07/hdf5-on-windows-utf-8-filenames-support/"/>
    <updated>2014-11-07T02:10:35+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/11/07/hdf5-on-windows-utf-8-filenames-support</id>
    <content type="html"><![CDATA[<p>In a previous <a href="http://tschoonj.github.io/blog/2014/01/29/building-a-64-bit-version-of-hdf5-with-mingw-w64/">post</a>, I have detailed my efforts in getting HDF5 compiled on Windows 64-bit using the MinGW-w64 compiler, which is currently (still) unsupported by the HDF5 developers. Now, I am reporting on yet another problem I encountered with HDF5 on Windows, that is blatantly being ignored by the developers: UTF-8 filename support.</p>

<p>This was brought to my attention by a Japanese user of my software package <a href="http://github.com/tschoonj/xmimsim">XMI-MSIM</a>, who ran into trouble running the program when logged in with a username consisting of Japanese characters. The problem could be traced back to an HDF5 file that has to be opened, which is located in a subdirectory of the user&rsquo;s homedirectory. After investigating the HDF5 code, it became quite clear that this issue is caused by the internal use of the <a href="http://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx"><code>_open</code> function</a>, which is known not to support the Unicode UTF-8 characterset, necessary to represent the Japanese characters. The HDF5 website confirmed this issue with the following statement:</p>

<!--more-->


<p><blockquote><p>Linux, Unix, and similar systems generally handle UTF-8 encodings in correct and predictable ways. There is an apparent consensus in the Linux community that &ldquo;UTF-8 is just the right way to go.&rdquo;<br/>Mac OS systems generally handle UTF-8 encodings correctly.</p></p><p><p>Windows systems use a different Unicode encoding, UCS-2 (discussed in this UTF-16 article) at the system level. Within an HDF5 file and application on a Windows system, UTF-8 encoding should work correctly and as expected. Problems may arise, however, when that UTF-8 encoding is exposed directly to the Windows system. For example:</p></p><p><p>File open and close calls on files with UTF-8 encoded names are likely to fail as the HDF5 open and close operations interact directly with the Windows file system interface.<br/>Anytime an HDF5 command-line utility (h5ls or h5dump, for example) emits text output, the Windows system must interpret the character encodings. If that output is UTF-8 encoded, Windows will correctly interpret only those characters in the ASCII subset of UTF-8.</p><footer><strong>HDF5 documentation <a href="http://www.hdfgroup.org/HDF5/doc/Advanced/UsingUnicode/">http://www.hdfgroup.org/HDF5/doc/Advanced/UsingUnicode/</a></strong></footer></blockquote></p>

<p>So basically I was stuck here since there is no way to convert a filename in UTF-8 encoding to the UCS encoding that was expected by <code>_open</code>. <a href="http://stackoverflow.com/questions/23285759/fopen-file-name-with-utf8-string-in-windows">A solution</a> which would have converted the filename to the corresponding short form (8 character filename with 3 character extension) using <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa364989%28v=vs.85%29.aspx"><code>GetShortPathName</code></a> seemed like a very ugly hack and decided not to pursue it. Instead I opted to hack the HDF5 code myself and replace all instances of <code>_open</code> with its wide char counterparts, that could be fed the UTF-8 filenames after converting them with <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd319072.aspx"><code>MultiByteToWideChar</code></a>.</p>

<p>Fortunately, it turned out that I was not the first one who ran into this situation and found a better solution on the <a href="http://mail.lists.hdfgroup.org/pipermail/hdf-forum_lists.hdfgroup.org/2014-August/007988.html">HDF5 forums</a>. Essentially the solution consists of redefining the <code>HDopen</code> macro from <code>_open</code> to a function of our own that converts our filename in UTF-8 encoding to the corresponding wide char representation and feed it to <code>_wopen</code>. Since we are compiling with MinGW-w64, some other modifications were necessary (the original solution relied on CMake): the src/Makefile.am file was modified in order to compile also the H5FDwindows.c and H5FDwindows.h, the latter being added to the public headers. After running <code>autoreconf -i -f</code> (I had to downgrade the required autoconf version in configure.ac for this to work, but this didn&rsquo;t create any problems), and running the configure script, I modified the src/H5pubconf.h file according to my <a href="http://tschoonj.github.io/blog/2014/01/29/building-a-64-bit-version-of-hdf5-with-mingw-w64/">earlier post</a>, but had to add one more line:</p>

<pre><code class="c ">//fixes first problem
#ifndef H5_HAVE_WIN32_API
#ifdef WIN32 /* defined for all windows systems */
#define H5_HAVE_WIN32_API 1
#endif
#endif

#ifndef H5_HAVE_MINGW
#ifdef __MINGW32__ /*defined for all MinGW compilers */
#define H5_HAVE_MINGW 1
//additional line necessary for UTF-8 build to succeed
#define H5_HAVE_WINDOWS 1
#endif
#endif

//fixes second problem
#define H5_BUILT_AS_DYNAMIC_LIB 1
</code></pre>

<p>Keep in mind that this file is recreated after running configure, so these modifications will have to be repeated!!!</p>

<p>This solution is not pretty, and it will have to be repeated every time you compile a new version of HDF5. Ideally, the HDF5 developers would implement a solution based on this hack, which would bring it in line with most other open-source projects that assume UTF-8 filenames on all platforms. I doubt this will happen anytime soon though, since the original solution posted on the HDF5 forums has not been commented on by any of the developers&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gtk2 64-bit Windows Runtime Environment Installer: now on GitHub!]]></title>
    <link href="http://yeangpeng.tech/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github/"/>
    <updated>2014-09-29T19:33:58+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github</id>
    <content type="html"><![CDATA[<p>As predicted in my <a href="http://tschoonj.github.io/blog/2014/02/08/gtk2-64-bit-windows-runtime-environment-installer/">first post</a> on the Gtk2 64-bit Windows Runtime Environment Installer, I have indeed ventured into compiling Gtk (2.24.24) and all its dependencies, mainly because I was getting increasingly unhappy with the old Gtk 2.22.1 based bundle that <a href="http://www.gtk.org/download/win64.php">is being distributed</a> by the Gtk project. It was in fact this very bundle that I was using to generate the installer I announced in my first post on this subject.</p>

<p>So, after spending about 10 hours of compiling (and recompiling a couple of times when I didn&rsquo;t get the configure options right) of more than a dozen software packages, I ended up with a fully working (at least until now&hellip;) collection of DLLs. I updated the code from my initial installer to include the new DLLs and uploaded the new installer <a href="http://lvserver.ugent.be/gtk-win64/">here</a>. I also uploaded a zip-file (sdk) containing all executables, DLLs, linking libraries (.dll.a) and headers, that can be used by anyone not willing to replicate my compilation effort. In fact I recommend that people using this installer to distribute the Gtk runtime along with their own program, to compile and link against this sdk, in order to avoid any link issues at runtime&hellip;</p>

<p>You may notice that I did not use the exact same dependencies in my compilation stack as those offered by the official Gtk bundle. I followed the <a href="http://hexchat.github.io/gtk-win32/">Hexchat flowchart</a> and ended up with additional dependencies of libffi and harfbuzz. libexpat was replaced by libxml2. This explains why the new installer is considerably larger than the previous one.</p>

<p>Last but not least, I forked the original repository of the installer from <a href="http://sourceforge.net/projects/gtk-win/">its sourceforge</a> repository and created my own personal copy on <a href="https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer">GitHub</a>. Check the README file for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gtk2 64-bit Windows Runtime Environment Installer]]></title>
    <link href="http://yeangpeng.tech/blog/2014/02/08/gtk2-64-bit-windows-runtime-environment-installer/"/>
    <updated>2014-02-08T12:47:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/02/08/gtk2-64-bit-windows-runtime-environment-installer</id>
    <content type="html"><![CDATA[<p><strong>Update: this post has been largely superseded by <a href="http://tschoonj.github.io/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github">http://tschoonj.github.io/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github</a> </strong></p>

<p>As I already mentioned in my <a href="http://tschoonj.github.io/blog/2014/01/29/building-a-64-bit-version-of-hdf5-with-mingw-w64/">last post</a>, I have been busy compiling software with MinGW-w64 for the Windows 64-bit platform.f. One of the packages I rely on is <a href="http://www.gtk.org">Gtk+</a> (version 2 for now), and its many dependencies. Fortunately however, the <a href="http://www.gtk.org/download/win64.php">Gtk+ website</a> offers binaries for this architecture, so I didn&rsquo;t have to bother compiling them myself.</p>

<p>In the end I also managed to build all the other dependencies I needed for <a href="http://github.com/tschoonj/xmimsim">XMI-MSIM</a>, so the last step for me was to update my <a href="http://nsis.sourceforge.net/Main_Page">NSIS</a> installer for Windows 64-bit machines. It didn&rsquo;t take long for me to realize that one of the crucial components I install is the <a href="http://gtk-win.sourceforge.net/home/">Gtk Windows Runtime Environment Installer</a>, which really facilitates installing Gtk+ based applications. Unfortunately, Alexander Shaduri, the developer only distributes a 32-bit version of this package, and he has assured me through some emailing that he had no plans to write a 64-bit version due to <a href="http://www.gtk.org/download/win64.php">the experimental nature</a> of the packages that are produced by the Gtk+ people.</p>

<p>This being said, I still needed such an installer so I wrote one based on his NSIS script, using the official 64-bit Gtk+ packages for Windows 64-bit. The only major change I introduced was dropping support for the compatibility DLLs, which were redundant anyway. I am sharing the modified NSIS script as Github Gist so start hacking away at it. This script has some dependencies, apart from the DLLs, which are necessary to build the installer. Since I didn&rsquo;t change them at all, use the files that the original developer is sharing on <a href="http://sourceforge.net/p/gtk-win/code/HEAD/tree/">sourceforge</a>.</p>

<p>The installer itself can be obtained <a href="http://lvserver.ugent.be/gtk-win64/">here</a>. If you would like to see an example on how to use this installer from within your own NSIS script, have a look at e.g. <a href="https://github.com/tschoonj/xmimsim/blob/master/nsis/xmimsim-win64.nsi.in">my XMI-MSIM Windows 64-bit installer</a>.</p>

<!-- more -->


<p>The observant reader may have noticed that the version of Gtk+ that is included is 2.22.1, which is relatively old. In the future I may become sufficiently bold and adventurous, and end up compiling the latest Gtk+ 2.24.x version myself and releasing an updated installer. If this happens, I will update this blogpost&hellip;</p>

<p><div><script src='https://gist.github.com/8882727.js'></script>
<noscript><pre><code>
; NSIS2 Script for GTK2-Runtime
; by Alexander Shaduri &lt;ashaduri &#39;at&#39; gmail.com&gt;.
; Compatible with NSIS Unicode 2.45.
; Public Domain

; The naming convention is:
; Product: GTK2-Runtime;
; Directory and package names: gtk2-runtime.
; The reason for this is that when gtk3 comes out, it
; should be installable side by side with this package.


!define GTK_VERSION &quot;2.22.1&quot;
!define GTK_BIN_VERSION &quot;2.10.0&quot;
!define PRODUCT_VERSION &quot;${GTK_VERSION}-2014-02-01-ts-win64&quot;
!define PRODUCT_NAME &quot;GTK2-Runtime Win64&quot;
!define PRODUCT_PUBLISHER &quot;Tom Schoonjans&quot;
!define PRODUCT_WEB_SITE &quot;http://gtk-win.sourceforge.net&quot;
!define INSTALLER_OUTPUT_FILE &quot;gtk2-runtime-${PRODUCT_VERSION}.exe&quot;

;!define PRODUCT_DIR_REGKEY &quot;Software\Microsoft\Windows\CurrentVersion\App Paths\AppMainExe.exe&quot;
!define PRODUCT_UNINST_ROOT_KEY &quot;HKLM&quot;
!define PRODUCT_UNINST_KEY &quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}&quot;

!define REGISTRY_APP_PATHS &quot;Software\Microsoft\Windows\CurrentVersion\App Paths&quot;


; AddToPath and friends should work with all users
!define ALL_USERS

!include nsi_env_var_update.nsh  ; EnvVar* functions
!include &quot;FileFunc.nsh&quot;  ; GetOptions
!include &quot;x64.nsh&quot;
!include &quot;LogicLib.nsh&quot;


; --------------- General Settings


; this is needed for proper start menu item manipulation (for all users) in vista
RequestExecutionLevel admin

; This compressor gives us the best results
SetCompressor /SOLID lzma

; Do a CRC check before installing
CRCCheck On

; This is used in titles
Name &quot;${PRODUCT_NAME}&quot;  ;  ${PRODUCT_VERSION}

; Output File Name
OutFile &quot;${INSTALLER_OUTPUT_FILE}&quot;


; The Default Installation Directory
InstallDir &quot;$PROGRAMFILES64\${PRODUCT_NAME}&quot;
;InstallDir &quot;$WINDIR&quot;
; Detect the old installation
InstallDirRegKey HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;&quot;
;InstallDirRegKey HKLM &quot;${PRODUCT_DIR_REGKEY}&quot; &quot;&quot;

ShowInstDetails show
ShowUnInstDetails show





; --------------------- MUI INTERFACE

; MUI 2.0 compatible install
!include &quot;MUI2.nsh&quot;
!include &quot;InstallOptions.nsh&quot;

; Icon &quot;gtk.ico&quot;
; UninstallIcon &quot;gtk.ico&quot;

; MUI Settings
!define MUI_ABORTWARNING
;!define MUI_ICON &quot;nsi_install.ico&quot;
!define MUI_ICON &quot;gtk.ico&quot;
;!define MUI_UNICON &quot;nsi_uninstall.ico&quot;
!define MUI_UNICON &quot;gtk.ico&quot;


; Things that need to be extracted on first (keep these lines before any File command!)
; Only useful for BZIP2 compression
ReserveFile &quot;nsi_pathpage.ini&quot;
ReserveFile &quot;nsi_configpage.ini&quot;
ReserveFile &quot;${NSISDIR}\Plugins\InstallOptions.dll&quot;


; Pages to show during installation
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE &quot;license.txt&quot;
!insertmacro MUI_PAGE_COMPONENTS
Page custom PathPage PathPageExit ; Custom page
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE DirectoryPageExit
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES

;!define MUI_FINISHPAGE_RUN &quot;$INSTDIR\gtk2-runtime\gtk2_prefs.exe&quot;
;!define MUI_FINISHPAGE_SHOWREADME &quot;$INSTDIR\Example.file&quot;
;!define MUI_FINISHPAGE_RUN_NOTCHECKED
!define MUI_FINISHPAGE_NOAUTOCLOSE
;!define MUI_FINISHPAGE_NOREBOOTSUPPORT
!insertmacro MUI_PAGE_FINISH



; Uninstaller page
!insertmacro MUI_UNPAGE_CONFIRM
UninstPage custom un.DeleteConfig  ;Custom page
!insertmacro MUI_UNPAGE_INSTFILES




Function PathPage
	!insertmacro MUI_HEADER_TEXT &quot;$(TEXT_IO_TITLE)&quot; &quot;$(TEXT_IO_SUBTITLE)&quot;
	!insertmacro INSTALLOPTIONS_DISPLAY &quot;nsi_pathpage.ini&quot;
FunctionEnd


; Note: These options are unsupported unless the installer is launched in silent mode (/S).
; e.g. /setpath=no /dllpath=root /sideeffects=no
var install_option_setpath  ; set PATH: yes (default), no
var install_option_dllpath  ; bin (default), lib, root
var install_option_sideeffects  ; yes (default), no. no = don&#39;t write to registry, PATH or start menu.
var install_option_translations  ; install translations: yes, no (default)
var install_option_removeold  ; uninstall the old version first (if present): yes (default), no.

var LIB_INSTDIR
var DLL_DIR_NAME
var DLL_TMP


; Executed when leaving PathPage page.
; Sets DLL_DIR_NAME to dll directory name.
Function PathPageExit
	
	IfSilent dllpath_silent
		; if not silent, show a page with radiobuttons
		!insertmacro INSTALLOPTIONS_READ $DLL_TMP &quot;nsi_pathpage.ini&quot; &quot;Field 3&quot; &quot;State&quot;
		StrCmp $DLL_TMP &quot;1&quot; goto_dll_bin
		!insertmacro INSTALLOPTIONS_READ $DLL_TMP &quot;nsi_pathpage.ini&quot; &quot;Field 4&quot; &quot;State&quot;
		StrCmp $DLL_TMP &quot;1&quot; goto_dll_lib
		!insertmacro INSTALLOPTIONS_READ $DLL_TMP &quot;nsi_pathpage.ini&quot; &quot;Field 5&quot; &quot;State&quot;
		StrCmp $DLL_TMP &quot;1&quot; goto_dll_none
		goto dllpath_exit
	dllpath_silent:
		; if silent, use the /dllpath= option
		StrCmp $install_option_dllpath &quot;bin&quot; goto_dll_bin
		StrCmp $install_option_dllpath &quot;lib&quot; goto_dll_lib
		StrCmp $install_option_dllpath &quot;root&quot; goto_dll_none goto_dll_bin  ; default to bin if not matched
	dllpath_exit:

	goto_dll_none:
		StrCpy $DLL_DIR_NAME &quot;&quot;
		goto goto_dll_exit
	goto_dll_lib:
		StrCpy $DLL_DIR_NAME &quot;lib&quot;
		goto goto_dll_exit
	goto_dll_bin:
		StrCpy $DLL_DIR_NAME &quot;bin&quot;
		goto goto_dll_exit
	goto_dll_exit:

FunctionEnd


; Set $LIB_INSTDIR to &lt;instpath&gt;\bin, &lt;instpath&gt;\lib or &lt;instpath&gt;\ .
; Must be after the directory selection page.
Function DirectoryPageExit
	StrCpy $LIB_INSTDIR &quot;$INSTDIR&quot;
	StrCmp $DLL_DIR_NAME &quot;&quot; no_dll_append
		StrCpy $LIB_INSTDIR &quot;$INSTDIR\$DLL_DIR_NAME&quot;
	no_dll_append:
FunctionEnd



Function un.DeleteConfig
	; !insertmacro MUI_HEADER_TEXT &quot;$(TEXT_IO_TITLE)&quot; &quot;$(TEXT_IO_SUBTITLE)&quot;
	!insertmacro INSTALLOPTIONS_DISPLAY &quot;nsi_configpage.ini&quot;
FunctionEnd



; Language files
!insertmacro MUI_LANGUAGE &quot;English&quot;


; --------------- END MUI



;Description
LangString DESC_SecCopyUI ${LANG_ENGLISH} &quot;GTK2 Runtime&quot;
LangString TEXT_IO_TITLE ${LANG_ENGLISH} &quot;GTK2 Runtime&quot;
LangString TEXT_IO_SUBTITLE ${LANG_ENGLISH} &quot;Additional options&quot;


;License page Introduction
;LicenseText &quot;You must agree to this license before installing.&quot;
;License text
;LicenseData /LANG=${LANG_ENGLISH} &quot;license.txt&quot;





; ----------------- INSTALLATION TYPES

InstType &quot;Recommended&quot;  ; 1
InstType &quot;Full&quot;  ; 2


var SEC_TRANSLATIONS_INSTALLED


Section &quot;GTK+ libraries (required)&quot; SecGTK
SectionIn 1 2 RO
	SetShellVarContext all  ; use all user variables as opposed to current user
	SetOverwrite On

	SetOutPath &quot;$LIB_INSTDIR&quot;

	; NOTE: If you add or remove any of these,
	; be sure to do the same in the uninstall section.

	File libfreetype-6.dll  ; freetype is needed for ft2 pango backend
	File libintl-8.dll  ; gettext, needed by all i18n libs
	File libatk-1.0-0.dll  ; atk
	File libcairo-2.dll  ; cairo, needed by gtk
	File libcairo-gobject-2.dll  ; cairo. Doesn&#39;t seem to be required, but since we&#39;re distributing cairo...
	File libcairo-script-interpreter-2.dll  ; cairo. Doesn&#39;t seem to be required, but since we&#39;re distributing cairo...
	File libexpat-1.dll  ; fontconfig needs this
	File libfontconfig-1.dll  ; fontconfig is needed for ft2 pango backend
	File libgailutil-18.dll  ; from gtk
	File libgdk_pixbuf-2.0-0.dll  ; from gtk
	File libgdk-win32-2.0-0.dll  ; from gtk
	File libgio-2.0-0.dll  ; from glib
	File libglib-2.0-0.dll  ; glib
	File libgmodule-2.0-0.dll  ; from glib
	File libgobject-2.0-0.dll  ; from glib
	File libgthread-2.0-0.dll  ; from glib
	File libgtk-win32-2.0-0.dll  ; gtk
	File libpango-1.0-0.dll  ; pango, needed by gtk
	File libpangocairo-1.0-0.dll  ; pango, needed by gtk
	File libpangoft2-1.0-0.dll  ; pango, needed by gtk
	File libpangowin32-1.0-0.dll  ; pango, needed by gtk
	File libpng14-14.dll  ; for gdk_pixbuf loader.
	File zlib1.dll  ; png and many others need this


	; We install this into the same place as the DLLs to avoid any PATH manipulation.
	SetOutPath &quot;$LIB_INSTDIR&quot;
	File bin\fc-cache.exe
	File bin\fc-list.exe
	File bin\gdk-pixbuf-query-loaders.exe  ; from gdk_pixbuf
	File bin\gspawn-win64-helper.exe
	File bin\gspawn-win64-helper-console.exe
	File bin\gtk-query-immodules-2.0.exe
	File bin\gtk-update-icon-cache.exe
	File bin\gtk-update-icon-cache.exe.manifest
	File bin\pango-querymodules.exe
	
	
	SetOutPath &quot;$INSTDIR&quot;
	SetOverwrite off
	File /r etc  ; don&#39;t overwrite config files
	SetOverwrite On


	SetOutPath &quot;$INSTDIR\lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}&quot;
	File lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}\loaders.cache

	; SetOutPath &quot;$INSTDIR\lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}\loaders&quot;
	; File /r lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}\loaders

	SetOutPath &quot;$INSTDIR\lib\gtk-2.0\modules&quot;
	File /r lib\gtk-2.0\modules

	SetOutPath &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}&quot;
	; no longer in gtk as of 2.14.5.
	; File /r lib\gtk-2.0\${GTK_BIN_VERSION}\immodules
	; gone as of gtk 2.16.6-2.
	; File /r lib\gtk-2.0\${GTK_BIN_VERSION}\loaders

	; wimp
	SetOutPath &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\engines&quot;
	File lib\gtk-2.0\${GTK_BIN_VERSION}\engines\libwimp*.dll
	; We install this, but other installers may not have it.
	File lib\gtk-2.0\${GTK_BIN_VERSION}\engines\libpixmap*.dll

	SetOutPath &quot;$INSTDIR\share\locale&quot;
	File share\locale\locale.alias  ; from gettext

	; Default theme
	SetOutPath &quot;$INSTDIR\share\themes&quot;
	; Why have two dirs with the same content? disable &quot;Default&quot;.
	; File /r share\themes\Default
	File /r share\themes\Emacs
	File /r share\themes\MS-Windows
	File /r share\themes\Raleigh


	SetOutPath &quot;$INSTDIR\gtk2-runtime&quot;
	; File gtk-postinstall.bat ; this file is generated now
	File license.txt
	File license_gpl.txt
	File license_lgpl.txt
	File license_jpeg.txt
	File license_png.txt
	File license_zlib.txt
	File gtk.ico  ; needed for &quot;add/remove programs&quot;


	; this script updates some config files, but it&#39;s unsafe
	; (gtk or pango may not work afterwards), so don&#39;t call it.
	Push $INSTDIR\gtk2-runtime\gtk-postinstall.bat
	Call WritePostInstall
	; update pango.modules, not working for now
	; Exec &#39;$INSTDIR\gtk2-runtime\gtk-postinstall.bat&#39;

SectionEnd ; end of gtk section





Section &quot;Translations&quot; SecTranslations
SectionIn 2
	SetShellVarContext all  ; use all user variables as opposed to current user
	StrCpy $SEC_TRANSLATIONS_INSTALLED &quot;1&quot;
	SetOutPath &quot;$INSTDIR&quot;
	SetOverwrite On

	; SetOutPath &quot;$INSTDIR\lib&quot;
	; File /r lib\locale

	; gtk (beginning with 2.12.3) uses share\locale
	SetOutPath &quot;$INSTDIR\share&quot;
	File /r share\locale

SectionEnd



; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
	!insertmacro MUI_DESCRIPTION_TEXT ${SecGTK} &quot;GTK+ 64-bit Runtime Libraries&quot;
	!insertmacro MUI_DESCRIPTION_TEXT ${SecTranslations} &quot;Additional translations (some are incomplete)&quot;
!insertmacro MUI_FUNCTION_DESCRIPTION_END




; Executed on installer run
Function .onInit
	SetShellVarContext all  ; use all user variables as opposed to current user
	${IfNot} ${RunningX64} 
		MessageBox MB_OK|MB_ICONEXCLAMATION &quot;This installation requires a 64-bit Windows system&quot; /SD IDOK
		Abort
	${EndIf}

	SetRegView 64
		
	

	!insertmacro INSTALLOPTIONS_EXTRACT &quot;nsi_pathpage.ini&quot;

	StrCpy $SEC_TRANSLATIONS_INSTALLED &quot;0&quot;  ; set to 1 in appropriate section

	${GetOptions} &quot;$CMDLINE&quot; &quot;/setpath=&quot; $install_option_setpath
	${GetOptions} &quot;$CMDLINE&quot; &quot;/dllpath=&quot; $install_option_dllpath
	${GetOptions} &quot;$CMDLINE&quot; &quot;/sideeffects=&quot; $install_option_sideeffects
	${GetOptions} &quot;$CMDLINE&quot; &quot;/translations=&quot; $install_option_translations
	${GetOptions} &quot;$CMDLINE&quot; &quot;/removeold=&quot; $install_option_removeold

	; Debug stuff
	; MessageBox MB_ICONINFORMATION|MB_OK &quot;/setpath=$install_option_setpath \
	;	/dllpath=$install_option_dllpath /sideeffects=$install_option_sideeffects \
	;	INSTDIR: $INSTDIR&quot; /SD IDOK

	; if we&#39;re using /sideeffects=no, set /setpath=no, because we can&#39;t
	; revert it during uninstall (there&#39;s no dllpath in registry).
	StrCmp $install_option_sideeffects &quot;no&quot; &quot;&quot; init_sideeffects
		StrCpy $install_option_setpath &quot;no&quot;  ; set /setpath=no
		goto init_sideeffects_exit
	init_sideeffects:
		Call PreventMultipleInstances  ; in no-sideeffects mode this has no purpose
		Call DetectPrevInstallation  ; we don&#39;t want local installations to interfere with global ones.
	init_sideeffects_exit:


	; enable translations if requested through command line
	StrCmp $install_option_translations &quot;yes&quot; &quot;&quot; no_translations
		push $R0
		SectionGetFlags ${SecTranslations} $R0
		IntOp $R0 $R0 | ${SF_SELECTED}
		SectionSetFlags ${SecTranslations} $R0
		pop $R0
	no_translations:

	; Page callbacks are not called if in silent mode, so call these manually
	IfSilent &quot;&quot; +3
		Call PathPageExit
		Call DirectoryPageExit

FunctionEnd



; ------------------ POST INSTALL


var ADD_TO_PATH


Section -post
	SetShellVarContext all  ; use all user variables as opposed to current user

	IfSilent PATH_silent
		; Read a value from an InstallOptions INI File
		!insertmacro INSTALLOPTIONS_READ $ADD_TO_PATH &quot;nsi_pathpage.ini&quot; &quot;Field 1&quot; &quot;State&quot;
		StrCmp $ADD_TO_PATH &quot;1&quot; goto_set_path_yes goto_set_path_no
		goto PATH_exit
	PATH_silent:
		; if silent, use the /setpath= option
		StrCmp $install_option_setpath &quot;no&quot; goto_set_path_no goto_set_path_yes
	PATH_exit:


	goto_set_path_yes:
		; The user requested to add the libdir to $PATH.
		StrCpy $ADD_TO_PATH &quot;1&quot;
		; Push $LIB_INSTDIR
		; Call AddToPath  ; add $LIB_INSTDIR to system $PATH
		Push $0  ; result PATH
		${EnvVarUpdate} $0 &quot;PATH&quot; &quot;A&quot; &quot;HKLM&quot; &quot;$LIB_INSTDIR&quot; ; Append
		Pop $0
		; MessageBox MB_ICONINFORMATION|MB_OK &quot;$LIB_INSTDIR added to path&quot;
		goto goto_set_path_exit
	goto_set_path_no:
		StrCpy $ADD_TO_PATH &quot;0&quot;
		goto goto_set_path_exit
	goto_set_path_exit:


	; write out uninstaller
	WriteUninstaller &quot;$INSTDIR\gtk2_runtime_uninst.exe&quot;

	StrCmp $install_option_sideeffects &quot;no&quot; no_sideeffects
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;InstallationDirectory&quot; &quot;$INSTDIR&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;DllPath&quot; &quot;$LIB_INSTDIR&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;Vendor&quot; &quot;${PRODUCT_PUBLISHER}&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;PackageVersion&quot; &quot;${PRODUCT_VERSION}&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;Version&quot; &quot;${GTK_VERSION}&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;BinVersion&quot; &quot;${GTK_BIN_VERSION}&quot;

		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;DllDirName&quot; &quot;$DLL_DIR_NAME&quot;  ; lib, bin, or &quot;&quot;
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;UsingSystemPath&quot; $ADD_TO_PATH
		WriteRegStr HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;TranslationsInstalled&quot; $SEC_TRANSLATIONS_INSTALLED

		; compat with installer from http://gimp-win.sourceforge.net/
		WriteRegStr HKLM &quot;SOFTWARE\GTK\2.0&quot; &quot;Path&quot; &quot;$INSTDIR&quot;
		WriteRegStr HKLM &quot;SOFTWARE\GTK\2.0&quot; &quot;Version&quot; &quot;${GTK_VERSION}&quot;
		; compat with Dropline&#39;s GTK
		WriteRegStr HKLM &quot;SOFTWARE\GTK\2.0&quot; &quot;DllPath&quot; &quot;$LIB_INSTDIR&quot;

		; Information for the uninstall component in &quot;add/remove programs&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayName&quot; &quot;${PRODUCT_NAME}&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;UninstallString&quot; &quot;$INSTDIR\gtk2_runtime_uninst.exe&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;InstallLocation&quot; &quot;$INSTDIR&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;Publisher&quot; &quot;${PRODUCT_PUBLISHER}&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayIcon&quot; &quot;$INSTDIR\gtk2-runtime\gtk.ico&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;URLInfoAbout&quot; &quot;${PRODUCT_WEB_SITE}&quot;
		WriteRegStr HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;DisplayVersion&quot; &quot;${PRODUCT_VERSION}&quot;
		WriteRegDWORD HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;NoModify&quot; 1
		WriteRegDWORD HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;NoRepair&quot; 1

		; uninstall shortcut
		CreateDirectory &quot;$SMPROGRAMS\GTK2 Runtime&quot;
		CreateShortCut &quot;$SMPROGRAMS\GTK2 Runtime\Uninstall GTK2 Runtime.lnk&quot; &quot;$INSTDIR\gtk2_runtime_uninst.exe&quot; &quot;&quot; &quot;&quot;
		WriteIniStr &quot;$SMPROGRAMS\GTK2 Runtime\Go to the website.url&quot; &quot;InternetShortcut&quot; &quot;URL&quot; &quot;${PRODUCT_WEB_SITE}&quot;


		; Write $INSTDIR\gtk2-runtime\gtk2r-env.bat
		; This script sets the GTK environment variables
		DetailPrint &quot;Generating $INSTDIR\gtk2-runtime\gtk2r-env.bat&quot;
		Push $INSTDIR\gtk2-runtime\gtk2r-env.bat
		Call WriteEnvBat
		DetailPrint &quot;Done&quot;

	no_sideeffects:

SectionEnd ; post





; ---------------- UNINSTALL


; Note: These options are unsupported unless the uninstaller is launched in silent mode (/S).
var uninstall_option_remove_config  ; yes, no (default).
var uninstall_option_sideeffects  ; yes (default), no. Use if it was installed with this option.
; These are used only if /sideffects=no :
var uninstall_option_dllpath  ; uninstall dlls from: bin (default), lib, root.
var uninstall_option_translations  ; uninstall translations: yes, no (default)


Function un.onInit
	SetRegView 64
	${GetOptions} &quot;$CMDLINE&quot; &quot;/remove_config=&quot; $uninstall_option_remove_config
	${GetOptions} &quot;$CMDLINE&quot; &quot;/sideeffects=&quot; $uninstall_option_sideeffects
	${GetOptions} &quot;$CMDLINE&quot; &quot;/dllpath=&quot; $uninstall_option_dllpath
	${GetOptions} &quot;$CMDLINE&quot; &quot;/translations=&quot; $uninstall_option_translations
FunctionEnd



Function un.onUninstSuccess
	HideWindow
	MessageBox MB_ICONINFORMATION|MB_OK &quot;$(^Name) was successfully removed from your computer.&quot; /SD IDOK
FunctionEnd




var leave_config  ; don&#39;t remove global gtk config (uninstall page option)
;var INST_DIR_REG  ; installation dir from registry (uninstall stage)


; This is a separate function to allow multiple calls to it
Function un.DeleteDlls
	SetShellVarContext all  ; use all user variables as opposed to current user

	StrCpy $LIB_INSTDIR &quot;$INSTDIR&quot;
	StrCmp $DLL_DIR_NAME &quot;&quot; un_no_dll_append
		StrCpy $LIB_INSTDIR &quot;$INSTDIR\$DLL_DIR_NAME&quot;
	un_no_dll_append:

	; bin stuff (they are in the same directory)
	Delete $LIB_INSTDIR\fc-cache.exe
	Delete $LIB_INSTDIR\fc-list.exe
	Delete $LIB_INSTDIR\gdk-pixbuf-query-loaders.exe
	Delete $LIB_INSTDIR\gspawn-win64-helper.exe
	Delete $LIB_INSTDIR\gspawn-win64-helper-console.exe
	Delete $LIB_INSTDIR\gtk-query-immodules-2.0.exe
	Delete $LIB_INSTDIR\gtk-update-icon-cache.exe
	Delete $LIB_INSTDIR\gtk-update-icon-cache.exe.manifest
	Delete $LIB_INSTDIR\pango-querymodules.exe

	; dlls
	Delete $LIB_INSTDIR\libfreetype-6.dll  ; freetype is needed for ft2 pango backend
	Delete $LIB_INSTDIR\libintl-8.dll  ; gettext, needed by all i18n libs
	Delete $LIB_INSTDIR\libatk-1.0-0.dll  ; atk
	Delete $LIB_INSTDIR\libcairo-2.dll  ; cairo, needed by gtk
	Delete $LIB_INSTDIR\libcairo-gobject-2.dll  ; cairo. Doesn&#39;t seem to be required, but since we&#39;re distributing cairo...
	Delete $LIB_INSTDIR\libcairo-script-interpreter-2.dll  ; cairo. Doesn&#39;t seem to be required, but since we&#39;re distributing cairo...
	Delete $LIB_INSTDIR\libexpat-1.dll  ; fontconfig needs this
	Delete $LIB_INSTDIR\libfontconfig-1.dll  ; fontconfig is needed for ft2 pango backend
	Delete $LIB_INSTDIR\libgailutil-18.dll  ; from gtk
	Delete $LIB_INSTDIR\libgdk_pixbuf-2.0-0.dll  ; from gtk
	Delete $LIB_INSTDIR\libgdk-win32-2.0-0.dll  ; from gtk
	Delete $LIB_INSTDIR\libgio-2.0-0.dll  ; from glib
	Delete $LIB_INSTDIR\libglib-2.0-0.dll  ; glib
	Delete $LIB_INSTDIR\libgmodule-2.0-0.dll  ; from glib
	Delete $LIB_INSTDIR\libgobject-2.0-0.dll  ; from glib
	Delete $LIB_INSTDIR\libgthread-2.0-0.dll  ; from glib
	Delete $LIB_INSTDIR\libgtk-win32-2.0-0.dll  ; gtk
	Delete $LIB_INSTDIR\libpango-1.0-0.dll  ; pango, needed by gtk
	Delete $LIB_INSTDIR\libpangocairo-1.0-0.dll  ; pango, needed by gtk
	Delete $LIB_INSTDIR\libpangoft2-1.0-0.dll  ; pango, needed by gtk
	Delete $LIB_INSTDIR\libpangowin32-1.0-0.dll  ; pango, needed by gtk
	Delete $LIB_INSTDIR\libpng14-14.dll  ; for gdk_pixbuf loader.
	Delete $LIB_INSTDIR\zlib1.dll  ; png and many others need this


FunctionEnd



var found_dir
var find_handle_lang_dir


Section Uninstall
	SetShellVarContext all  ; use all user variables as opposed to current user
	SetAutoClose false

	; Note: Checking if there is a registry key present, and using it to determine
	; if this is a private installation will not work, as it will break if a parallel
	; shared installation is present.

	; ReadRegStr $INST_DIR_REG HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;InstallationDirectory&quot;
	; StrCmp $INST_DIR_REG &quot;&quot; uninst_no_sideeffects
	StrCmp $uninstall_option_sideeffects &quot;no&quot; uninst_no_sideeffects
		; For PATH removal
		ReadRegStr $LIB_INSTDIR HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;DllPath&quot;
		ReadRegStr $DLL_DIR_NAME HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;DllDirName&quot;
		ReadRegStr $ADD_TO_PATH HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;UsingSystemPath&quot;
		ReadRegStr $SEC_TRANSLATIONS_INSTALLED HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot; &quot;TranslationsInstalled&quot;

		DeleteRegKey HKLM &quot;SOFTWARE\GTK\2.0&quot;  ; dropline, etc...
		DeleteRegKey /ifempty HKLM &quot;SOFTWARE\GTK&quot;  ; don&#39;t damage other installations

		DeleteRegKey HKLM &quot;SOFTWARE\${PRODUCT_NAME}&quot;
		DeleteRegKey HKLM &quot;${PRODUCT_UNINST_KEY}&quot;

		; FIXME: Do we have this registry key?
		; DeleteRegKey HKCU &quot;Software\${PRODUCT_NAME}&quot;

		Delete &quot;$SMPROGRAMS\GTK2 Runtime\Uninstall GTK2 Runtime.lnk&quot;
		Delete &quot;$SMPROGRAMS\GTK2 Runtime\Go to the website.url&quot;
		RMDir &quot;$SMPROGRAMS\GTK2 Runtime&quot;  ; only if empty, theme selector may still be there

		; Remove GTK from $PATH
		StrCmp $ADD_TO_PATH &quot;0&quot; un_nopath  ; Setting $PATH was not requested during installation
		; Push $LIB_INSTDIR
		; Call un.RemoveFromPath
		Push $0  ; result PATH
		${un.EnvVarUpdate} $0 &quot;PATH&quot; &quot;R&quot; &quot;HKLM&quot; &quot;$LIB_INSTDIR&quot; ; remove
		Pop $0
		; MessageBox MB_OK &quot;$LIB_INSTDIR removed from PATH&quot; /SD IDOK
		un_nopath:

		; $DLL_DIR_NAME is from the registry here
		Call un.DeleteDlls

		goto delete_dlls_exit


	uninst_no_sideeffects:


		Strcpy $SEC_TRANSLATIONS_INSTALLED &quot;0&quot;
		StrCmp $uninstall_option_translations &quot;yes&quot; &quot;&quot; nodelete_translations
			Strcpy $SEC_TRANSLATIONS_INSTALLED &quot;1&quot;
		nodelete_translations:


		; All dll files. We delete them before /bin and /lib, so that
		; the directories are empty afterwards.

		; Since we have no registry, we have to remove dlls from all possible locations
		; StrCpy $DLL_DIR_NAME &quot;&quot;
		; Call un.DeleteDlls
		; StrCpy $DLL_DIR_NAME &quot;bin&quot;
		; Call un.DeleteDlls
		; StrCpy $DLL_DIR_NAME &quot;lib&quot;
		; Call un.DeleteDlls
		
		; Force users to use the command-line argument instead:
		; if silent, use the /dllpath= option
		StrCmp $uninstall_option_dllpath &quot;bin&quot; goto_undll_bin
		StrCmp $uninstall_option_dllpath &quot;lib&quot; goto_undll_lib
		StrCmp $uninstall_option_dllpath &quot;root&quot; goto_undll_none goto_undll_bin  ; default to bin if not matched

		goto_undll_none:
			StrCpy $DLL_DIR_NAME &quot;&quot;
			goto goto_undll_exit
		goto_undll_lib:
			StrCpy $DLL_DIR_NAME &quot;lib&quot;
			goto goto_undll_exit
		goto_undll_bin:
			StrCpy $DLL_DIR_NAME &quot;bin&quot;
			goto goto_undll_exit

		goto_undll_exit:
		    Call un.DeleteDlls

	delete_dlls_exit:


	; Delete config file?
	IfSilent &quot;&quot; read_config_page
		StrCmp $uninstall_option_remove_config &quot;yes&quot; delete_config skip_config

	read_config_page:
		!insertmacro INSTALLOPTIONS_READ $leave_config &quot;nsi_configpage.ini&quot; &quot;Field 1&quot; &quot;State&quot;
		StrCmp $leave_config &quot;1&quot; skip_config

	delete_config:
		Delete &quot;$INSTDIR\etc\gtk-2.0\gtkrc&quot;
	skip_config:


	Delete &quot;$INSTDIR\etc\fonts\fonts.conf&quot;
	RMDir &quot;$INSTDIR\etc\fonts&quot;  ; only if empty
	Delete &quot;$INSTDIR\etc\pango\pango.modules&quot;
	RMDir &quot;$INSTDIR\etc\pango&quot;  ; only if empty
	; Delete &quot;$INSTDIR\etc\gtk-2.0\gdk-pixbuf.loaders&quot;
	Delete &quot;$INSTDIR\etc\gtk-2.0\gtk.immodules&quot;
	Delete &quot;$INSTDIR\etc\gtk-2.0\gtkrc.default&quot;
	Delete &quot;$INSTDIR\etc\gtk-2.0\im-multipress.conf&quot;
	RMDir &quot;$INSTDIR\etc\gtk-2.0&quot; ; only if empty
	RMDir &quot;$INSTDIR\etc&quot; ; only if empty

	; some helper files here
	RMDir /r &quot;$INSTDIR\gtk2-runtime&quot;

	RMDir &quot;$INSTDIR\bin&quot;  ; only if empty

	; RMDir /r &quot;$INSTDIR\lib&quot;
	; pango modules are gone as of gtk 2.10
	;  RMDir /r &quot;$INSTDIR\lib\pango&quot;
	
	Delete &quot;$INSTDIR\lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}\loaders.cache&quot;
	; RMDir &quot;$INSTDIR\lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}\loaders&quot;  ; not forced
	RMDir &quot;$INSTDIR\lib\gdk-pixbuf-2.0\${GTK_BIN_VERSION}&quot;  ; not forced
	RMDir &quot;$INSTDIR\lib\gdk-pixbuf-2.0&quot;  ; not forced


	RMDir /r &quot;$INSTDIR\lib\gtk-2.0\modules&quot;

	; no longer in gtk as of 2.14.5
	; RMDir /r &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\immodules&quot;
	; gone as of gtk 2.16.6-2
	;RMDir /r &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\loaders&quot;

	Delete &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\engines\libwimp*.dll&quot;
	; there should be no problem deleting this
	Delete &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\engines\libpixmap*.dll&quot;

	RMDir &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}\engines&quot;  ; not forced
	RMDir &quot;$INSTDIR\lib\gtk-2.0\${GTK_BIN_VERSION}&quot;  ; not forced
	RMDir &quot;$INSTDIR\lib\gtk-2.0&quot;  ; not forced

	RMDir &quot;$INSTDIR\lib&quot;  ; not forced

	Delete &quot;$INSTDIR\share\locale\locale.alias&quot;  ; gettext

	; Remove our translations only
	StrCmp $SEC_TRANSLATIONS_INSTALLED &quot;1&quot; &quot;&quot; un_notranslations
		FindFirst $find_handle_lang_dir $found_dir &quot;$INSTDIR\share\locale\*&quot;
		find_lang_dir_next:
		; DetailPrint &quot;LOC: $found_dir&quot;
		StrCmp $found_dir &quot;&quot; find_lang_dir_done
		; check if it&#39;s a directory
		IfFileExists &quot;$INSTDIR\share\locale\$found_dir\*.*&quot; &quot;&quot; find_lang_dir_continue
		IfFileExists &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\*.*&quot; &quot;&quot; find_lang_dir_continue

		Delete &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\atk10.mo&quot;
		Delete &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\gdk-pixbuf.mo&quot;
		Delete &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\glib20.mo&quot;
		Delete &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\gtk20.mo&quot;
		Delete &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES\gtk20-properties.mo&quot;

		RmDir &quot;$INSTDIR\share\locale\$found_dir\LC_MESSAGES&quot;  ; only if empty
		RmDir &quot;$INSTDIR\share\locale\$found_dir&quot;

		find_lang_dir_continue:
		FindNext $find_handle_lang_dir $found_dir
		goto find_lang_dir_next
		find_lang_dir_done:
		FindClose $find_handle_lang_dir

		RMDir &quot;$INSTDIR\share\locale&quot;  ; only if empty, not to remove the other programs&#39; translations
	un_notranslations:


	RMDir /r &quot;$INSTDIR\share\themes\Raleigh&quot;
	RMDir /r &quot;$INSTDIR\share\themes\MS-Windows&quot;
	RMDir /r &quot;$INSTDIR\share\themes\Emacs&quot;

	RMDir &quot;$INSTDIR\share\themes&quot;  ; not forced
	RMDir &quot;$INSTDIR\share&quot;  ; not forced

	Delete &quot;$INSTDIR\gtk2_runtime_uninst.exe&quot;

	RMDir &quot;$INSTDIR&quot;  ; delete only if empty

SectionEnd ; end of uninstall section






; --------------- Helpers


; WriteEnvBat
Function WriteEnvBat
	Pop $R0 ; Output file
	Push $R9
		FileOpen $R9 $R0 w
		FileWrite $R9 &quot;@set GTK2R_PREFIX=$LIB_INSTDIR$\r$\n&quot;
		FileWrite $R9 &quot;$\r$\n&quot;
		FileWrite $R9 &quot;@echo Setting environment variables for GTK2-Runtime.$\r$\n&quot;
		FileWrite $R9 &quot;@echo.$\r$\n&quot;
		FileWrite $R9 &quot;$\r$\n&quot;
		FileWrite $R9 &quot;@echo set PATH=%GTK2R_PREFIX%;%%PATH%%$\r$\n&quot;
		FileWrite $R9 &quot;@set PATH=%GTK2R_PREFIX%;%PATH%$\r$\n&quot;
		FileWrite $R9 &quot;$\r$\n&quot;
		FileWrite $R9 &quot;@echo.$\r$\n&quot;
		FileClose $R9
	Pop $R9
FunctionEnd



; WritePostInstall
Function WritePostInstall
	SetShellVarContext all  ; use all user variables as opposed to current user
	Pop $R0 ; Output file
	Push $R9
		FileOpen $R9 $R0 w
		FileWrite $R9 &quot;@echo off$\r$\n&quot;
		FileWrite $R9 &quot;$\&quot;$INSTDIR\bin\pango-querymodules.exe$\&quot; &gt; $\&quot;$INSTDIR\etc\pango\pango.modules$\&quot;$\r$\n&quot;
		FileWrite $R9 &quot;rem $\&quot;$INSTDIR\bin\gdk-pixbuf-query-loaders.exe$\&quot; &gt; $\&quot;$INSTDIR\etc\gtk-2.0\gdk-pixbuf.loaders$\&quot;$\r$\n&quot;
		FileWrite $R9 &quot;$\&quot;$INSTDIR\bin\gtk-query-immodules-2.0.exe$\&quot; &gt; $\&quot;$INSTDIR\etc\gtk-2.0\gtk.immodules$\&quot;$\r$\n&quot;
		FileWrite $R9 &quot;rem $\&quot;$INSTDIR\bin\gtk-update-icon-cache.exe$\&quot;$\r$\n&quot;
		FileClose $R9
	Pop $R9
FunctionEnd




; Detect previous installation
Function DetectPrevInstallation
	; if /removeold=no option is given, don&#39;t check anything.
	StrCmp $install_option_removeold &quot;no&quot; old_detect_done

	SetShellVarContext all  ; use all user variables as opposed to current user
	push $R0

	; detect previous installation
	ReadRegStr $R0 HKLM &quot;${PRODUCT_UNINST_KEY}&quot; &quot;UninstallString&quot;
	StrCmp $R0 &quot;&quot; old_detect_done

	MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
		&quot;${PRODUCT_NAME} is already installed. $\n$\nClick `OK` to remove the \
		previous version or `Cancel` to continue anyway.&quot; \
		/SD IDOK IDOK old_uninst
		; Abort
		goto old_detect_done

	; Run the old uninstaller
	old_uninst:
		ClearErrors
		IfSilent old_silent_uninst old_nosilent_uninst

		old_nosilent_uninst:
			ExecWait &#39;$R0&#39;
			goto old_uninst_continue

		old_silent_uninst:
			; We assume it&#39;s an NSIS-generated uninstaller.
			ExecWait &#39;$R0 /S _?=$INSTDIR&#39;

		old_uninst_continue:

		IfErrors old_no_remove_uninstaller

		; You can either use Delete /REBOOTOK in the uninstaller or add some code
		; here to remove to remove the uninstaller. Use a registry key to check
		; whether the user has chosen to uninstall. If you are using an uninstaller
		; components page, make sure all sections are uninstalled.
		old_no_remove_uninstaller:

	old_detect_done: ; old installation not found, all ok

	pop $R0
FunctionEnd



; Prevent running multiple instances of the installer
Function PreventMultipleInstances
	Push $R0
	System::Call &#39;kernel32::CreateMutexA(i 0, i 0, t ${PRODUCT_NAME}) ?e&#39;
	Pop $R0
	StrCmp $R0 0 +3
		MessageBox MB_OK|MB_ICONEXCLAMATION &quot;The installer is already running.&quot; /SD IDOK
		Abort
	Pop $R0
FunctionEnd




; eof
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a 64-bit version of HDF5 with MinGW-w64]]></title>
    <link href="http://yeangpeng.tech/blog/2014/01/29/building-a-64-bit-version-of-hdf5-with-mingw-w64/"/>
    <updated>2014-01-29T16:35:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/01/29/building-a-64-bit-version-of-hdf5-with-mingw-w64</id>
    <content type="html"><![CDATA[<p>I have finally decided to try building a 64-bit version of the Windows package of <a href="http://github.com/tschoonj/xmimsim">XMI-MSIM</a>.
As is the case for my 32-bit builds, I am using the MinGW compiler as provided by <a href="http://tdm-gcc.tdragon.net">TDM-GCC</a>, although obviously this time I opted for the 64-bit variant.
Now XMI-MSIM has a considerable amount of dependencies (GTK+, GSL, HDF5, libxml2, libxslt, curl, json-glib and others), I am again forced to compile these all again from source before I can even think of compiling my actualy software. One exception here is GTK+ and its dependencies since the good people from the GTK project are offering 64-bit builds (compiled with MinGW-w64) on their <a href="http://www.gtk.org/download/win64.php">website</a>.</p>

<p>In the past, the HDF5 build has always cost me most of my time, compared to the other packages, to get it compiled on MSYS, especially the Fortran bindings part. Now since I have dropped the dependency for these Fortran bindings in my latest version, because of my past experiences, I hoped that compiling them with MinGW-w64 might somehow have become easier.</p>

<p>Alas&hellip;</p>

<!--more-->


<p>As it turns out the HDF5 people have decided to drop support for building HDF5 with MinGW with their 1.8.5 release, and are currently only supporting builds on Windows with either cygwin (with the configure script) or Visual Studio (with CMake), none of which was suitable for me.
I downloaded the latest version 1.8.12 from the <a href="http://www.hdfgroup.org/HDF5/release/obtainsrc.html">HDF5 website</a>, unpacked the tarball and ran:</p>

<pre><code>$ ./configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --disable-hl --prefix=$HOME
</code></pre>

<p>The two first options ensure that the configure script realizes that I am using a 64-bit MinGW compiler, which may be necessary for some tests to pass (at least with other packages I compiled this was necessary).
The third option disable the high-level bindings, while the last option makes sure that they files will be installed in subfolders of my home directory.</p>

<p>Running make resulted in the compilation process starting but it halted after some time with errors that were related to some preprocessor macros that were not defined. A quick google search yielded <a href="http://mail.lists.hdfgroup.org/pipermail/hdf-forum_lists.hdfgroup.org/2012-April/005699.html">this</a>. After implementing this fix I resumed compilation but ran again into trouble. This time google was not helpful but I found the fix myself.</p>

<p>The solution to both problems was to append the following lines to the src/H5pubconf.h within your <em>builddirectory</em>:</p>

<pre><code class="c ">//fixes first problem
#ifndef H5_HAVE_WIN32_API
#ifdef WIN32 /* defined for all windows systems */
#define H5_HAVE_WIN32_API 1
#endif
#endif

#ifndef H5_HAVE_MINGW
#ifdef __MINGW32__ /*defined for all MinGW compilers */
#define H5_HAVE_MINGW 1
#endif
#endif

//fixes second problem
#define H5_BUILT_AS_DYNAMIC_LIB 1
</code></pre>

<p>Afterwards everything builds fine, and even make check went pretty well except for one error, which seemed harmless.</p>

<p>There&rsquo;s a good chance that future HDF5 versions will either fix this by including this patch (although I wouldn&rsquo;t count on it) or will break building HDF5 with MinGW-w64 once again in new and fascinating ways (I put my money on this). Since I will be stuck with HDF5 for a while longer, don&rsquo;t be surprised if this post gets updated&hellip;</p>
]]></content>
  </entry>
  
</feed>
