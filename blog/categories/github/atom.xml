<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Hi, Iâ€™m Yang Peng]]></title>
  <link href="http://yeangpeng.tech/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://yeangpeng.tech/"/>
  <updated>2016-02-18T15:37:18+08:00</updated>
  <id>http://yeangpeng.tech/</id>
  <author>
    <name><![CDATA[Yang Peng]]></name>
    <email><![CDATA[me@yangpeng.tech]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gtk2 64-bit Windows Runtime Environment Installer: now on GitHub!]]></title>
    <link href="http://yeangpeng.tech/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github/"/>
    <updated>2014-09-29T19:33:58+08:00</updated>
    <id>http://yeangpeng.tech/blog/2014/09/29/gtk2-64-bit-windows-runtime-environment-installer-now-on-github</id>
    <content type="html"><![CDATA[<p>As predicted in my <a href="http://tschoonj.github.io/blog/2014/02/08/gtk2-64-bit-windows-runtime-environment-installer/">first post</a> on the Gtk2 64-bit Windows Runtime Environment Installer, I have indeed ventured into compiling Gtk (2.24.24) and all its dependencies, mainly because I was getting increasingly unhappy with the old Gtk 2.22.1 based bundle that <a href="http://www.gtk.org/download/win64.php">is being distributed</a> by the Gtk project. It was in fact this very bundle that I was using to generate the installer I announced in my first post on this subject.</p>

<p>So, after spending about 10 hours of compiling (and recompiling a couple of times when I didn&rsquo;t get the configure options right) of more than a dozen software packages, I ended up with a fully working (at least until now&hellip;) collection of DLLs. I updated the code from my initial installer to include the new DLLs and uploaded the new installer <a href="http://lvserver.ugent.be/gtk-win64/">here</a>. I also uploaded a zip-file (sdk) containing all executables, DLLs, linking libraries (.dll.a) and headers, that can be used by anyone not willing to replicate my compilation effort. In fact I recommend that people using this installer to distribute the Gtk runtime along with their own program, to compile and link against this sdk, in order to avoid any link issues at runtime&hellip;</p>

<p>You may notice that I did not use the exact same dependencies in my compilation stack as those offered by the official Gtk bundle. I followed the <a href="http://hexchat.github.io/gtk-win32/">Hexchat flowchart</a> and ended up with additional dependencies of libffi and harfbuzz. libexpat was replaced by libxml2. This explains why the new installer is considerably larger than the previous one.</p>

<p>Last but not least, I forked the original repository of the installer from <a href="http://sourceforge.net/projects/gtk-win/">its sourceforge</a> repository and created my own personal copy on <a href="https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer">GitHub</a>. Check the README file for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking for updates using git tags]]></title>
    <link href="http://yeangpeng.tech/blog/2013/07/08/checking-for-updates-using-git-tags/"/>
    <updated>2013-07-08T19:39:00+08:00</updated>
    <id>http://yeangpeng.tech/blog/2013/07/08/checking-for-updates-using-git-tags</id>
    <content type="html"><![CDATA[<p>At some point during the development of version 2.0 of my software package <a href="http://github.com/tschoonj/xmimsim">XMI-MSIM</a>, I decided to implement a routine that would allow for the program to check if newer versions (updates) were available. This would be extremely useful for the users of the Windows and Mac OS X builds of my package, since these operating systems do not come with package-management tools as most Linux distributions do (I am staying far away from Mac App Store and Windows store as I am not willing to pay their developer fees).</p>

<p>Initially I was looking at <a href="http://sparkle.andymatuschak.org">Sparkle</a>, a fantastic tool for OS X apps.
However, this would mean a different solution for my Windows build&hellip;</p>

<p>Since my goal is to keep the platform specific code as low as possible (#ifdef&rsquo;s really are quite ugly things), obviously I had to come up with a different solution.</p>

<!--more-->


<h2>Getting the tags with curl</h2>

<p>In a rare moment of clarity, I came up with the idea of using git tags for this. Like most people, I am using the tags to indicate releases, and as a rule I include the version number in the tagname (e.g. XMI-MSIM-1.0). My method consists of having a routine called <code>check_for_updates</code> (what&rsquo;s in a name?), download the list of tags from github.com (using the <a href="http://developer.github.com/v3/git/tags/">github v3 API for tags</a>). As I was writing (this part of) my application XMI-MSIM in C, I was looking for a library that could easily accomplish this. The quest yielded <a href="http://curl.haxx.se">libcurl</a>, an extremely versatile tool for transferring data using many, many protocols. The code I used for this was something like (full code at the end of this post):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//this line is obviously specific to your github account name and project name.</span>
</span><span class='line'><span class="c1">//Change it accordingly</span>
</span><span class='line'><span class="cp">#define XMIMSIM_GITHUB_TAGS_LOCATION &quot;https:</span><span class="c1">//api.github.com/repos/tschoonj/xmimsim/git/refs/tags&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">curlerrors</span><span class="p">[</span><span class="n">CURL_ERROR_SIZE</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">CURL</span> <span class="o">*</span><span class="n">curl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CURLcode</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">MemoryStruct</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">chunk</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">chunk</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span><span class="s">&quot;checking for updates...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//setup curl</span>
</span><span class='line'>    <span class="n">curl</span> <span class="o">=</span> <span class="n">curl_easy_init</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">curl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Could not initialize cURL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">XMIMSIM_UPDATES_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_URL</span><span class="p">,</span><span class="n">XMIMSIM_GITHUB_TAGS_LOCATION</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_SSL_VERIFYPEER</span><span class="p">,</span> <span class="mi">0L</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_WRITEFUNCTION</span><span class="p">,</span> <span class="n">WriteMemoryCallback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">chunk</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_USERAGENT</span><span class="p">,</span> <span class="s">&quot;libcurl-agent/1.0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_ERRORBUFFER</span><span class="p">,</span> <span class="n">curlerrors</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_CONNECTTIMEOUT</span><span class="p">,</span> <span class="mi">4L</span><span class="p">);</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">curl_easy_perform</span><span class="p">(</span><span class="n">curl</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;check_for_updates: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">curlerrors</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">XMIMSIM_UPDATES_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">curl_easy_cleanup</span><span class="p">(</span><span class="n">curl</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Parse the JSON code with Json-Glib and compare versions</h2>

<p>The buffer that is returned in <code>chunk</code>, contains JSON code. To parse this, I used the Json-Glib library, a logical choice since my project is written in Gtk+ anyway&hellip; Code extract:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">parser</span> <span class="o">=</span> <span class="n">json_parser_new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">json_parser_load_from_data</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">chunk</span><span class="p">.</span><span class="n">memory</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">)</span> <span class="o">==</span>  <span class="n">FALSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;check_for_updates: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">error</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">XMIMSIM_UPDATES_ERROR</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">JsonNode</span> <span class="o">*</span><span class="n">rootNode</span> <span class="o">=</span> <span class="n">json_parser_get_root</span><span class="p">(</span><span class="n">parser</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">json_node_get_node_type</span><span class="p">(</span><span class="n">rootNode</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JSON_NODE_ARRAY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;check_for_updates: rootNode is not an Array</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">XMIMSIM_UPDATES_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">JsonArray</span> <span class="o">*</span><span class="n">rootArray</span> <span class="o">=</span> <span class="n">json_node_get_array</span><span class="p">(</span><span class="n">rootNode</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">max_version</span> <span class="o">=</span> <span class="n">g_strdup</span><span class="p">(</span><span class="n">PACKAGE_VERSION</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">current_version</span> <span class="o">=</span> <span class="n">g_strdup</span><span class="p">(</span><span class="n">max_version</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_array_foreach_element</span><span class="p">(</span><span class="n">rootArray</span><span class="p">,</span> <span class="p">(</span><span class="n">JsonArrayForeach</span><span class="p">)</span> <span class="n">check_version_of_tag</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">max_version</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rv</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">g_ascii_strtod</span><span class="p">(</span><span class="n">max_version</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">g_ascii_strtod</span><span class="p">(</span><span class="n">current_version</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span>
</span><span class='line'>            <span class="n">rv</span> <span class="o">=</span> <span class="n">XMIMSIM_UPDATES_AVAILABLE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>            <span class="n">rv</span> <span class="o">=</span> <span class="n">XMIMSIM_UPDATES_NONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">*</span><span class="n">max_version_rv</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="n">g_strstrip</span><span class="p">(</span><span class="n">max_version</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">g_object_unref</span><span class="p">(</span><span class="n">parser</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span><span class="s">&quot;done checking for updates</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Important here is the <code>json_array_foreach_element</code> function, which will call <code>check_version_of_tag</code> for each tag, and update the highest found tag version number with each iteration.</p>

<p>After this, all that needs to be done is to compare this highest tag version with the internal version number (<code>PACKAGE_VERSION</code>, typically provided by a configure script), and the result is returned.</p>

<p>Now the method that I just described assumes that the version numbering is done with one major number and one minor number, allowing me to easily convert into a float for version comparison. Although this is sufficient for my personal needs, others may have to come up with a slightly more complex algorithm allowing to compare version numbers consisting of a major, minor and macro version number.</p>

<h2>The code</h2>

<p>This is the full code: feel free to hack away at it.
It is taken from <a href="https://github.com/tschoonj/xmimsim/blob/master/bin/xmimsim-gui-updater.c">xmimsim-gui-updater.c</a>, which also contains code to download the new packages from a webserver (also using curl).</p>

<p><div><script src='https://gist.github.com/5951294.js'></script>
<noscript><pre><code>#include &lt;curl/curl.h&gt;
#include &lt;json-glib/json-glib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;


/*
 *
 * This code allows for the checking of available updates by parsing the JSON output obtained
 * through requesting the tags from the GitHub repo of XMI-MSIM
 *
 *
 * compile with gcc -o github-updater `pkg-config --cflags json-glib-1.0 libcurl` github-updater.c `pkg-config --libs json-glib-1.0 libcurl`
 *
 *
 */

#define XMIMSIM_GITHUB_TAGS_LOCATION &quot;https://api.github.com/repos/tschoonj/xmimsim/git/refs/tags&quot;
#define XMIMSIM_DOWNLOADS_LOCATION &quot;http://lvserver.ugent.be/xmi-msim&quot;
#define PACKAGE_VERSION &quot;1.0&quot; 

enum {
        XMIMSIM_UPDATES_ERROR,
        XMIMSIM_UPDATES_AVAILABLE,
        XMIMSIM_UPDATES_NONE
};

struct MemoryStruct {
        char *memory;
        size_t size;
};

static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {
        size_t realsize = size * nmemb;
        struct MemoryStruct *mem = (struct MemoryStruct *)userp;
        
        mem-&gt;memory = realloc(mem-&gt;memory, mem-&gt;size + realsize + 1);
                       
        memcpy(&amp;(mem-&gt;memory[mem-&gt;size]), contents, realsize);
        mem-&gt;size += realsize;
        mem-&gt;memory[mem-&gt;size] = 0;
        
        return realsize;
}

static void check_version_of_tag(JsonArray *array, guint index, JsonNode *node, char **max_version) {
        JsonObject *object = json_node_get_object(node);
        if (!json_object_has_member(object,&quot;ref&quot;)) {
                return;
        }

        const gchar *ref_string = json_object_get_string_member(object, &quot;ref&quot;);

        //discard old tag...
        if (strncmp(ref_string,&quot;refs/tags/XMI-MSIM-&quot;,strlen(&quot;refs/tags/XMI-MSIM-&quot;)) != 0)
                return;

        char *tag_version_str = strrchr(ref_string,&#39;-&#39;)+1;
        gdouble tag_version = g_ascii_strtod(tag_version_str,NULL);
        if (tag_version &gt; g_ascii_strtod(*max_version,NULL)) {
                free(*max_version);
                *max_version = strdup(tag_version_str);
        }

        return;
}


int check_for_updates(char **max_version_rv) {
        GError *error = NULL;
        JsonParser *parser;
        char curlerrors[CURL_ERROR_SIZE];


        CURL *curl;
        CURLcode res;
        struct MemoryStruct chunk;
        
        chunk.memory = malloc(1);
        chunk.size = 0;

        fprintf(stdout,&quot;checking for updates...\n&quot;);
        
        
        curl = curl_easy_init();
        if (!curl) {
                fprintf(stderr,&quot;Could not initialize cURL\n&quot;);
                return XMIMSIM_UPDATES_ERROR;
        } 

        curl_easy_setopt(curl, CURLOPT_URL,XMIMSIM_GITHUB_TAGS_LOCATION);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&amp;chunk);
        curl_easy_setopt(curl, CURLOPT_USERAGENT, &quot;libcurl-agent/1.0&quot;);
        curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, curlerrors);
        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 4L);
        res = curl_easy_perform(curl);
        if (res != 0) {
                fprintf(stderr,&quot;check_for_updates: %s\n&quot;,curlerrors);
                return XMIMSIM_UPDATES_ERROR;
        }
        curl_easy_cleanup(curl);
        
        
                
        
        parser = json_parser_new();
        if (json_parser_load_from_data(parser, chunk.memory, -1,&amp;error) ==  FALSE) {
                if (error) {
                        fprintf(stderr,&quot;check_for_updates: %s\n&quot;,error-&gt;message);
                        return XMIMSIM_UPDATES_ERROR;
                }
        }
        JsonNode *rootNode = json_parser_get_root(parser);
        if(json_node_get_node_type(rootNode) != JSON_NODE_ARRAY) {
                fprintf(stderr,&quot;check_for_updates: rootNode is not an Array\n&quot;);
                return XMIMSIM_UPDATES_ERROR;
        }
        JsonArray *rootArray = json_node_get_array(rootNode);
        char *max_version = g_strdup(PACKAGE_VERSION);
        char *current_version = g_strdup(max_version);
        json_array_foreach_element(rootArray, (JsonArrayForeach) check_version_of_tag, &amp;max_version);

        int rv;
        if (g_ascii_strtod(max_version, NULL) &gt; g_ascii_strtod(current_version, NULL))
                rv = XMIMSIM_UPDATES_AVAILABLE;
        else
                rv = XMIMSIM_UPDATES_NONE;

        *max_version_rv = strdup(g_strstrip(max_version));

        g_object_unref(parser);
        fprintf(stdout,&quot;done checking for updates\n&quot;);

        return rv;
}

int main (int argc, char *argv[]) {
  char *max_version;

	int check = check_for_updates(&amp;max_version);

	if (check == XMIMSIM_UPDATES_AVAILABLE) {
		fprintf(stdout, &quot;Update available: now write some code to download the damn update\n&quot;);
	}
	return 0;
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
